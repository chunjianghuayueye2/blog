<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>春江花月夜o</title>
  
  <subtitle>既自以心为形役，奚惆怅而独悲。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-14T03:06:35.309Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>durian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql索引失效</title>
    <link href="http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/"/>
    <id>http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/</id>
    <published>2021-06-13T07:40:54.744Z</published>
    <updated>2021-06-14T03:06:35.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="口诀orz"><a href="#口诀orz" class="headerlink" title="口诀orz"></a>口诀orz</h2><ul><li>1.全值匹配我最爱</li><li>2.最佳左前缀法则</li><li>3.带头大哥不能死</li><li>4.中间兄弟不能断</li><li>5.索引列上不计算</li><li>6.范围之后全失效</li><li>7.百分like加右边</li><li>8.字符串里有引号</li></ul><h2 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h2><ul><li><p>1.不在索引列上做任何操作<br>（计算，函数，（自动or手动）类型转换），会导致索引失效而转向全表扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’july’;</span><br><span class="line">explain select * from staffs where left(name,4)&#x3D;’july’;</span><br></pre></td></tr></table></figure></li><li><p>2.存储引擎不能使用索引中范围条件右边的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’July’ and age &gt; 25</span><br><span class="line">and pos&#x3D;’manager’;</span><br></pre></td></tr></table></figure><p>各种范围：in like &lt;&gt; &gt;= &lt;= between之类的范围之后全失效<br>解决方法：把范围值建在索引的最后一个。</p></li><li><p>3.mysql在使用不等于（!=或&lt;&gt;）的时候无法使用索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name!&#x3D;’july’;</span><br></pre></td></tr></table></figure><p>实际上mysql8.0.19用到了这些。</p></li><li><p>4.is null, is not null也无法使用索引<br>实际上mysql8.0.19  is not null 可以使用index。</p></li></ul><ul><li><p>5.like以通配符开头（’%abc…’）mysql索引会失效变成全表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from staffs where name like ‘%July’;</span><br></pre></td></tr></table></figure><p>全表扫描type = all</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selec * from staffs where name like ‘July%’;</span><br></pre></td></tr></table></figure><p>type = range</p><ul><li>1.一般写like查询只能在右边写%，否则为全表扫描。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index(c1, c2, c3)</span><br><span class="line">explain select * from test where c1&#x3D;’a1’ and c2 like ‘kk%’ and c3&#x3D;’a3’;</span><br><span class="line">这时候用到了c1, c2, c3</span><br><span class="line">explain select * from test where c1&#x3D;’a1’ and c2 like ‘%kk%’ and c3&#x3D;’a3’;</span><br><span class="line">这时候只用到了c1</span><br></pre></td></tr></table></figure></li><li>2.当我们非用%%两个%，如何解决索引失效？<br>使用覆盖索引（复合索引）<br>查的字段和复合字段顺序和名称一致</li></ul></li><li><p>6.字符串不加单引号索引失效<br>explain select * from staffs where name=2000;<br>mysql底层隐式类型转换，参考第3条，不要在索引列上做任何操作无论自动还是手动的。<br>explain select * from staffs where name=’2000’;</p></li></ul><ul><li>7.少用or，用它来链接是会索引失效</li></ul><p>5.0不能使用索引 type为all<br>8.0以上type 为range</p><h2 id="索引优化相关问题"><a href="#索引优化相关问题" class="headerlink" title="索引优化相关问题"></a>索引优化相关问题</h2><ul><li><p>1.当我们建立三个联合索引时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’’ and pos&#x3D;’’ and age&#x3D;’’;</span><br><span class="line">explain select * from staffs where name&#x3D;’’ and pos&#x3D;’’ and age&#x3D;’’;</span><br></pre></td></tr></table></figure></li><li><p>这些写法顺序不会影响执行，为什么呢？<br>这是因为mysql的CBO cost based optimizer查询优化器会对mysql的命令进行调整以达到最佳的效果。<br>但建议最好用按顺序的。</p></li><li><p>2.有order by的情况 index(name, age, pos)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’’ and age&#x3D;’’ order by pos;</span><br></pre></td></tr></table></figure><p>这时候可以使用两个索引，索引pos用来排序未用来查找。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’’  order by age，pos;</span><br></pre></td></tr></table></figure><p>这里用了一个索引，并且没有filesort，因为age和pos可以联合用于排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’’  order by pos，age;</span><br></pre></td></tr></table></figure><p>当没有按照复合索引的顺序时，出现file sort。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’’ and age&#x3D;’’ order by pos，age;</span><br></pre></td></tr></table></figure><p>这个时候由于age已经未定值了，虽然orderby违反了顺序，也并不会产生filesort，默认age在orderby后无效</p></li><li><p>3.group by的情况index(name, age, pos)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’’ group by age, pos;</span><br></pre></td></tr></table></figure><p>这时的顺序是符合索引的所以很优质</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’’ group by pos, age;</span><br></pre></td></tr></table></figure><p>这时的extras会有：temporary, filesort恐怖如斯</p></li><li><p>4.总结<br>分组之前必排序，定值、范围还是排序，一般order by是给个范围<br>group by基本上都需要进行排序可能有临时表。</p></li><li><p>5.尽量使用覆盖索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name&#x3D;’’ and age&gt;’’ and pos&#x3D;’’</span><br><span class="line">explain name,age,pos from staffs where name&#x3D;’’ and age&gt;’’ and pos&#x3D;’’</span><br></pre></td></tr></table></figure></li></ul><h2 id="一般性建议"><a href="#一般性建议" class="headerlink" title="一般性建议"></a>一般性建议</h2><ul><li>1.对于单值索引，尽量选择对当前query过滤性更好的索引</li><li>2.在选择组合索引的时候尽量选择可以能够包含当前query中的where字句中更多<br>字段的索引，尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的。</li></ul><h2 id="口诀首尾呼应"><a href="#口诀首尾呼应" class="headerlink" title="口诀首尾呼应"></a>口诀首尾呼应</h2><p>全值匹配我最爱，最左前缀要遵守。<br>带头大哥不能死，中间兄弟不能断。<br>索引列上少计算，范围之后全失效。<br>like百分写最右，覆盖索引不写星。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;口诀orz&quot;&gt;&lt;a href=&quot;#口诀orz&quot; class=&quot;headerlink&quot; title=&quot;口诀orz&quot;&gt;&lt;/a&gt;口诀orz&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.全值匹配我最爱&lt;/li&gt;
&lt;li&gt;2.最佳左前缀法则&lt;/li&gt;
&lt;li&gt;3.带头大哥不能死&lt;/li&gt;</summary>
      
    
    
    
    <category term="nosql" scheme="http://example.com/categories/nosql/"/>
    
    <category term="mysql高级篇" scheme="http://example.com/categories/nosql/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql索引优化案例分析</title>
    <link href="http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</id>
    <published>2021-06-13T07:40:39.919Z</published>
    <updated>2021-06-13T07:49:16.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h2><ul><li><p>1.创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create tables if not exists article(</span><br><span class="line">id int unsigned primary key not null auto_increment,</span><br><span class="line">author_id int unsigned not null,</span><br><span class="line">category_id int unsigned not null,</span><br><span class="line">comments int unsigned not null,</span><br><span class="line">views int unsigned not null,</span><br><span class="line">tiltle varbinary(255) not null,</span><br><span class="line">content TEXT(255) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>2.插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into article(author_id, category_id, comments, views, title, content) vlaues (1,1,1,1,’1’,’1’), (2,2,2,2,’2’,’2’),(1,1,3,3,’3’,’3’);</span><br></pre></td></tr></table></figure></li><li><p>3.explain</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select author_id, id from article where category_id&#x3D;1 and comments&gt;1 oder by views limit 1;</span><br></pre></td></tr></table></figure><p>这个时候是全表扫描，type为all效率极低。</p></li><li><p>4.建立联合索引<br>我们按where筛选顺序建立联合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_article_ccv on article(category_id, comments, views);</span><br></pre></td></tr></table></figure></li><li><p>5.再次explain</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select author_id, id from article where category_id&#x3D;1 and comments&gt;1 oder by views limit 1;</span><br></pre></td></tr></table></figure><p>发现type为range extras有file_sort<br>分析：由于comments是大于1的一个范围值，不具备索引查找条件，<br>所以联合索引到comments就失效了，所以我们需要重新建立不包含comments的联合索引</p></li><li><p>6.重新建立联合索引<br>create index idx_article_cv on article(category_id, views);<br>再次explain select author_id, id from article where category_id=1 and comments&gt;1 oder by views limit 1;<br>发现type变为ref，file_sort消失。<br>优化结束。</p></li></ul><h2 id="两表"><a href="#两表" class="headerlink" title="两表"></a>两表</h2><p>当通过连接进行的sql会如何进行优化sql？</p><ul><li><p>1.创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists class(</span><br><span class="line">id int unsigned not null primary key auto_increment,</span><br><span class="line">card int unsigned not null</span><br><span class="line">);</span><br><span class="line">create table if not exists book(</span><br><span class="line">bookid int unsigned not null primary key auto_increment,</span><br><span class="line">card int unsigned not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>2.插入数据<br>随便给两张表插入点数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into class(card) values(floor(1+rand(20)));</span><br></pre></td></tr></table></figure></li><li><p>3.explain</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from class left join book on class.card&#x3D;book.card</span><br></pre></td></tr></table></figure><p>这个时候没有建立索引我们发现type都为all</p></li><li><p>那我们到底是给left join的左表建立索引还是右表？<br>分析：左边建立索引就是full index scan，type为index，而右边建立索引就是非唯一索引扫描，通<br>过左边筛选出的card去找寻对应的card，所以右边type为ref，果断选择建立右表索引。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table book add index idx_book_card (card);</span><br><span class="line">create index idx_book_card on book(card);</span><br></pre></td></tr></table></figure><ul><li>4.再次explain，发现分析正确。建索引应该建立在从表上。<br>（如果两表都建索引呢）？？？？？？</li></ul><h2 id="三表"><a href="#三表" class="headerlink" title="三表"></a>三表</h2><ul><li>1.建表<br>再新建一个表phone<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists phone(</span><br><span class="line">phoneid int unsigned not null primary key auto_increment,</span><br><span class="line">card int unsigned not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure>分析：其实思路和双表一样，两个外表都建立索引</li></ul><h2 id="join语句优化总结："><a href="#join语句优化总结：" class="headerlink" title="join语句优化总结："></a>join语句优化总结：</h2><p>1.尽可能减少join语句中的nestedLoop的循环总次数：永远用小的结果集驱动大的结果集，小表驱动大表。<br>2.保证join语句被驱动表上join条件字段已经被索引：<br>当无法保证被驱动表的join字段被索引且内存资源充足的前提下，不要太吝惜joinbuffer的设置<br>3.以上都是mysql5.7的检测结果，msyql8后连表查询有所改变</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单表&quot;&gt;&lt;a href=&quot;#单表&quot; class=&quot;headerlink&quot; title=&quot;单表&quot;&gt;&lt;/a&gt;单表&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.创建表&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="nosql" scheme="http://example.com/categories/nosql/"/>
    
    <category term="mysql高级篇" scheme="http://example.com/categories/nosql/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://example.com/2021/06/13/webframe/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/06/13/webframe/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-06-13T07:17:23.394Z</published>
    <updated>2021-06-13T07:20:21.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h2><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a><a href="http://c.biancheng.net/view/1322.html">开闭原则</a></h3><p>软件实体应当对扩展开放，对修改关闭</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a><a href="http://c.biancheng.net/view/1324.html">里氏替换原则</a></h3><ul><li>1.子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>2.子类中可以增加自己特有的方法</li><li>3.当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li><li>4.当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</li></ul><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a><a href="http://c.biancheng.net/view/1326.html">依赖倒置原则</a></h3><ul><li>1.每个类尽量提供接口或抽象类，或者两者都具备。</li><li>2.变量的声明类型尽量是接口或者是抽象类。</li><li>3.任何类都不应该从具体类派生。</li><li>4.使用继承时尽量遵循里氏替换原则。</li></ul><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a><a href="http://c.biancheng.net/view/1327.html">单一职责原则</a></h3><ul><li>单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</li><li>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性，降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li></ul><h3 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a><a href="http://c.biancheng.net/view/1331.html">迪米特原则</a></h3><p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a><a href="http://c.biancheng.net/view/1333.html">合成复用原则</a></h3><p>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a><a href="http://c.biancheng.net/view/1330.html">接口隔离原则</a></h3><p>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。</p><h2 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h2><p>按照架构分为3种</p><ul><li>1.创建型模式</li><li>2.结构型模式</li><li>3.行为模式</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 简单单例</span><br><span class="line">import threading</span><br><span class="line">class Single:</span><br><span class="line">    lock &#x3D; threading.Lock()</span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        with Single.lock:</span><br><span class="line">            if not hasattr(cls, &#39;_instance&#39;):</span><br><span class="line">                cls._instance &#x3D; super().__new__(cls, *args, **kwargs)</span><br><span class="line">        return cls._instance</span><br></pre></td></tr></table></figure><h3 id="装饰器模式AOP"><a href="#装饰器模式AOP" class="headerlink" title="装饰器模式AOP"></a>装饰器模式AOP</h3><h4 id="装饰器实现日志"><a href="#装饰器实现日志" class="headerlink" title="装饰器实现日志"></a>装饰器实现日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def decorator(*args, **kwargs):</span><br><span class="line">        with open(func.__name__, &#39;wb&#39;) as f:</span><br><span class="line">            current_time &#x3D; time.time()</span><br><span class="line">            res &#x3D; func(*args, **kwargs)</span><br><span class="line">            cost_time &#x3D; time.time() - current_time</span><br><span class="line">            f.write(&#39;执行&#123;&#125;函数，花费了&#123;&#125;s&#39;.format(func.__name__, cost_time).encode(&#39;utf-8&#39;))</span><br><span class="line">        return res</span><br><span class="line">    return decorator</span><br><span class="line">    </span><br><span class="line">@log</span><br><span class="line">def task(*args, **kwargs):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    return &#39;axiba&#39;</span><br><span class="line"></span><br><span class="line">print(task(123, 5, 6))</span><br></pre></td></tr></table></figure><h4 id="装饰器实现缓存"><a href="#装饰器实现缓存" class="headerlink" title="装饰器实现缓存"></a>装饰器实现缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def cache(func):</span><br><span class="line">    cache &#x3D; &#123;&#125;</span><br><span class="line">    def decorator(n):</span><br><span class="line">        if n in cache:</span><br><span class="line">            return cache[n]</span><br><span class="line">        else:</span><br><span class="line">            cache[n] &#x3D; func(n)</span><br><span class="line">        return cache[n]</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@cache</span><br><span class="line">def fib(n):</span><br><span class="line">    if n &lt;&#x3D; 1:</span><br><span class="line">        return n</span><br><span class="line">    return fib(n-1) + fib(n-2)</span><br><span class="line"></span><br><span class="line">print(fib(100))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;七大原则&quot;&gt;&lt;a href=&quot;#七大原则&quot; class=&quot;headerlink&quot; title=&quot;七大原则&quot;&gt;&lt;/a&gt;七大原则&lt;/h2&gt;&lt;h3 id=&quot;开闭原则&quot;&gt;&lt;a href=&quot;#开闭原则&quot; class=&quot;headerlink&quot; title=&quot;开闭原则&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/MHA/"/>
    <id>http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/MHA/</id>
    <published>2021-06-13T04:16:55.764Z</published>
    <updated>2021-06-13T04:16:55.764Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2021-06-13T04:14:41.084Z</published>
    <updated>2021-06-13T04:14:41.084Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/mysql%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/mysql%E9%94%81%E6%9C%BA%E5%88%B6/</id>
    <published>2021-06-13T04:14:10.171Z</published>
    <updated>2021-06-13T04:14:10.171Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96/"/>
    <id>http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96/</id>
    <published>2021-06-13T04:13:20.186Z</published>
    <updated>2021-06-13T04:13:20.186Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql索引</title>
    <link href="http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/%E7%B4%A2%E5%BC%95/"/>
    <id>http://example.com/2021/06/13/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/%E7%B4%A2%E5%BC%95/</id>
    <published>2021-06-13T04:12:18.235Z</published>
    <updated>2021-06-13T07:29:20.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引是什么？"><a href="#索引是什么？" class="headerlink" title="索引是什么？"></a>索引是什么？</h2><p>是帮助mysql高效获取数据的数据结构，可以得到索引的本质：索引是数据结构。（btree）</p><ul><li>1.排好序的快速查找数据结构</li><li>2.在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以<br>某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。</li><li>3.当你删除数据后，某些索引指向就会失效。<br>这个时候需要锁表重构索引。</li><li>4.为什么update、insert慢，因为数据在改重新指向的索引也在修改。（频繁删改的字段不适合索引）</li><li>5.一般来说索引也很大，不可能全部存储在内存种，因此索引往往以文件的形式存储在磁盘上。</li><li>6.我们平常所说的索引，如果没有特别指明，都是B+树（多路搜索树）结构组织索引，其中聚集索引，<br>次要索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，除了B+树还有hash索引。</li></ul><h2 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h2><ul><li>优势：<ul><li>1.提高数据检索速率，降低IO成本</li><li>2.通过索引列对数据进行排序，降低数据排序成本，降低CPU的消耗</li></ul></li><li>缺点：<ul><li>1.实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的</li><li>2.虽然索引大大提高了查询速度，但同时降低了更新表的速度，如果对表insert update 或 delete，因为更新表时，mysql不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段。</li></ul></li></ul><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><ul><li>1.单值索引 一个索引只包含单个列</li><li>2.唯一索引 索引列必须唯一，可以null</li><li>3.复合索引 即一个索引多个列</li><li>4.基本语法 <ul><li>1.create [unique] index indexName on mytable(column(length));</li><li>2.alter mytable ADD [unique] index [indexName] on (coulumnname(length));</li></ul></li></ul><h2 id="mysql索引结构"><a href="#mysql索引结构" class="headerlink" title="mysql索引结构"></a><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">mysql索引结构</a></h2><ul><li>B+Tree为主</li><li>hash</li><li>full-text </li><li>R-Tree</li></ul><h2 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h2><h3 id="哪些情况需要建立索引"><a href="#哪些情况需要建立索引" class="headerlink" title="哪些情况需要建立索引"></a>哪些情况需要建立索引</h3><ul><li>1.主键自动建立索引</li><li>2.频繁作为查询条件的字段</li><li>3.查询与其他表关联的字段，外键关系建立索引</li><li>4.用组合索引</li><li>5.排序字段如果通过索引取访问将大大提高排序速度</li><li>6.查询中统计或分组字段</li></ul><h3 id="哪些情况不需要建立索引"><a href="#哪些情况不需要建立索引" class="headerlink" title="哪些情况不需要建立索引"></a>哪些情况不需要建立索引</h3><ul><li>1.表记录太少</li><li>2.经常增删的表（提高了查询的速度，但同时降低了更新表的速度，如果对表进行insert、<br>update、delete，nysql不仅要保存更新的数据，还要保存一下更新的索引文件）</li><li>3.数据重复且分布平均的表字段，如果某个数据列重复很多，其实建立索引的效果不大。</li><li>4.频繁更新的字段不适合建立索引</li><li>5.where条件用不到的字段不创建索引</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;索引是什么？&quot;&gt;&lt;a href=&quot;#索引是什么？&quot; class=&quot;headerlink&quot; title=&quot;索引是什么？&quot;&gt;&lt;/a&gt;索引是什么？&lt;/h2&gt;&lt;p&gt;是帮助mysql高效获取数据的数据结构，可以得到索引的本质：索引是数据结构。（btree）&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="nosql" scheme="http://example.com/categories/nosql/"/>
    
    <category term="mysql高级篇" scheme="http://example.com/categories/nosql/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>支付功能（支付宝）</title>
    <link href="http://example.com/2021/06/13/django/%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2021/06/13/django/%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/</id>
    <published>2021-06-13T04:01:56.238Z</published>
    <updated>2021-06-13T04:09:39.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="购物车设计"><a href="#购物车设计" class="headerlink" title="购物车设计"></a>购物车设计</h2><ul><li>购物车 由于商品可以增加数量，这里用modelSerializer当购物车添加了某个商品第二次会报错，所以使用serializer继承即可， 一般购物车用cookie比较好<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">class ShoppingCart(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    购物车</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user &#x3D; models.ForeignKey(User, verbose_name&#x3D;u&quot;用户&quot;, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    goods &#x3D; models.ForeignKey(Goods, verbose_name&#x3D;u&quot;商品&quot;, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    nums &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;&quot;购买数量&quot;)</span><br><span class="line"></span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &#39;购物车&#39;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line">        unique_together &#x3D; (&quot;user&quot;, &quot;goods&quot;)</span><br><span class="line">class ShopCartDetailSerializer(serializers.ModelSerializer):</span><br><span class="line">    # 一个shopcart的记录只对应一个goods</span><br><span class="line">    goods &#x3D; GoodsSerializer(many&#x3D;False)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; ShoppingCart</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShoppingCartSerializer(serializers.Serializer):</span><br><span class="line">    # Serializer灵活性最高</span><br><span class="line">    user &#x3D; serializers.HiddenField(</span><br><span class="line">        default&#x3D;serializers.CurrentUserDefault()</span><br><span class="line">    )</span><br><span class="line">    add_time &#x3D; serializers.DateTimeField(read_only&#x3D;True, format&#x3D;&#39;%Y-%m-%d %H:%M&#39;)</span><br><span class="line">    nums &#x3D; serializers.IntegerField(required&#x3D;True, label&#x3D;&quot;数量&quot;, min_value&#x3D;1, error_messages&#x3D;&#123;</span><br><span class="line">        &quot;min_value&quot;: &quot;商品数量不能小于1&quot;,</span><br><span class="line">        &quot;required&quot;: &quot;请选择购买数量&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    # 请查看官网goods外键如何验证</span><br><span class="line">    goods &#x3D; serializers.PrimaryKeyRelatedField(required&#x3D;True, queryset&#x3D;Goods.objects.all())</span><br><span class="line"></span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        # 在serializer里面request是放在self.context里面</span><br><span class="line">        # 获取当前用户</span><br><span class="line">        user &#x3D; self.context[&#39;request&#39;].user</span><br><span class="line">        # 获取nums</span><br><span class="line">        nums &#x3D; validated_data[&#39;nums&#39;]</span><br><span class="line">        # 是一个goods的对象</span><br><span class="line">        goods &#x3D; validated_data[&#39;goods&#39;]</span><br><span class="line">        existed &#x3D; ShoppingCart.objects.filter(user&#x3D;user, goods&#x3D;goods)</span><br><span class="line">        if existed:</span><br><span class="line">            existed &#x3D; existed[0]</span><br><span class="line">            existed.nums +&#x3D; nums</span><br><span class="line">            existed.save()</span><br><span class="line">        else:</span><br><span class="line">            existed &#x3D; ShoppingCart.objects.create(**validated_data)</span><br><span class="line">        return existed</span><br><span class="line"></span><br><span class="line">    def update(self, instance, validated_data):</span><br><span class="line">        # 修改商品数量</span><br><span class="line">        instance.nums &#x3D; validated_data[&quot;nums&quot;]</span><br><span class="line">        instance.save()</span><br><span class="line">        return instance</span><br><span class="line"></span><br><span class="line">class ShoppingCartViewset(viewsets.ModelViewSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    购物车功能</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    permission_classes &#x3D; (IsAuthenticated, IsOwnerOrReadOnly)</span><br><span class="line">    # serializer_class &#x3D; ShoppingCartSerializer</span><br><span class="line">    authentication_classes &#x3D; (JSONWebTokenAuthentication, SessionAuthentication)</span><br><span class="line">    lookup_field &#x3D; &quot;goods_id&quot;</span><br><span class="line"></span><br><span class="line">    # 这里还是需要重载create才行</span><br><span class="line">    def perform_create(self, serializer):</span><br><span class="line">        goods &#x3D; serializer.instance.goods</span><br><span class="line">        tmp &#x3D; goods.goods_num</span><br><span class="line">        if tmp - serializer.instance.nums &lt; 0:</span><br><span class="line">            return Response(</span><br><span class="line">                status&#x3D;status.HTTP_400_BAD_REQUEST,</span><br><span class="line">                data&#x3D;&quot;库存数不足&quot;</span><br><span class="line">            )</span><br><span class="line">        goods.goods_num -&#x3D; serializer.instance.nums</span><br><span class="line">        goods.save()</span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    def perform_destroy(self, instance):</span><br><span class="line">        goods &#x3D; instance.goods</span><br><span class="line">        goods.goods_num +&#x3D; instance.nums</span><br><span class="line">        goods.save()</span><br><span class="line">        instance.delete()</span><br><span class="line"></span><br><span class="line">    # 这里还是需要重载update</span><br><span class="line">    def perform_update(self, serializer):</span><br><span class="line">        existed_record &#x3D; ShoppingCart.objects.get(id&#x3D;serializer.instance.id)</span><br><span class="line"></span><br><span class="line">        saved_record &#x3D; serializer.instance</span><br><span class="line">        nums &#x3D; serializer.initial_data[&#39;nums&#39;] - existed_record.nums</span><br><span class="line">        goods &#x3D; saved_record.goods</span><br><span class="line">        tmp &#x3D; goods.goods_num</span><br><span class="line">        if tmp - nums &lt; 0:</span><br><span class="line">            # 这里return到上一层是无效的</span><br><span class="line">            return Response(</span><br><span class="line">                status&#x3D;status.HTTP_400_BAD_REQUEST,</span><br><span class="line">                data&#x3D;&quot;库存数不足&quot;</span><br><span class="line">            )</span><br><span class="line">        goods.goods_num -&#x3D; nums</span><br><span class="line">        goods.save()</span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    def get_serializer_class(self):</span><br><span class="line">        if self.action &#x3D;&#x3D; &#39;list&#39;:</span><br><span class="line">            return ShopCartDetailSerializer</span><br><span class="line">        else:</span><br><span class="line">            return ShoppingCartSerializer</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        return ShoppingCart.objects.filter(user&#x3D;self.request.user)</span><br></pre></td></tr></table></figure></li><li>注意电商一般是在提交订单后才减少库存，这里我们是加入购物车即减少库存</li></ul><h2 id="订单设计"><a href="#订单设计" class="headerlink" title="订单设计"></a>订单设计</h2><ul><li>models.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class OrderInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    订单</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    ORDER_STATUS &#x3D; (</span><br><span class="line">        (&quot;TRADE_SUCCESS&quot;, &quot;成功&quot;),</span><br><span class="line">        (&quot;TRADE_CLOSED&quot;, &quot;超时关闭&quot;),</span><br><span class="line">        (&quot;WAIT_BUYER_PAY&quot;, &quot;交易创建&quot;),</span><br><span class="line">        (&quot;TRADE_FINISHED&quot;, &quot;交易结束&quot;),</span><br><span class="line">        (&quot;paying&quot;, &quot;待支付&quot;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user &#x3D; models.ForeignKey(User, verbose_name&#x3D;&quot;用户&quot;, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    order_sn &#x3D; models.CharField(max_length&#x3D;30, null&#x3D;True, blank&#x3D;True, unique&#x3D;True, verbose_name&#x3D;&quot;订单号&quot;)</span><br><span class="line">    # 第三方支付需要用的 生成一个订单号返回给我们 我们需要将它和本系统的订单做一个关联</span><br><span class="line">    trade_no &#x3D; models.CharField(max_length&#x3D;100, unique&#x3D;True, null&#x3D;True, blank&#x3D;True, verbose_name&#x3D;u&quot;交易号&quot;)</span><br><span class="line">    pay_status &#x3D; models.CharField(choices&#x3D;ORDER_STATUS, default&#x3D;&quot;paying&quot;, max_length&#x3D;30, verbose_name&#x3D;&quot;订单状态&quot;)</span><br><span class="line">    post_script &#x3D; models.CharField(max_length&#x3D;200, verbose_name&#x3D;&quot;订单留言&quot;)</span><br><span class="line">    order_mount &#x3D; models.FloatField(default&#x3D;0.0, verbose_name&#x3D;&quot;订单金额&quot;)</span><br><span class="line">    pay_time &#x3D; models.DateTimeField(null&#x3D;True, blank&#x3D;True, verbose_name&#x3D;&quot;支付时间&quot;)</span><br><span class="line"></span><br><span class="line">    # 用户信息</span><br><span class="line">    address &#x3D; models.CharField(max_length&#x3D;100, default&#x3D;&quot;&quot;, verbose_name&#x3D;&quot;收货地址&quot;)</span><br><span class="line">    signer_name &#x3D; models.CharField(max_length&#x3D;20, default&#x3D;&quot;&quot;, verbose_name&#x3D;&quot;签收人&quot;)</span><br><span class="line">    singer_mobile &#x3D; models.CharField(max_length&#x3D;11, verbose_name&#x3D;&quot;联系电话&quot;)</span><br><span class="line"></span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;订单&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.order_sn)</span><br></pre></td></tr></table></figure></li><li>serializer<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from utils.alipay import AliPay</span><br><span class="line">from MxShop.settings import private_key_path, ali_pub_key_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class OrderSerializer(serializers.ModelSerializer):</span><br><span class="line">    user &#x3D; serializers.HiddenField(</span><br><span class="line">        default&#x3D;serializers.CurrentUserDefault()</span><br><span class="line">    )</span><br><span class="line">    add_time &#x3D; serializers.DateTimeField(read_only&#x3D;True, format&#x3D;&#39;%Y-%m-%d %H:%M&#39;)</span><br><span class="line">    pay_status &#x3D; serializers.CharField(read_only&#x3D;True)</span><br><span class="line">    trade_no &#x3D; serializers.CharField(read_only&#x3D;True)</span><br><span class="line">    order_sn &#x3D; serializers.CharField(read_only&#x3D;True)</span><br><span class="line">    pay_time &#x3D; serializers.DateTimeField(read_only&#x3D;True)</span><br><span class="line">    # alipay_url &#x3D; serializers.SerializerMethodField(read_only&#x3D;True)</span><br><span class="line"></span><br><span class="line">    # def get_alipay_url(self, obj):</span><br><span class="line">    #     alipay &#x3D; AliPay(</span><br><span class="line">    #         appid&#x3D;&quot;2021000118645600&quot;,</span><br><span class="line">    #         app_notify_url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;alipay&#x2F;return&#x2F;&quot;,</span><br><span class="line">    #         app_private_key_path&#x3D;private_key_path,</span><br><span class="line">    #         alipay_public_key_path&#x3D;ali_pub_key_path,  # 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span><br><span class="line">    #         debug&#x3D;True,  # 默认False,</span><br><span class="line">    #         return_url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;alipay&#x2F;return&#x2F;&quot;</span><br><span class="line">    #     )</span><br><span class="line">    #     url &#x3D; alipay.direct_pay(</span><br><span class="line">    #         subject&#x3D;obj.order_sn,</span><br><span class="line">    #         out_trade_no&#x3D;obj.order_sn,</span><br><span class="line">    #         total_amount&#x3D;obj.order_mount,</span><br><span class="line">    #     )</span><br><span class="line">    #     re_url &#x3D; &quot;https:&#x2F;&#x2F;openapi.alipaydev.com&#x2F;gateway.do?&#123;data&#125;&quot;.format(data&#x3D;url)</span><br><span class="line">    #     return re_url</span><br><span class="line"></span><br><span class="line">    def generate_order_sn(self):</span><br><span class="line">        &quot;&quot;&quot;当前时间 + userid + 随机数&quot;&quot;&quot;</span><br><span class="line">        import time</span><br><span class="line">        from random import Random</span><br><span class="line">        random_ins &#x3D; Random()</span><br><span class="line">        order_sn &#x3D; &quot;&#123;time_str&#125;&#123;userid&#125;&#123;randstr&#125;&quot;.format(time_str&#x3D;time.strftime(&quot;%Y%m%d%H%M%S&quot;),</span><br><span class="line">                    userid&#x3D;self.context[&#39;request&#39;].user.id, randstr&#x3D;random_ins.randint(10, 99))</span><br><span class="line">        return order_sn</span><br><span class="line"></span><br><span class="line">    def validate(self, attrs):</span><br><span class="line">        attrs[&quot;order_sn&quot;] &#x3D; self.generate_order_sn()</span><br><span class="line">        return attrs</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; OrderInfo</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br></pre></td></tr></table></figure>views.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class OrderViewset(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.CreateModelMixin,</span><br><span class="line">                   mixins.RetrieveModelMixin, mixins.DestroyModelMixin):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    订单管理</span><br><span class="line">    list:</span><br><span class="line">        获取个人订单</span><br><span class="line">    delete:</span><br><span class="line">        删除订单</span><br><span class="line">    create:</span><br><span class="line">        新增订单</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    permission_classes &#x3D; (IsAuthenticated, IsOwnerOrReadOnly)</span><br><span class="line">    # serializer_class &#x3D; OrderSerializer</span><br><span class="line">    authentication_classes &#x3D; (JSONWebTokenAuthentication, SessionAuthentication)</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        return OrderInfo.objects.filter(user&#x3D;self.request.user)</span><br><span class="line"></span><br><span class="line">    def get_serializer_class(self):</span><br><span class="line">        if self.action &#x3D;&#x3D; &#39;retrieve&#39;:</span><br><span class="line">            return OrderDetailSerializer</span><br><span class="line">        else:</span><br><span class="line">            return OrderSerializer</span><br><span class="line"></span><br><span class="line">    def perform_create(self, serializer):</span><br><span class="line">        order &#x3D; serializer.save()</span><br><span class="line">        # 获取当前所有购物车的商品</span><br><span class="line">        shop_carts &#x3D; ShoppingCart.objects.filter(user&#x3D;self.request.user)</span><br><span class="line">        # 把购物车商品转为订单商品</span><br><span class="line">        for shop_cart in shop_carts:</span><br><span class="line">            order_goods &#x3D; OrderGoods()</span><br><span class="line">            order_goods.goods &#x3D; shop_cart.goods</span><br><span class="line">            order_goods.goods_num &#x3D; shop_cart.nums</span><br><span class="line">            order_goods.order &#x3D; order</span><br><span class="line">            order_goods.save()</span><br><span class="line">            # 从购物车中delete掉</span><br><span class="line">            shop_cart.delete()</span><br><span class="line">        return order</span><br></pre></td></tr></table></figure></li></ul><h2 id="支付宝沙箱使用（微信同）"><a href="#支付宝沙箱使用（微信同）" class="headerlink" title="支付宝沙箱使用（微信同）"></a>支付宝沙箱使用（微信同）</h2><ul><li>下载支付宝生成秘钥的工具（<a href="https://openhome.alipay.com/platform/developerIndex.htm">网址</a>)保存公钥、私钥、支付宝公钥（在项目中创建一个key文件夹保存）</li><li>按照官方文档要求定义alipay类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">from Crypto.Signature import PKCS1_v1_5</span><br><span class="line">from Crypto.Hash import SHA256</span><br><span class="line">from base64 import b64encode, b64decode</span><br><span class="line">from urllib.parse import quote_plus</span><br><span class="line">from urllib.parse import urlparse, parse_qs</span><br><span class="line">from urllib.request import urlopen</span><br><span class="line">from base64 import decodebytes, encodebytes</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AliPay:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    支付宝支付接口</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, appid, app_notify_url, app_private_key_path,</span><br><span class="line">                 alipay_public_key_path, return_url, debug&#x3D;False):</span><br><span class="line">        self.appid &#x3D; appid</span><br><span class="line">        self.app_notify_url &#x3D; app_notify_url</span><br><span class="line">        self.app_private_key_path &#x3D; app_private_key_path</span><br><span class="line">        self.app_private_key &#x3D; None</span><br><span class="line">        self.return_url &#x3D; return_url</span><br><span class="line">        with open(self.app_private_key_path) as fp:</span><br><span class="line">            self.app_private_key &#x3D; RSA.importKey(fp.read())</span><br><span class="line"></span><br><span class="line">        self.alipay_public_key_path &#x3D; alipay_public_key_path</span><br><span class="line">        with open(self.alipay_public_key_path) as fp:</span><br><span class="line">            self.alipay_public_key &#x3D; RSA.import_key(fp.read())</span><br><span class="line"></span><br><span class="line">        if debug is True:</span><br><span class="line">            self.__gateway &#x3D; &quot;https:&#x2F;&#x2F;openapi.alipaydev.com&#x2F;gateway.do&quot;</span><br><span class="line">        else:</span><br><span class="line">            self.__gateway &#x3D; &quot;https:&#x2F;&#x2F;openapi.alipay.com&#x2F;gateway.do&quot;</span><br><span class="line"></span><br><span class="line">    def direct_pay(self, subject, out_trade_no, total_amount, return_url&#x3D;None, **kwargs):</span><br><span class="line">        biz_content &#x3D; &#123;</span><br><span class="line">            &quot;subject&quot;: subject,</span><br><span class="line">            &quot;out_trade_no&quot;: out_trade_no,</span><br><span class="line">            &quot;total_amount&quot;: total_amount,</span><br><span class="line">            &quot;product_code&quot;: &quot;FAST_INSTANT_TRADE_PAY&quot;,</span><br><span class="line">            # &quot;qr_pay_mode&quot;:4</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        biz_content.update(kwargs)</span><br><span class="line">        data &#x3D; self.build_body(&quot;alipay.trade.page.pay&quot;, biz_content, self.return_url)</span><br><span class="line">        return self.sign_data(data)</span><br><span class="line"></span><br><span class="line">    def build_body(self, method, biz_content, return_url&#x3D;None):</span><br><span class="line">        data &#x3D; &#123;</span><br><span class="line">            &quot;app_id&quot;: self.appid,</span><br><span class="line">            &quot;method&quot;: method,</span><br><span class="line">            &quot;charset&quot;: &quot;utf-8&quot;,</span><br><span class="line">            &quot;sign_type&quot;: &quot;RSA2&quot;,</span><br><span class="line">            &quot;timestamp&quot;: datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;),</span><br><span class="line">            &quot;version&quot;: &quot;1.0&quot;,</span><br><span class="line">            &quot;biz_content&quot;: biz_content</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if return_url is not None:</span><br><span class="line">            data[&quot;notify_url&quot;] &#x3D; self.app_notify_url</span><br><span class="line">            data[&quot;return_url&quot;] &#x3D; self.return_url</span><br><span class="line"></span><br><span class="line">        return data</span><br><span class="line"></span><br><span class="line">    def sign_data(self, data):</span><br><span class="line">        data.pop(&quot;sign&quot;, None)</span><br><span class="line">        # 排序后的字符串</span><br><span class="line">        unsigned_items &#x3D; self.ordered_data(data)</span><br><span class="line">        unsigned_string &#x3D; &quot;&amp;&quot;.join(&quot;&#123;0&#125;&#x3D;&#123;1&#125;&quot;.format(k, v) for k, v in unsigned_items)</span><br><span class="line">        sign &#x3D; self.sign(unsigned_string.encode(&quot;utf-8&quot;))</span><br><span class="line">        ordered_items &#x3D; self.ordered_data(data)</span><br><span class="line">        quoted_string &#x3D; &quot;&amp;&quot;.join(&quot;&#123;0&#125;&#x3D;&#123;1&#125;&quot;.format(k, quote_plus(v)) for k, v in ordered_items)</span><br><span class="line"></span><br><span class="line">        # 获得最终的订单信息字符串</span><br><span class="line">        signed_string &#x3D; quoted_string + &quot;&amp;sign&#x3D;&quot; + quote_plus(sign)</span><br><span class="line">        return signed_string</span><br><span class="line"></span><br><span class="line">    def ordered_data(self, data):</span><br><span class="line">        complex_keys &#x3D; []</span><br><span class="line">        for key, value in data.items():</span><br><span class="line">            if isinstance(value, dict):</span><br><span class="line">                complex_keys.append(key)</span><br><span class="line"></span><br><span class="line">        # 将字典类型的数据dump出来</span><br><span class="line">        for key in complex_keys:</span><br><span class="line">            data[key] &#x3D; json.dumps(data[key], separators&#x3D;(&#39;,&#39;, &#39;:&#39;))</span><br><span class="line"></span><br><span class="line">        return sorted([(k, v) for k, v in data.items()])</span><br><span class="line"></span><br><span class="line">    def sign(self, unsigned_string):</span><br><span class="line">        # 开始计算签名</span><br><span class="line">        key &#x3D; self.app_private_key</span><br><span class="line">        signer &#x3D; PKCS1_v1_5.new(key)</span><br><span class="line">        signature &#x3D; signer.sign(SHA256.new(unsigned_string))</span><br><span class="line">        # base64 编码，转换为unicode表示并移除回车</span><br><span class="line">        sign &#x3D; encodebytes(signature).decode(&quot;utf8&quot;).replace(&quot;\n&quot;, &quot;&quot;)</span><br><span class="line">        return sign</span><br><span class="line"></span><br><span class="line">    def _verify(self, raw_content, signature):</span><br><span class="line">        # 开始计算签名</span><br><span class="line">        key &#x3D; self.alipay_public_key</span><br><span class="line">        signer &#x3D; PKCS1_v1_5.new(key)</span><br><span class="line">        digest &#x3D; SHA256.new()</span><br><span class="line">        digest.update(raw_content.encode(&quot;utf8&quot;))</span><br><span class="line">        if signer.verify(digest, decodebytes(signature.encode(&quot;utf8&quot;))):</span><br><span class="line">            return True</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">    def verify(self, data, signature):</span><br><span class="line">        if &quot;sign_type&quot; in data:</span><br><span class="line">            sign_type &#x3D; data.pop(&quot;sign_type&quot;)</span><br><span class="line">        # 排序后的字符串</span><br><span class="line">        unsigned_items &#x3D; self.ordered_data(data)</span><br><span class="line">        message &#x3D; &quot;&amp;&quot;.join(u&quot;&#123;&#125;&#x3D;&#123;&#125;&quot;.format(k, v) for k, v in unsigned_items)</span><br><span class="line">        return self._verify(message, signature)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    alipay &#x3D; AliPay(</span><br><span class="line">        appid&#x3D;&quot;2021000118645600&quot;,</span><br><span class="line">        app_notify_url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;alipay&#x2F;return&#x2F;&quot;,</span><br><span class="line">        app_private_key_path&#x3D;&quot;..&#x2F;trade&#x2F;keys&#x2F;private_2048.txt&quot;,</span><br><span class="line">        alipay_public_key_path&#x3D;&quot;..&#x2F;trade&#x2F;keys&#x2F;public_2048.txt&quot;,  # 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span><br><span class="line">        debug&#x3D;True,  # 默认False,</span><br><span class="line">        return_url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;alipay&#x2F;return&#x2F;&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # o &#x3D; urlparse(return_url)</span><br><span class="line">    # query &#x3D; parse_qs(o.query)</span><br><span class="line">    # processed_query &#x3D; &#123;&#125;</span><br><span class="line">    # ali_sign &#x3D; query.pop(&quot;sign&quot;)[0]</span><br><span class="line">    # for key, value in query.items():</span><br><span class="line">    #     processed_query[key] &#x3D; value[0]</span><br><span class="line">    # print(alipay.verify(processed_query, ali_sign))</span><br><span class="line"></span><br><span class="line">    url &#x3D; alipay.direct_pay(</span><br><span class="line">        subject&#x3D;&quot;测试订单2&quot;,</span><br><span class="line">        out_trade_no&#x3D;&quot;202105141018371481&quot;,</span><br><span class="line">        total_amount&#x3D;100,</span><br><span class="line">        return_url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;alipay&#x2F;return&#x2F;&quot;,</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">    re_url &#x3D; &quot;https:&#x2F;&#x2F;openapi.alipaydev.com&#x2F;gateway.do?&#123;data&#125;&quot;.format(data&#x3D;url)</span><br><span class="line">    print(re_url)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;购物车设计&quot;&gt;&lt;a href=&quot;#购物车设计&quot; class=&quot;headerlink&quot; title=&quot;购物车设计&quot;&gt;&lt;/a&gt;购物车设计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;购物车 由于商品可以增加数量，这里用modelSerializer当购物车添加了某个商品第二次会报错，所</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>drf文档</title>
    <link href="http://example.com/2021/06/13/django/drf%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2021/06/13/django/drf%E6%96%87%E6%A1%A3/</id>
    <published>2021-06-13T03:59:16.697Z</published>
    <updated>2021-06-13T04:04:59.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># pip install django-rest-swagger</span><br><span class="line"># pip install coreapi</span><br><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">...</span><br><span class="line">&#39;rest_framework_swagger&#39;</span><br><span class="line">]</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    # api接口文档配置</span><br><span class="line">    &#39;DEFAULT_SCHEMA_CLASS&#39;: &#39;rest_framework.schemas.coreapi.AutoSchema&#39;</span><br><span class="line">&#125;</span><br><span class="line">from rest_framework_swagger.views import get_swagger_view</span><br><span class="line">schema_view &#x3D; get_swagger_view(title&#x3D;&#39;API 接口文档&#39;)</span><br><span class="line"></span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    path(&#39;docs1&#x2F;&#39;, schema_view, name&#x3D;&#39;docs1&#39;),  # 线上环境，干掉</span><br><span class="line">]</span><br><span class="line"># 修改下源码即可</span><br></pre></td></tr></table></figure><h2 id="自带api文档"><a href="#自带api文档" class="headerlink" title="自带api文档"></a>自带api文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># pip install coreapi</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    # api接口文档配置</span><br><span class="line">    &#39;DEFAULT_SCHEMA_CLASS&#39;: &#39;rest_framework.schemas.coreapi.AutoSchema&#39;</span><br><span class="line">&#125;</span><br><span class="line">from rest_framework.documentation import include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(r&#39;docs&#x2F;&#39;, include_docs_urls(title&#x3D;&#39;STAR PAAS&#39;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;swagger&quot;&gt;&lt;a href=&quot;#swagger&quot; class=&quot;headerlink&quot; title=&quot;swagger&quot;&gt;&lt;/a&gt;swagger&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>第三方登录</title>
    <link href="http://example.com/2021/06/12/django/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>http://example.com/2021/06/12/django/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</id>
    <published>2021-06-12T03:02:51.055Z</published>
    <updated>2021-06-13T04:08:34.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li><p>进入qq互联查看文档</p></li><li><p>申请appid和appkey</p></li><li><p>保证服务器和graph.qq.com连通</p></li><li><p>选择qq显示图片（在login加一个图片a标签）</p></li><li><p>获取access token</p><ul><li><p>获取认证码（authentication code）<a href="https://graph.qq.com/oauth2.0/authorize%E9%9C%80%E8%A6%81appid%E3%80%81%E5%9B%9E%E8%B0%83%E9%93%BE%E6%8E%A5%E7%AD%89%E5%8F%82%E6%95%B0(appid%E3%80%81state%E3%80%81qq_redirect_url)%E5%86%99%E5%9C%A8settings%E9%85%8D%E7%BD%AE">https://graph.qq.com/oauth2.0/authorize需要appid、回调链接等参数(appid、state、qq_redirect_url)写在settings配置</a></p></li><li><p>定义一个回调的url，其中传入了code和state</p></li><li><p>在回调url中需要获取access token（需要参数grant_type固定、client_id、client_secret（比较重要可以放在环境变量）、qq_redirect_url）</p></li><li><p>用urlopen或者requests带参数去请求<a href="https://graph.qq.com/oauth2.0/token%E8%8E%B7%E5%BE%97access_token">https://graph.qq.com/oauth2.0/token获得access_token</a></p></li></ul></li><li><p>获取open_id</p><ul><li>urlopen(<a href="https://graph.qq.com.oauth.2.0/me?access_token=">https://graph.qq.com.oauth.2.0/me?access_token=</a>)</li></ul></li><li><p>判断openid和我们的用户是否有关联</p><ul><li>数据库创建一个对应关系表，user、openid、oauth_type(choices)</li></ul></li><li><p>决策</p><ul><li>如果权限为本站用户权限，绑定已有本站账号，如果没有可以定制一键创建</li><li></li></ul></li><li><p>qq允许获取部分qq信息包括qqnickname和头像</p><ul><li><a href="https://graph.qq.com/user/get_user_info">https://graph.qq.com/user/get_user_info</a>?</li><li>access_token、oauth_consumer_key(qqAPP)、openid</li><li>可以把获取参数放在session中或者通过传参（一键创建默认可以用qq昵称创建账户）</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进入qq互联查看文档&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;申请appid和appkey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>限速缓存</title>
    <link href="http://example.com/2021/06/12/django/drf%E9%99%90%E9%80%9F%E7%BC%93%E5%AD%98/"/>
    <id>http://example.com/2021/06/12/django/drf%E9%99%90%E9%80%9F%E7%BC%93%E5%AD%98/</id>
    <published>2021-06-12T03:02:13.423Z</published>
    <updated>2021-06-13T04:07:01.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django缓存配置"><a href="#django缓存配置" class="headerlink" title="django缓存配置"></a>django缓存配置</h2><ul><li>首先在setting中配置CACHES，默认的是使用django本机内存作为网站<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39;django.core.cache.backends.db.DatabaseCache&#39;</span><br><span class="line">&#39;django.core.cache.backends.dummy.DummyCache&#39;</span><br><span class="line">&#39;django.core.cache.backends.filebased.FileBasedCache&#39;</span><br><span class="line">&#39;django.core.cache.backends.locmem.LocMemCache&#39;</span><br><span class="line">&#39;django.core.cache.backends.memcached.MemcachedCache&#39;</span><br><span class="line">&#39;django.core.cache.backends.memcached.PyLibMCCache&#39;</span><br><span class="line">&#39;django_redis.cache.RedisCache&#39; # 需下载django_redis</span><br></pre></td></tr></table></figure></li></ul><h3 id="redis缓存配置"><a href="#redis缓存配置" class="headerlink" title="redis缓存配置"></a>redis缓存配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># pip install django-redis</span><br><span class="line"># settings.py</span><br><span class="line">CACHES &#x3D; &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span><br><span class="line">        &quot;LOCATION&quot;: &quot;redis:&#x2F;&#x2F;ip:port&#x2F;1&quot;,</span><br><span class="line">        &quot;OPTIONS&quot;: &#123;</span><br><span class="line">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9全局配置调用"><a href="#9全局配置调用" class="headerlink" title="9全局配置调用"></a>9全局配置调用</h3><ul><li>即使用缓存中间件全局配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    &#39;django.middleware.cache.CacheMiddleware&#39;</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数视图缓存"><a href="#函数视图缓存" class="headerlink" title="函数视图缓存"></a>函数视图缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.views.decorators.cache import cache_page</span><br><span class="line"></span><br><span class="line">@cache_page(60 * 15, key_prefix&#x3D;&quot;site&quot;)</span><br><span class="line">def my_view(request):</span><br><span class="line"></span><br><span class="line">from django.views.decorators.cache import cache_page</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^foo&#x2F;([0-9]&#123;1,2&#125;)&#x2F;$&#39;, cache_page(60 * 15)(my_view)),</span><br><span class="line">    #也可以这样，如果你的视图是classbase的话：</span><br><span class="line">    url(r&#39;^$&#39;, cache_page(60 * 60 * 10, key_prefix&#x3D;&quot;blogindex&quot;)(views.IndexView.as_view()), name&#x3D;&#39;index&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="类视图缓存"><a href="#类视图缓存" class="headerlink" title="类视图缓存"></a>类视图缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">from django.views.decorators.cache import cache_page</span><br><span class="line">from django.views.generic import ListView</span><br><span class="line"></span><br><span class="line">@method_decorator(cache_page(60*60), name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class MyListView(ListView):</span><br></pre></td></tr></table></figure><h2 id="drf缓存"><a href="#drf缓存" class="headerlink" title="drf缓存"></a>drf缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip install drf-extensions</span><br><span class="line"></span><br><span class="line">views.py</span><br><span class="line">from rest_framework_extensions.cache.mixins import CacheResponseMixin</span><br><span class="line">class GoodsListViewSet(CacheResponseMixin, mixins.ListModelMixin, mixins.GoodsRetrieveModelMixin, viewsets.GenericViewSet):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># setting.py</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">        &#39;DEFAULT_CACHE_RESPONSE_TIMEOUT&#39;: 60*5,  # 缓存5秒</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单配置即可用</p><h3 id="drf缓存源码分析"><a href="#drf缓存源码分析" class="headerlink" title="drf缓存源码分析"></a>drf缓存源码分析</h3><ul><li><p>1.只对list和retrieve做了缓存处理配置沿用默认的配置和setting中restframework中的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class BaseCacheResponseMixin:</span><br><span class="line">    object_cache_key_func &#x3D; extensions_api_settings.DEFAULT_OBJECT_CACHE_KEY_FUNC</span><br><span class="line">    list_cache_key_func &#x3D; extensions_api_settings.DEFAULT_LIST_CACHE_KEY_FUNC</span><br><span class="line">    object_cache_timeout &#x3D; extensions_api_settings.DEFAULT_CACHE_RESPONSE_TIMEOUT</span><br><span class="line">    list_cache_timeout &#x3D; extensions_api_settings.DEFAULT_CACHE_RESPONSE_TIMEOUT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ListCacheResponseMixin(BaseCacheResponseMixin):</span><br><span class="line">    @cache_response(key_func&#x3D;&#39;list_cache_key_func&#39;, timeout&#x3D;&#39;list_cache_timeout&#39;)</span><br><span class="line">    def list(self, request, *args, **kwargs):</span><br><span class="line">        return super().list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RetrieveCacheResponseMixin(BaseCacheResponseMixin):</span><br><span class="line">    @cache_response(key_func&#x3D;&#39;object_cache_key_func&#39;, timeout&#x3D;&#39;object_cache_timeout&#39;)</span><br><span class="line">    def retrieve(self, request, *args, **kwargs):</span><br><span class="line">        return super().retrieve(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CacheResponseMixin(RetrieveCacheResponseMixin,</span><br><span class="line">                         ListCacheResponseMixin):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li><li><p>2.装饰器为一个cacheResponse对象，实例化时传入key_func用作生成key，和过期时间，当访问页面时，调用该对象的<strong>call</strong>()中的inner()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def __call__(self, func):</span><br><span class="line">    this &#x3D; self</span><br><span class="line"></span><br><span class="line">    @wraps(func, assigned&#x3D;WRAPPER_ASSIGNMENTS)</span><br><span class="line">    def inner(self, request, *args, **kwargs):</span><br><span class="line">        return this.process_cache_response(</span><br><span class="line">            view_instance&#x3D;self,</span><br><span class="line">            view_method&#x3D;func,</span><br><span class="line">            request&#x3D;request,</span><br><span class="line">            args&#x3D;args,</span><br><span class="line">            kwargs&#x3D;kwargs,</span><br><span class="line">        )</span><br><span class="line">    return inner</span><br></pre></td></tr></table></figure></li><li><p>3.通过默认的key_func计算出键和过期时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">key &#x3D; self.calculate_key(</span><br><span class="line">        view_instance&#x3D;view_instance,</span><br><span class="line">        view_method&#x3D;view_method,</span><br><span class="line">        request&#x3D;request,</span><br><span class="line">        args&#x3D;args,</span><br><span class="line">        kwargs&#x3D;kwargs</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">timeout &#x3D; self.calculate_timeout(view_instance&#x3D;view_instance)</span><br></pre></td></tr></table></figure></li><li><p>4.获取key，如果没有执行视图函数并且未报错（status不为400、500）则存入缓存，如果有直接生成response返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">response_triple &#x3D; self.cache.get(key)</span><br><span class="line">        if not response_triple:</span><br><span class="line">            # render response to create and cache the content byte string</span><br><span class="line">            response &#x3D; view_method(view_instance, request, *args, **kwargs)</span><br><span class="line">            response &#x3D; view_instance.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">            response.render()</span><br><span class="line"></span><br><span class="line">            if not response.status_code &gt;&#x3D; 400 or self.cache_errors:</span><br><span class="line">                response_triple &#x3D; (</span><br><span class="line">                    response.rendered_content,</span><br><span class="line">                    response.status_code,</span><br><span class="line">                    response._headers.copy()</span><br><span class="line">                )</span><br><span class="line">                self.cache.set(key, response_triple, timeout)</span><br><span class="line">        else:</span><br><span class="line">            # build smaller Django HttpResponse</span><br><span class="line">            content, status, headers &#x3D; response_triple</span><br><span class="line">            response &#x3D; HttpResponse(content&#x3D;content, status&#x3D;status)</span><br><span class="line">            for k, v in headers.values():</span><br><span class="line">                response[k] &#x3D; v</span><br><span class="line"></span><br><span class="line">        if not hasattr(response, &#39;_closable_objects&#39;):</span><br><span class="line">            response._closable_objects &#x3D; []</span><br><span class="line"></span><br><span class="line">        return response</span><br></pre></td></tr></table></figure></li></ul><h2 id="网页限速设定"><a href="#网页限速设定" class="headerlink" title="网页限速设定"></a>网页限速设定</h2><ul><li>避免恶意频繁访问导致的压力（爬虫、或者网页攻击）</li><li>原理<ul><li>利用缓存存储根据用户id或者ip存储一个人访问该网页在限定时间中的次数，每次访问时对比缓存是否超过，如果超过次数则需等待设定时间</li></ul></li><li>该功能为drf自带，如果普通django视图需要自己手写一个限速功能</li></ul><h3 id="全局限速配置"><a href="#全局限速配置" class="headerlink" title="全局限速配置"></a>全局限速配置</h3><ul><li>分为陌生用户和登录用户，可以限定次数每天访问多少次， 也可限定每分钟访问多少次，10/minute<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework.throttling.AnonRateThrottle&#39;,</span><br><span class="line">        &#39;rest_framework.throttling.UserRateThrottle&#39;</span><br><span class="line">    ),</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;anon&#39;: &#39;100&#x2F;day&#39;,</span><br><span class="line">        &#39;user&#39;: &#39;1000&#x2F;day&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="视图限速配置"><a href="#视图限速配置" class="headerlink" title="视图限速配置"></a>视图限速配置</h3><p>from rest_framework.throttling import UserRateThrottle, AnonRateThrottle</p><p>class GoodsListViewSet(CacheResponseMixin, mixins.ListModelMixin, mixins.GoodsRetrieveModelMixin, viewsets.GenericViewSet):<br>    “””the goods’s list, pagination, search, filter, ordering”””<br>    queryset = Goods.objects.all()  # 这里只是帮我们拼凑了sql脚本，并没有执行，只有在for循环的时候执行<br>    throttle_classes = (UserRateThrottle, AnonRateThrottle)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;django缓存配置&quot;&gt;&lt;a href=&quot;#django缓存配置&quot; class=&quot;headerlink&quot; title=&quot;django缓存配置&quot;&gt;&lt;/a&gt;django缓存配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先在setting中配置CACHES，默认的是使用django</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>restful规范</title>
    <link href="http://example.com/2021/06/12/django/restful%E8%A7%84%E8%8C%83/"/>
    <id>http://example.com/2021/06/12/django/restful%E8%A7%84%E8%8C%83/</id>
    <published>2021-06-12T03:01:36.895Z</published>
    <updated>2021-06-12T13:17:09.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些重要的restful规范"><a href="#一些重要的restful规范" class="headerlink" title="一些重要的restful规范"></a>一些重要的restful规范</h2><p><a href="https://www.jianshu.com/p/a88d07ad1493">restfulApi规范介绍</a></p><ul><li>restful规范是一种前后台分离开发的标准，是最佳的实践</li><li>url资源定位：GET POST PUT DELETE<ul><li>GET 获取资源</li><li>POST 创建资源</li><li>PUT 更新服务器上一个资源，需要提供整个资源</li><li>PATCH 更新服务器上的一个资源，只提供资源中改变的那部分</li><li>DELETE 删除资源</li><li>HEAD 获取请求头判断资源是否存在</li><li>OPTIONS 获取当前URL支持的方法</li></ul></li></ul><h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a><a href="https://www.runoob.com/http/http-status-codes.html">常见状态码</a></h2><ul><li>200 请求成功</li><li>300 重定向</li><li>400 资源不存在</li><li>500 内部服务器错误</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一些重要的restful规范&quot;&gt;&lt;a href=&quot;#一些重要的restful规范&quot; class=&quot;headerlink&quot; title=&quot;一些重要的restful规范&quot;&gt;&lt;/a&gt;一些重要的restful规范&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.j</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>登录认证</title>
    <link href="http://example.com/2021/06/12/django/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/"/>
    <id>http://example.com/2021/06/12/django/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/</id>
    <published>2021-06-12T03:01:19.750Z</published>
    <updated>2021-06-13T04:10:03.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>前后端分离的项目不需要做csrf认证，app和网站服务端已经跨站</li><li>drf有三种验证方式<ul><li>BasicAuthentication 通过账号密码进行基本认证，密码经过base64编码和sha256并加盐存入数据库</li><li>TokenAuthentication 通过cookie设置的相关代码键为token或设置值，</li><li>SessionAuthentication sessionId存在cookie，通过sessionId获取存在缓存或数据库的session值再通过相应算法解析出用户</li></ul></li></ul><h2 id="DRFToken"><a href="#DRFToken" class="headerlink" title="DRFToken"></a>DRFToken</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># settings</span><br><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    ...</span><br><span class="line">    &#39;rest_framework.authtoken&#39;  # 新添加 drf自带用户验证</span><br><span class="line">)</span><br><span class="line"># 注意需要makemigrations、migrate，即生成token表</span><br><span class="line"></span><br><span class="line"># urls</span><br><span class="line">from rest_framework.authtoken import views</span><br><span class="line">re_path(r&#39;^api-token-auth&#x2F;&#39;, views.obtain_auth_token),</span><br><span class="line"></span><br><span class="line"># settings</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">        ...</span><br><span class="line">        &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [</span><br><span class="line">            &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">            &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">            # 尽量不要全局配置 在需要使用token的view里面配置</span><br><span class="line">            &#39;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#39;,</span><br><span class="line">            # &#39;rest_framework.authentication.TokenAuthentication&#39;,</span><br><span class="line">        ],</span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当用户注册时我们调用接口为用户生成token并存入数据库，前端通过用户登录时调用obtain_auth_token的接口获取token放到header，后端再通过request.auth获取token进行验证。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def create(self, request, *args, **kwargs):</span><br><span class="line">    serializer &#x3D; self.get_serializer(data&#x3D;request.data)</span><br><span class="line">    serializer.is_valid(raise_exception&#x3D;True)</span><br><span class="line">    user &#x3D; self.perform_create(serializer)</span><br><span class="line">    # token和payload的生成</span><br><span class="line">    re_dict &#x3D; serializer.data</span><br><span class="line">    payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">    print(request.auth)</span><br><span class="line">    re_dict[&#39;token&#39;] &#x3D; jwt_encode_handler(payload)</span><br><span class="line">    re_dict[&#39;name&#39;] &#x3D; user.name if user.name else user.username</span><br><span class="line">    headers &#x3D; self.get_success_headers(serializer.data)</span><br><span class="line">    return Response(re_dict, status&#x3D;status.HTTP_201_CREATED, headers&#x3D;headers)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line">token &#x3D; Token.object.create(user&#x3D;...)</span><br><span class="line">print(token.key)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Token xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><ul><li>如果想使用不同的关键字如bearer即继承TokenAuthentication为子类设置keyword类变量</li><li>身份验证成功后，request.user为django user的实例，request.auth是一个rest_framework.authtoken.models.Token的实例</li><li>drf token缺陷<ul><li>保存在数据库中，分布式不友好</li><li>token未设置过期时间，用户可以一直使用，如果被盗很糟糕</li></ul></li><li>如果在rest_framework中配置token是全局性的，也可在单一view中配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.authentication import TokenAuthentication  # 导入token验证相关模块</span><br><span class="line"></span><br><span class="line">class GoodsListViewSet(mixins.ListModelMixin,viewsets.GenericViewSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list:</span><br><span class="line">        商品列表页数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    …</span><br><span class="line">    authentication_classes &#x3D; (TokenAuthentication,)  # 新增，部分页面token验证</span><br></pre></td></tr></table></figure><h2 id="6-2-JSON-WEB-TOKEN"><a href="#6-2-JSON-WEB-TOKEN" class="headerlink" title="6.2 JSON WEB TOKEN"></a>6.2 JSON WEB TOKEN</h2><h3 id="6-2-1-简介"><a href="#6-2-1-简介" class="headerlink" title="6.2.1 简介"></a>6.2.1 简介</h3></li><li>由于drf tokenauth有局限性所以还是用JWT验证用户登录的方式</li><li>JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。</li><li>两个特点：<ul><li>简洁Compact：可以通过url、post参数或者请求头中发送，因为数据量小，传输速度快</li><li>自包含（self-contained）：负载了用户所有需要的信息，避免多次查询数据库</li></ul></li></ul><h3 id="drf-JWT验证流程"><a href="#drf-JWT验证流程" class="headerlink" title="drf JWT验证流程"></a>drf JWT验证流程</h3><ul><li>在最底层的ApiView中，通过属性和函数搭配封装使得这种解耦设计得以方便实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    # The following policies may be set at either globally, or per-view.</span><br><span class="line">    renderer_classes &#x3D; api_settings.DEFAULT_RENDERER_CLASSES</span><br><span class="line">    parser_classes &#x3D; api_settings.DEFAULT_PARSER_CLASSES</span><br><span class="line">    authentication_classes &#x3D; api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br><span class="line">    throttle_classes &#x3D; api_settings.DEFAULT_THROTTLE_CLASSES</span><br><span class="line">    permission_classes &#x3D; api_settings.DEFAULT_PERMISSION_CLASSES</span><br><span class="line">    content_negotiation_class &#x3D; api_settings.DEFAULT_CONTENT_NEGOTIATION_CLASS</span><br><span class="line">    metadata_class &#x3D; api_settings.DEFAULT_METADATA_CLASS</span><br><span class="line">    versioning_class &#x3D; api_settings.DEFAULT_VERSIONING_CLASS</span><br><span class="line">    # Allow dependency injection of other settings to make testing easier.</span><br><span class="line">    settings &#x3D; api_settings</span><br><span class="line">    schema &#x3D; DefaultSchema()</span><br></pre></td></tr></table></figure></li><li>当调用到apiview的子类时，触发apiview的dispatch，这里先initialize_request把request变为restframework的request，然后执行initial把封装的一系列class全部执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &#96;.dispatch()&#96; is pretty much the same as Django&#39;s regular dispatch,</span><br><span class="line">        but with extra hooks for startup, finalize, and exception handling.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.args &#x3D; args</span><br><span class="line">        self.kwargs &#x3D; kwargs</span><br><span class="line">        request &#x3D; self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request &#x3D; request</span><br><span class="line">        self.headers &#x3D; self.default_response_headers  # deprecate?</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            # Get the appropriate handler method</span><br><span class="line">            if request.method.lower() in self.http_method_names:</span><br><span class="line">                handler &#x3D; getattr(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            else:</span><br><span class="line">                handler &#x3D; self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            response &#x3D; handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        except Exception as exc:</span><br><span class="line">            response &#x3D; self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        self.response &#x3D; self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        return self.response</span><br><span class="line">        </span><br><span class="line"># 转变request为restframework的reuqest </span><br><span class="line">def initialize_request(self, request, *args, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Returns the initial request object.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    parser_context &#x3D; self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">    return Request(</span><br><span class="line">        request,</span><br><span class="line">        parsers&#x3D;self.get_parsers(),</span><br><span class="line">        authenticators&#x3D;self.get_authenticators(),</span><br><span class="line">        negotiator&#x3D;self.get_content_negotiator(),</span><br><span class="line">        parser_context&#x3D;parser_context</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def initial(self, request, *args, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Runs anything that needs to occur prior to calling the method handler.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    self.format_kwarg &#x3D; self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">    # Perform content negotiation and store the accepted info on the request</span><br><span class="line">    neg &#x3D; self.perform_content_negotiation(request)</span><br><span class="line">    request.accepted_renderer, request.accepted_media_type &#x3D; neg</span><br><span class="line"></span><br><span class="line">    # Determine the API version, if versioning is in use.</span><br><span class="line">    version, scheme &#x3D; self.determine_version(request, *args, **kwargs)</span><br><span class="line">    request.version, request.versioning_scheme &#x3D; version, scheme</span><br><span class="line"></span><br><span class="line">    # Ensure that the incoming request is permitted</span><br><span class="line">    self.perform_authentication(request)</span><br><span class="line">    self.check_permissions(request)</span><br><span class="line">    self.check_throttles(request)</span><br></pre></td></tr></table></figure></li><li>之后调用restframework的request.user-&gt;_authenticate-&gt;authenticatior.authenticate-&gt;jsontoken.authenticatie</li><li>所以其实这种方式在普通view上亦可通过重写dispatch进行实现，也算是一种经典的工厂<a href="https://juejin.cn/post/6844903795017646094#heading-27">设计模式</a></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># pip install djangorestframework-jwt</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">        ...</span><br><span class="line">        &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [</span><br><span class="line">            &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">            &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">            # 尽量不要全局配置 在需要使用token的view里面配置</span><br><span class="line">            &#39;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#39;,</span><br><span class="line">        ],</span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">form rest_framework_jwt.views import obtain_jwt_token</span><br><span class="line">path(&#39;login&#x2F;&#39;, obtain_jwt_token)</span><br><span class="line"># JWT验证默认使用用户名+密码验证，如需自定义验证(jwt验证调用的是django自带的authenticate验证方法):这个验证是中间件的基本authentication</span><br><span class="line">settings.py</span><br><span class="line">AUTHENTICATION_BACKENDS &#x3D; (</span><br><span class="line">    &#39;users.views.CustomBackend&#39;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">import datetime</span><br><span class="line"># JWT设置</span><br><span class="line">JWT_AUTH &#x3D; &#123;</span><br><span class="line">    &#39;JWT_SECRET_KEY&#39;: SECRET_KEY,</span><br><span class="line">    # 一天后Token过期</span><br><span class="line">    &#39;JWT_EXPIRATION_DELTA&#39;: datetime.timedelta(days&#x3D;7),</span><br><span class="line">&#125;</span><br><span class="line">users.views.py</span><br><span class="line">from django.contrib.auth.backends import ModelBackend</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line">from django.db.models import Q</span><br><span class="line"></span><br><span class="line">User &#x3D; get_user_model() # 当前用户</span><br><span class="line">class CustomBackend(ModelBackend):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义用户验证</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def authenticate(self, request, username&#x3D;None, password&#x3D;None, **kwargs):</span><br><span class="line">        try:</span><br><span class="line">            user &#x3D; User.objects.get(Q(username&#x3D;username) | Q(mobile&#x3D;username))</span><br><span class="line">            if user.check_password(password):</span><br><span class="line">                return user</span><br><span class="line">        except Exception as e:</span><br><span class="line">            return None</span><br></pre></td></tr></table></figure><ul><li>可通过restframework_jwt.settings查看配置<h3 id="6-2-4-JWT详细介绍"><a href="#6-2-4-JWT详细介绍" class="headerlink" title="6.2.4 JWT详细介绍"></a>6.2.4 <a href="https://zhuanlan.zhihu.com/p/158186278">JWT详细介绍</a></h3></li><li>由三部分构成(以.分割）<ul><li>1.header头文件</li><li>2.payload信息主体</li><li>3.signature签名和盐<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxNiwidXNlcm5hbWUiOiJyb290IiwiZXhwIjoxNjIxMzI3MjAwLCJlbWFpbCI6IjUwNTEzMzExNUBxcS5jb20ifQ.se-Y8Dxs-VLBL2jzvHmat2lxcRx7Oz1MF40jFfrlPP</span><br></pre></td></tr></table></figure></li></ul></li><li>header<ul><li>包含{“alg”:”HS256”, “typ”:”JWT”}</li><li>被base64编码为第一部分</li></ul></li><li>payload（三个部分）<ul><li>注册声明 iss（JWT签发者）、exp过期时间、sub主题、audJWT接收者、iat（签发时间等）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">def jwt_payload_handler(user):</span><br><span class="line">    username_field &#x3D; get_username_field()</span><br><span class="line">    username &#x3D; get_username(user)</span><br><span class="line"></span><br><span class="line">    warnings.warn(</span><br><span class="line">        &#39;The following fields will be removed in the future: &#39;</span><br><span class="line">        &#39;&#96;email&#96; and &#96;user_id&#96;. &#39;,</span><br><span class="line">        DeprecationWarning</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    payload &#x3D; &#123;</span><br><span class="line">        &#39;user_id&#39;: user.pk,</span><br><span class="line">        &#39;username&#39;: username,</span><br><span class="line">        &#39;exp&#39;: datetime.utcnow() + api_settings.JWT_EXPIRATION_DELTA</span><br><span class="line">    &#125;</span><br><span class="line">    if hasattr(user, &#39;email&#39;):</span><br><span class="line">        payload[&#39;email&#39;] &#x3D; user.email</span><br><span class="line">    if isinstance(user.pk, uuid.UUID):</span><br><span class="line">        payload[&#39;user_id&#39;] &#x3D; str(user.pk)</span><br><span class="line"></span><br><span class="line">    payload[username_field] &#x3D; username</span><br><span class="line"></span><br><span class="line">    # Include original issued at time for a brand new token,</span><br><span class="line">    # to allow token refresh</span><br><span class="line">    if api_settings.JWT_ALLOW_REFRESH:</span><br><span class="line">        payload[&#39;orig_iat&#39;] &#x3D; timegm(</span><br><span class="line">            datetime.utcnow().utctimetuple()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    if api_settings.JWT_AUDIENCE is not None:</span><br><span class="line">        payload[&#39;aud&#39;] &#x3D; api_settings.JWT_AUDIENCE</span><br><span class="line"></span><br><span class="line">    if api_settings.JWT_ISSUER is not None:</span><br><span class="line">        payload[&#39;iss&#39;] &#x3D; api_settings.JWT_ISSUER</span><br><span class="line"></span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure></li><li>公开声明 可以添加任何信息，一般添加用户相关的信息或其他必要信息，不建议添加敏感信息</li><li>私有声明 base64对称加密相当于明文，不存敏感信息</li></ul></li><li>Signature<ul><li>Signature部分的生成需要base64编码之后的Header,base64编码之后的Payload,密钥（secret）,Header需要指定签字的算法。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">def encode(self,</span><br><span class="line">       payload,  # type: Union[Dict, bytes]</span><br><span class="line">       key,  # type: str</span><br><span class="line">       algorithm&#x3D;&#39;HS256&#39;,  # type: str</span><br><span class="line">       headers&#x3D;None,  # type: Optional[Dict]</span><br><span class="line">       json_encoder&#x3D;None  # type: Optional[Callable]</span><br><span class="line">       ):</span><br><span class="line">    segments &#x3D; []</span><br><span class="line"></span><br><span class="line">    if algorithm is None:</span><br><span class="line">        algorithm &#x3D; &#39;none&#39;</span><br><span class="line"></span><br><span class="line">    if algorithm not in self._valid_algs:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # Header</span><br><span class="line">    header &#x3D; &#123;&#39;typ&#39;: self.header_typ, &#39;alg&#39;: algorithm&#125;</span><br><span class="line"></span><br><span class="line">    if headers:</span><br><span class="line">        self._validate_headers(headers)</span><br><span class="line">        header.update(headers)</span><br><span class="line"></span><br><span class="line">    json_header &#x3D; force_bytes(</span><br><span class="line">        json.dumps(</span><br><span class="line">            header,</span><br><span class="line">            separators&#x3D;(&#39;,&#39;, &#39;:&#39;),</span><br><span class="line">            cls&#x3D;json_encoder</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    segments.append(base64url_encode(json_header))</span><br><span class="line">    segments.append(base64url_encode(payload))</span><br><span class="line"></span><br><span class="line">    # Segments</span><br><span class="line">    signing_input &#x3D; b&#39;.&#39;.join(segments)</span><br><span class="line">    try:</span><br><span class="line">        alg_obj &#x3D; self._algorithms[algorithm]</span><br><span class="line">        key &#x3D; alg_obj.prepare_key(key)</span><br><span class="line">        signature &#x3D; alg_obj.sign(signing_input, key)</span><br><span class="line"></span><br><span class="line">    except KeyError:</span><br><span class="line">        if not has_crypto and algorithm in requires_cryptography:</span><br><span class="line">            raise NotImplementedError(</span><br><span class="line">                &quot;Algorithm &#39;%s&#39; could not be found. Do you have cryptography &quot;</span><br><span class="line">                &quot;installed?&quot; % algorithm</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            raise NotImplementedError(&#39;Algorithm not supported&#39;)</span><br><span class="line"></span><br><span class="line">    segments.append(base64url_encode(signature))</span><br><span class="line"></span><br><span class="line">    return b&#39;.&#39;.join(segments)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="验证码发送-第三方（这里使用云片）"><a href="#验证码发送-第三方（这里使用云片）" class="headerlink" title="验证码发送 第三方（这里使用云片）"></a>验证码发送 第三方（这里使用云片）</h2><ul><li>1.进入服务网站设置模板签名</li><li>2.查看相应第三方短信商的api文档</li><li>3.写开发接口</li><li>4.设置代理和获取apikey</li><li>5.把服务器ip加入到云片白名单</li><li>6.可以使用redis存储<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># _*_ coding: utf-8 _*_</span><br><span class="line">__author__ &#x3D; &#39;春江花月夜oo&#39;</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class YunPian(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, api_key):</span><br><span class="line">        self.api_key &#x3D; api_key</span><br><span class="line">        self.single_send_url &#x3D; &quot;https:&#x2F;&#x2F;sms.yunpian.com&#x2F;v2&#x2F;sms&#x2F;single_send.json&quot;</span><br><span class="line"></span><br><span class="line">    def send_sms(self, code, mobile):</span><br><span class="line">        params &#x3D; &#123;</span><br><span class="line">            &quot;apikey&quot;: self.api_key,</span><br><span class="line">            &quot;mobile&quot;: mobile,</span><br><span class="line">            &quot;text&quot;: &quot;【春江花月夜】您的验证码是&#123;code&#125;。如非本人操作，请忽略本短信&quot;.format(code&#x3D;code)</span><br><span class="line">        &#125;</span><br><span class="line">        proxies &#x3D; &#123;</span><br><span class="line">            &quot;http&quot;: &quot;http:&#x2F;&#x2F;xxxx:xxxxx@ip:port&quot;,</span><br><span class="line">            &quot;https&quot;: &quot;https:&#x2F;&#x2F;xxxx:xxxxx@ip:port&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response &#x3D; requests.post(self.single_send_url, proxies&#x3D;proxies, data&#x3D;params)</span><br><span class="line">        re_dict &#x3D; json.loads(response.text)</span><br><span class="line">        print(re_dict)</span><br><span class="line">        return re_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    yun_pian &#x3D; YunPian(&quot;43553608181588f4d559a70abdada087&quot;)</span><br><span class="line">    yun_pian.send_sms(&quot;2020&quot;, &quot;18296163425&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="6-4-drf自定义权限校验"><a href="#6-4-drf自定义权限校验" class="headerlink" title="6.4 drf自定义权限校验"></a>6.4 drf自定义权限校验</h2><ul><li>权限和authentication流程基本一致，都是apiView中调用接口时，dispatch中进行处理</li><li>check_permissions和check_object_permissions，check_permissions是在所有接口中统一检查的，而dispatch是当有不安全请求方法时，在get_object()时检查（即增删改时查看此权限）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># 1.全局drf权限</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_PERMISSION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework.permissions.IsAuthenticated&#39;,</span><br><span class="line">    ),</span><br><span class="line">  #..............</span><br><span class="line">&#125;</span><br><span class="line"># 2.自定义权限（可以创建utils在其中建permissions.py进行统一管理）</span><br><span class="line">from rest_framework import permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># permission</span><br><span class="line"></span><br><span class="line"># 这里通过不同的场景实时传参进去构建permission_classes</span><br><span class="line">class StudentViewSet(viewsets.ModelViewSet):</span><br><span class="line">  queryset &#x3D; models.Student.objects.all()</span><br><span class="line">  # ...........</span><br><span class="line"></span><br><span class="line">    def get_permissions(self):</span><br><span class="line">      if self.action &#x3D;&#x3D; &#39;list&#39;:</span><br><span class="line">        # 如果是对根目录进行 GET 则需要列表权限</span><br><span class="line">            self.permission_classes &#x3D; (</span><br><span class="line">                perms.PermsRequired(&#39;student.list_student&#39;),</span><br><span class="line">            )</span><br><span class="line">        if self.action &#x3D;&#x3D; &#39;create&#39;:</span><br><span class="line">        # 如果对根目录进行 POST 则需要创建权限</span><br><span class="line">            self.permission_classes &#x3D; (</span><br><span class="line">                perms.PermsRequired(&#39;student.create_student&#39;),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        return super(StudentViewSet, self).get_permissions()</span><br><span class="line">        </span><br><span class="line">class PermsRequired(permissions.BasePermission):</span><br><span class="line">&quot;&quot;&quot;需要有多个权限之一，也就是说有其中一个权限即可&quot;&quot;&quot;</span><br><span class="line">  </span><br><span class="line">    def __init__(self, *perms):</span><br><span class="line">        self.perms &#x3D; perms# 接受多个参数，全部都是权限</span><br><span class="line"></span><br><span class="line">    def __call__(self):</span><br><span class="line">        return self  # 被 call（前期可以理解成被当成函数调用） 的时候返回自身</span><br><span class="line"></span><br><span class="line">    def has_permission(self, request, view):</span><br><span class="line">        user &#x3D; request.user# 既然传进来了 request，那就可以拿到 user 了</span><br><span class="line"></span><br><span class="line">        if user.is_superuser:# superuser 拥有一切权限</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        user_perms &#x3D; user.get_all_permissions() # 取得用户所拥有的的所有权限</span><br><span class="line">        </span><br><span class="line">        # 取本次需要的权限和用户所有的权限的交集，如果有交集则校验通过（也就是 “或” 校验</span><br><span class="line">        return True if user_perms &amp; set(self.perms) else False</span><br><span class="line">      </span><br><span class="line">      # 如果想要“与”校验，可以改成下面这种</span><br><span class="line">        # return all([perm in user_perms for perm in set(self.perms)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># object_permission</span><br><span class="line">class IsOwnerOrReadOnly(permissions.BasePermission):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    对象级权限仅允许对象的所有者对其进行编辑</span><br><span class="line">    假设模型实例具有&#96;owner&#96;属性。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        # 任何请求都允许读取权限，</span><br><span class="line">        # 所以我们总是允许GET，HEAD或OPTIONS 请求.</span><br><span class="line">        if request.method in permissions.SAFE_METHODS:</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        # 示例必须要有一个名为&#96;owner&#96;的属性</span><br><span class="line">        return obj.user &#x3D;&#x3D; request.user</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前后端分离的项目不需要做csrf认证，app和网站服务端已经跨站&lt;/li&gt;
&lt;li&gt;drf有三种验证方式&lt;ul&gt;
&lt;li&gt;Bas</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>serializers</title>
    <link href="http://example.com/2021/06/12/django/serializers/"/>
    <id>http://example.com/2021/06/12/django/serializers/</id>
    <published>2021-06-12T03:00:34.985Z</published>
    <updated>2021-06-12T13:17:25.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初步使用serializer"><a href="#初步使用serializer" class="headerlink" title="初步使用serializer"></a>初步使用serializer</h2><ul><li>使用serializers的好处<ul><li>1.图片路径返回时，普通的view需要手动添加补全路径，drf已封装</li><li>2.无论是django.core的serializer还是django.forms.models的model_to_dict都已经被serializer封装替代，使用比较方便</li><li>3.drf的自带文档功能，需要serializer和coreapi的支持</li><li>4.代替了form验证的功能</li></ul></li><li>serializer<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line">from .models import Goods</span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    name &#x3D; serializers.CharField(required&#x3D;True, max_length&#x3D;100)</span><br><span class="line">    click_num &#x3D; serializers.IntegerField(default&#x3D;0)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Goods</span><br><span class="line">        fields &#x3D; (&#39;name&#39;, &#39;click_num&#39;)</span><br></pre></td></tr></table></figure></li><li>views<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from .models import Goods</span><br><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from django.http import Http404</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework import status</span><br><span class="line"></span><br><span class="line">class GoodsListView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List goods</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request):</span><br><span class="line">        goods &#x3D; Goods.objects.all()[:10]</span><br><span class="line">        goods_serializer &#x3D; GoodsSerializer(goods, many&#x3D;True)</span><br><span class="line">        return Response(goods_serializer.data)</span><br></pre></td></tr></table></figure></li><li>urls<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 商品列表页面</span><br><span class="line">path(r&#39;goods&#x2F;&#39;, GoodsListView.as_view(), name&#x3D;&quot;goods-list&quot;),</span><br></pre></td></tr></table></figure></li></ul><h2 id="细枝末节"><a href="#细枝末节" class="headerlink" title="细枝末节"></a>细枝末节</h2><ul><li>1.保存数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 在serializer中重写create</span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    name &#x3D; serializers.CharField(required&#x3D;True, max_length&#x3D;100)</span><br><span class="line">    click_num &#x3D; serializers.IntegerField(default&#x3D;0)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Goods</span><br><span class="line">        fields &#x3D; (&#39;name&#39;, &#39;click_num&#39;)</span><br><span class="line"></span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Create and return a new &#96;Snippet&#96; instance, given the validated data.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return Goods.objects.create(**validated_data)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">class GoodsListView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List goods</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request):</span><br><span class="line">        goods &#x3D; Goods.objects.all()[:10]</span><br><span class="line">        goods_serializer &#x3D; GoodsSerializer(goods, many&#x3D;True)</span><br><span class="line">        return Response(goods_serializer.data)</span><br><span class="line"></span><br><span class="line">    def post(self, request):</span><br><span class="line">        serializer &#x3D; GoodsSerializer(data&#x3D;request.data)</span><br><span class="line">        if serializer.is_valid():</span><br><span class="line">            # save会去调用create</span><br><span class="line">            serializer.save()</span><br><span class="line">            # 保存成功返回201</span><br><span class="line">            return Response(serializer.data, status&#x3D;status.HTTP_201_CREATED)</span><br><span class="line">        return Response(serializer.errors, status&#x3D;status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure></li><li>2 fileds = “__all__”即可序列化全部字段</li><li>3.外键序列化需要嵌套外键自身的serializer<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class CategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; GoodsCategory</span><br><span class="line">        fields &#x3D; &#39;__all__&#39;</span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    # 嵌套序列化外键</span><br><span class="line">    category &#x3D; CategorySerializer()</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Goods</span><br><span class="line">        fields &#x3D; &#39;__all__&#39;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Serializer-Fields"><a href="#Serializer-Fields" class="headerlink" title="Serializer Fields"></a><a href="https://q1mi.github.io/Django-REST-framework-documentation/api-guide/fields_zh/">Serializer Fields</a></h3><ul><li>core<ul><li>read_only<ul><li>不在创建和更新的操作中，在序列化列表时</li></ul></li><li>write_only<ul><li>序列化时不使用这个字段，在创建和更新反序列化时使用</li></ul></li><li>required<ul><li>反序列化不需要此字段</li></ul></li><li>default</li><li>allow_null</li><li>source</li><li>error_message</li><li>label</li><li>help_text</li><li>initial</li><li>style</li></ul></li><li>各种字段请查看官方链接</li></ul><h2 id="最简单的view-genericapiview-viewSet"><a href="#最简单的view-genericapiview-viewSet" class="headerlink" title="最简单的view-genericapiview/viewSet"></a>最简单的view-genericapiview/viewSet</h2><ul><li>Apiview并不是最上流的view，还有更简单的view<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import mixins</span><br><span class="line">from rest_framework import generics</span><br><span class="line"></span><br><span class="line">class GoodsListView(mixins.ListModelMixin, generics.GenericAPIView):</span><br><span class="line">    queryset &#x3D; Goods.objects.all()[:10]</span><br><span class="line">    serializer_class &#x3D; GoodsSerializer</span><br><span class="line"></span><br><span class="line">    # list在listModelMixin中，帮助我们分页，调用序列化等</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></li><li>封装好的view<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class CreateAPIView(mixins.CreateModelMixin,</span><br><span class="line">                    GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for creating a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return self.create(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ListAPIView(mixins.ListModelMixin,</span><br><span class="line">                  GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for listing a queryset.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></li><li>viewSet<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import viewsets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):</span><br><span class="line">    queryset &#x3D; Goods.objects.all()</span><br><span class="line">    serializer_class &#x3D; GoodsSerializer</span><br><span class="line">    pagination_class &#x3D; GoodsPagination</span><br></pre></td></tr></table></figure></li><li>两种路由注册方式：<ul><li>1.正常注册<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListViewSet</span><br><span class="line">goods_list &#x3D; GoodsListViewSet.as_view(&#123;</span><br><span class="line">        &#39;get&#39;: &#39;list&#39;,</span><br><span class="line">        &#39;post&#39;: &#39;create&#39;</span><br><span class="line">&#125;)</span><br><span class="line">- path(r&#39;goods&#x2F;&#39;, goods_list, name&#x3D;&quot;goods-list&quot;),</span><br></pre></td></tr></table></figure></li><li>2.使用router<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.routers import DefaultRouter</span><br><span class="line"></span><br><span class="line">router &#x3D; DefaultRouter()</span><br><span class="line"># 配置goods的url(把注册的东西转换为url的配置）</span><br><span class="line">router.register(r&#39;goods&#39;, GoodsListViewSet)</span><br><span class="line">path(r&#39;&#39;, include(router.urls))</span><br><span class="line"># 它会自动把get转到list，post转到create等</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><ul><li>在setting里配置REST_FRAMEWORK<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">        &#39;DEFAULT_PAGINATION_CLASS&#39;: &#39;rest_framework.pagination.PageNumberPagination&#39;,</span><br><span class="line">        # Pagination</span><br><span class="line">        &#39;PAGE_SIZE&#39;: 10,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这里可以看出可以简单自定义继承PageNumberPagination的分页<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class ArticlePagination(PageNumberPagination):</span><br><span class="line">    page_size &#x3D; 4 # 表示每页的默认显示数量</span><br><span class="line">    page_size_query_param &#x3D; &#39;page_size&#39; # 表示url中每页数量参数</span><br><span class="line">    page_query_param &#x3D; &#39;p&#39; # 表示url中的页码参数</span><br><span class="line">    max_page_size &#x3D; 100  # 表示每页最大显示数量，做限制使用，避免突然大量的查询数据，数据库崩溃</span><br></pre></td></tr></table></figure></li><li>在view中指定pagination_class即可</li></ul><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><ul><li><p>1.通过sql进行简单过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):</span><br><span class="line"></span><br><span class="line">    serializer_class &#x3D; GoodsSerializer</span><br><span class="line">    pagination_class &#x3D; GoodsPagination</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        self.queryset &#x3D; Goods.objects.all()  # 这里只是帮我们拼凑了sql脚本，并没有执行，只有在for循环的时候执行</span><br><span class="line">        price_min &#x3D; self.request.query_params.get(&quot;price_min&quot;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            self.queryset &#x3D; self.queryset.filter(shop_price__gt&#x3D;int(price_min))</span><br><span class="line">        return self.queryset</span><br></pre></td></tr></table></figure></li><li><p>2.通过django-filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django_filters.rest_framework import DjangoFilterBackend</span><br><span class="line"></span><br><span class="line">class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):</span><br><span class="line">    queryset &#x3D; Goods.objects.all()  # 这里只是帮我们拼凑了sql脚本，并没有执行，只有在for循环的时候执行</span><br><span class="line">    serializer_class &#x3D; GoodsSerializer</span><br><span class="line">    pagination_class &#x3D; GoodsPagination</span><br><span class="line">    filter_backends &#x3D; (DjangoFilterBackend, )</span><br><span class="line">    filter_fields &#x3D; (&#39;name&#39;, &#39;shop_price&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>通过rest_framework的seachfilter进行过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from .filters import GoodsFilter</span><br><span class="line">from rest_framework import filters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):</span><br><span class="line">    queryset &#x3D; Goods.objects.all()  # 这里只是帮我们拼凑了sql脚本，并没有执行，只有在for循环的时候执行</span><br><span class="line">    serializer_class &#x3D; GoodsSerializer</span><br><span class="line">    pagination_class &#x3D; GoodsPagination</span><br><span class="line">    filter_backends &#x3D; (DjangoFilterBackend, filters.SearchFilter)</span><br></pre></td></tr></table></figure></li><li><p>排序过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_backends &#x3D; (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br></pre></td></tr></table></figure></li><li><p>通过django_filter.rest_framework.FielterSet自定义(新建filter文件夹)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from .models import Goods</span><br><span class="line">import django_filters</span><br><span class="line"></span><br><span class="line">class GoodsFilter(django_filters.rest_framework.FilterSet):</span><br><span class="line">    &quot;&quot;&quot;商品的过滤类&quot;&quot;&quot;</span><br><span class="line">    price_min &#x3D; django_filters.NumberFilter(field_name&#x3D;&quot;shop_price&quot;, lookup_expr&#x3D;&#39;gte&#39;)  # greater than or equal to</span><br><span class="line">    price_max &#x3D; django_filters.NumberFilter(field_name&#x3D;&quot;shop_price&quot;, lookup_expr&#x3D;&#39;lte&#39;)  # less than or equal to</span><br><span class="line">    name &#x3D; django_filters.CharFilter(field_name&#x3D;&#39;name&#39;, lookup_expr&#x3D;&#39;icontains&#39;)</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Goods</span><br><span class="line">        fields &#x3D; [&quot;name&quot;, &quot;price_min&quot;, &quot;price_max&quot;]</span><br><span class="line">        </span><br><span class="line">class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):</span><br><span class="line">    queryset &#x3D; Goods.objects.all()  # 这里只是帮我们拼凑了sql脚本，并没有执行，只有在for循环的时候执行</span><br><span class="line">    serializer_class &#x3D; GoodsSerializer</span><br><span class="line">    pagination_class &#x3D; GoodsPagination</span><br><span class="line">    filter_backends &#x3D; (DjangoFilterBackend, filters.SearchFilter)</span><br><span class="line">    filter_class &#x3D; GoodsFilter</span><br><span class="line">    # 不限于某个字段，只要配置进了search_fields就可以模糊搜索</span><br><span class="line">    search_fields &#x3D; (&#39;name&#39;, &#39;goods_brief&#39;, &#39;goods_desc&#39;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a><a href="https://www.daimajiaoliu.com/daima/48420efe9100400#heading-3">跨域问题</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初步使用serializer&quot;&gt;&lt;a href=&quot;#初步使用serializer&quot; class=&quot;headerlink&quot; title=&quot;初步使用serializer&quot;&gt;&lt;/a&gt;初步使用serializer&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用serializers的好处</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>pooledDB</title>
    <link href="http://example.com/2021/06/12/django/pooledDB/"/>
    <id>http://example.com/2021/06/12/django/pooledDB/</id>
    <published>2021-06-12T02:59:57.725Z</published>
    <updated>2021-06-12T13:17:10.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入连接池"><a href="#引入连接池" class="headerlink" title="引入连接池"></a>引入连接池</h2><ul><li>多个人同时调用时，创建一定数量的连接（抽象为一个池子），如果连接池有空闲连接，就给多个人其中一个人，如果没空，就有人需要等待</li><li>连接数设置一般为（核心数*2）+有效磁盘数</li><li>当不使用django自带的orm时，一般使用连接池连接数据库</li></ul><h2 id="两种模式（persistentDB和poolDB）"><a href="#两种模式（persistentDB和poolDB）" class="headerlink" title="两种模式（persistentDB和poolDB）"></a>两种模式（persistentDB和poolDB）</h2><ul><li><p>persistentDB</p></li><li><p>为每一个进来的现场创建一个连接，线程调用close也不会关闭，只是把连接重新放到连接池，供自己线程再次使用，当线程终止时连接自动关闭。（但限制了创建的上线，达到上线就必须等待线程关闭后再创建新的）</p></li><li><p>创建方式：自己独有一份，通过threading.local来保存线程数据，独有连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line">from dbutils.pooled_db import PooledDB</span><br><span class="line">from dbutils.persistent_db import PersistentDB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Pool1 &#x3D; PersistentDB(</span><br><span class="line">    creator&#x3D;pymysql,  # 使用连接mysql的模块客户端</span><br><span class="line">    maxusage&#x3D;None,  # 创建的一个连接最多使用多少次</span><br><span class="line">    setsession&#x3D;[],  # 执行一些命令修改session variables，在此session链接中可用的配置文件，也是sql命令</span><br><span class="line">    ping&#x3D;0,  # 为0永远不会ping，客户端在这里拿连接时，通过ping保证连接可用，为0就不能保证了，如果为7就是always只要拿链接就检查</span><br><span class="line">    # 如果为2 when a cursor is created, 4 when a query is executed  1.default whenever it is requested 一般4或者7</span><br><span class="line">    closeable&#x3D;False,  # 如果为False，conn.close()实际上会被忽略，如果为True就真的关闭了，会出问题，之后你的线程就没有连接了，也获取不到</span><br><span class="line">    threadlocal&#x3D;None,  # if thread_local is None, use threading.local，也可以自定义local，比如之前的</span><br><span class="line">    host&#x3D;&#39;127.0.0.1&#39;,</span><br><span class="line">    port&#x3D;3306,</span><br><span class="line">    user&#x3D;&#39;root&#39;,</span><br><span class="line">    password&#x3D;&#39;123456&#39;,</span><br><span class="line">    charset&#x3D;&#39;utf8&#39;,</span><br><span class="line">    db&#x3D;&#39;test&#39;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>pooledDB</p></li><li><p>创建好一批连接池，供所有线程共享使用，总数就那么多个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Pool2 &#x3D; PooledDB(</span><br><span class="line">creator&#x3D;pymysql,  # 使用连接mysql的模块客户端</span><br><span class="line">maxconnections&#x3D;6,  # 连接池允许的最大连接数，o和None不限制连接数</span><br><span class="line">mincached&#x3D;2,  # 初始化时链接池中最少创建的空闲的连接，0表示不创建</span><br><span class="line">maxcached&#x3D;5,  # 链接池中最多闲置的连接数，0和None表示不限制</span><br><span class="line">maxshared&#x3D;3,  # 连接池中最多共享的连接数，0和None表示全部共享，无用：因为pymysql和MYSQLdb等模块的threadsafety为1</span><br><span class="line"># 线程安全让为每个线程创建的连接不能共享给别的线程使用</span><br><span class="line">blocking&#x3D;True,  # 连接池没有可用连接后是否阻塞等待。True等待！False不等待直接报错</span><br><span class="line">maxusage&#x3D;None,  # 一个连接可以被使用多少次，None表示无限制</span><br><span class="line">setsession&#x3D;[],</span><br><span class="line">ping&#x3D;0,</span><br><span class="line">host&#x3D;&#39;127.0.0.1&#39;,</span><br><span class="line">port&#x3D;3306,</span><br><span class="line">user&#x3D;&#39;root&#39;,</span><br><span class="line">password&#x3D;&#39;123456&#39;,</span><br><span class="line">charset&#x3D;&#39;utf8&#39;,</span><br><span class="line">db&#x3D;&#39;test&#39;</span><br><span class="line">)</span><br><span class="line">def func():</span><br><span class="line">    conn &#x3D; Pool1.connection(shareable&#x3D;False)</span><br><span class="line">    cursor &#x3D; conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line">    cursor.execute(&#39;select * from bb&#39;)</span><br><span class="line">    results &#x3D; cursor.fetchall()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-简单使用pooledDB"><a href="#3-3-简单使用pooledDB" class="headerlink" title="3.3 简单使用pooledDB"></a>3.3 简单使用pooledDB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class MySQL(object):</span><br><span class="line">def __init__(self, username, password, hostname, db_name, charset&#x3D;&#39;utf8mb4&#39;):</span><br><span class="line">    self.username &#x3D; username</span><br><span class="line">    self.password &#x3D; password</span><br><span class="line">    self.db_name &#x3D; db_name</span><br><span class="line">    self.hostname &#x3D; hostname</span><br><span class="line">    self.log &#x3D; log</span><br><span class="line">    self.pool &#x3D; PooledDB(</span><br><span class="line">        creator&#x3D;MySQLdb,</span><br><span class="line">        mincached&#x3D;0,</span><br><span class="line">        maxcached&#x3D;6,</span><br><span class="line">        maxshared&#x3D;3,</span><br><span class="line">        blocking&#x3D;True,</span><br><span class="line">        ping&#x3D;0,</span><br><span class="line">        maxusage&#x3D;None,</span><br><span class="line">        host&#x3D;self.hostname,</span><br><span class="line">        user&#x3D;self.username,</span><br><span class="line">        passwd&#x3D;self.password,</span><br><span class="line">        db&#x3D;self.db_name,</span><br><span class="line">        port&#x3D;3306,</span><br><span class="line">        charset&#x3D;charset</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">def manipulate_db(self, sql, pairs&#x3D;True):</span><br><span class="line">    db &#x3D; None</span><br><span class="line">    cursor &#x3D; None</span><br><span class="line">    try:</span><br><span class="line">        db &#x3D; self.pool.connection()</span><br><span class="line">        if pairs:</span><br><span class="line">            cursor &#x3D; db.cursor(cursorclass&#x3D;MySQLdb.cursors.DictCursor)</span><br><span class="line">        else:</span><br><span class="line">            cursor &#x3D; db.cursor()</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        if &#39;select&#39; in sql or &#39;SELECT&#39; in sql:</span><br><span class="line">            return cursor.fetchall()</span><br><span class="line">        else:</span><br><span class="line">            # select does not need commit(), only update&#x2F;insert&#x2F;delete need it</span><br><span class="line">            db.commit()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        self.log(&#39;[&#123;&#125;] meet error&#39;.format(sql))</span><br><span class="line">        self.log(e)</span><br><span class="line">        if &#39;select&#39; not in sql and &#39;SELECT&#39; not in sql:</span><br><span class="line">            # select does not need rollback</span><br><span class="line">            db.rollback()</span><br><span class="line">        return ()</span><br><span class="line">    finally:</span><br><span class="line">        if cursor:</span><br><span class="line">            cursor.close()</span><br><span class="line">        if db:</span><br><span class="line">            db.close()</span><br><span class="line"></span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入连接池&quot;&gt;&lt;a href=&quot;#引入连接池&quot; class=&quot;headerlink&quot; title=&quot;引入连接池&quot;&gt;&lt;/a&gt;引入连接池&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;多个人同时调用时，创建一定数量的连接（抽象为一个池子），如果连接池有空闲连接，就给多个人其中一个人，如果</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>model设计</title>
    <link href="http://example.com/2021/06/12/django/model%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2021/06/12/django/model%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-06-12T02:59:37.551Z</published>
    <updated>2021-06-12T13:17:11.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归类设计model、app"><a href="#归类设计model、app" class="headerlink" title="归类设计model、app"></a>归类设计model、app</h2><ul><li>通过类型区分model，放置到不同app的model块</li><li>例如如果是商城类型的网站设计：<ul><li>商品 goods</li><li>交易 trade</li><li>用户 users</li><li>用户操作 userOperation</li></ul></li></ul><h2 id="常用基础model知识"><a href="#常用基础model知识" class="headerlink" title="常用基础model知识"></a>常用基础model知识</h2><h3 id="基础Field"><a href="#基础Field" class="headerlink" title="基础Field"></a>基础Field</h3><ul><li>CharField</li><li>DateField</li><li>DateTimeField <ul><li>关键参数：auto_now_add=True(在新增时创建时间之后不再变)和auto_now=True即mysql中的CURRENT_TIMESTAMP和ON UPDATE CURRENT_TIMESTAMP</li></ul></li><li>BigIntegerField</li><li>BinaryField</li><li>DecimalField<ul><li>关键参数：max_digits小数总长度/decimal_places(小数位长度)</li></ul></li><li>EmailField Admin和modelForm提供验证email的正则</li><li>FileField<ul><li>关键参数：upload_to=”path”上传文件保存路径，存储时以路径存到数据库</li></ul></li><li>FloatField</li><li>IntegerField</li><li>URLField   Admin和modelForm中提供url验证</li><li>IPAddressField   Admin和modelForm中提供ipv4</li><li>GenericIPAddressField    Admin和modelForm中提供ipv4和ipv6的验证</li><li>ImageField<ul><li>关键参数：upload_to=”path”</li></ul></li><li>常用参数<ul><li>null</li><li>unique</li><li>db_index</li><li>default</li></ul></li></ul><h3 id="关系Field"><a href="#关系Field" class="headerlink" title="关系Field"></a>关系Field</h3><ul><li><p>ForeignKey</p><ul><li>to<ul><li>“self”表示自关联</li></ul></li><li>to_field</li><li>related_name<ul><li>反向操作需要使用的字段名，用于代替默认的反向查询表名_set</li></ul></li><li>on_delete 当主表删除数据时，关联表所做行为<ul><li>CASECADE 串级删除</li><li>DO_NOTHING 报IntegrityError</li><li>PROTECT 报ProtectedError</li><li>SET_NULL</li><li>SET_DEFAULT</li><li>SET(val) </li></ul></li><li>db_constraint</li></ul></li><li><p>ManytoManyField 与ForeinKey类似</p></li></ul><h3 id="model原信息meta"><a href="#model原信息meta" class="headerlink" title="model原信息meta"></a>model原信息meta</h3><ul><li>db_table 名字</li><li>index_together 联合索引</li><li>unique_together 联合唯一索引</li><li>ordering 指定默认按什么字段排序</li></ul><h3 id="第三方Field"><a href="#第三方Field" class="headerlink" title="第三方Field"></a>第三方Field</h3><p>pip install djangoUeditor(或github克隆）</p><ul><li>UEditorField(verbose_name=’’, imagePath=’’, filePath=’’, width=1000, height=300)<ul><li>富文本编辑字段即可发图片、文本、文件。</li></ul></li></ul><h2 id="模型继承"><a href="#模型继承" class="headerlink" title="模型继承"></a><a href="https://www.liujiangblog.com/course/django/100">模型继承</a></h2><h3 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h3><ul><li>和python类继承类似，将子类的共同数据抽象出来继承充用，不会创建实际的数据表<ul><li>如django.contrib.auth.models中的AbstractUser</li></ul></li></ul><h3 id="多表继承"><a href="#多表继承" class="headerlink" title="多表继承"></a>多表继承</h3><ul><li>父类和子类都是独立自主、功能完整、可正常使用的模型，都有自己的数据表，但内部隐藏一个一对一关系</li></ul><h3 id="代理模型"><a href="#代理模型" class="headerlink" title="代理模型"></a>代理模型</h3><ul><li>在meta中声明proxy=True可以代理继承中的模型</li></ul><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><h2 id="用户模型"><a href="#用户模型" class="headerlink" title="用户模型"></a>用户模型</h2><h3 id="引用用户模型"><a href="#引用用户模型" class="headerlink" title="引用用户模型"></a>引用用户模型</h3><ul><li>由于app添加了django.contrib.auth默认了自带的user，如果不自定义并在setting中修改，即会使用默认的user作为用户</li><li>自定义user须在setting中添加配置AUTH_USER_MODEL=’APP.XXXMODEL’，并继承AbstractUser</li><li>如果有别的model外键user，需要通过get_user_model()寻找user，即setting.AUTH_USER_MODEL</li><li>在migration时请确保user放在首位，解决Django的动态依赖</li></ul><h3 id="用户模型关键参数"><a href="#用户模型关键参数" class="headerlink" title="用户模型关键参数"></a>用户模型关键参数</h3><h4 id="USERNAME-FIELD"><a href="#USERNAME-FIELD" class="headerlink" title="USERNAME_FIELD"></a>USERNAME_FIELD</h4><ul><li>必须设置，且改field必须含有unique=True即USERNAME_FIELD = ‘字段名’<h4 id="2-4-2-2-REQUIRED-FIELDS"><a href="#2-4-2-2-REQUIRED-FIELDS" class="headerlink" title="2.4.2.2 REQUIRED_FIELDS"></a>2.4.2.2 REQUIRED_FIELDS</h4></li><li>设置list，如果设置，该字段为必填字段（主要用于createsuperuser时使用）,REQUIRED_FIELDS = [‘date_of_birth’, ‘height’]，还有一些方法可以继承原抽象user模型</li></ul><h3 id="自定义user管理器"><a href="#自定义user管理器" class="headerlink" title="自定义user管理器"></a>自定义user管理器</h3><ul><li>大概是重写一下UserManager的几个方法如create_user/create_super_user</li></ul><h3 id="自定义用户和权限"><a href="#自定义用户和权限" class="headerlink" title="自定义用户和权限"></a><a href="https://zhuanlan.zhihu.com/p/50594581">自定义用户和权限</a></h3><ul><li>用户权限一般包括增删改查某个model，权限名一般有app名(app_label)，权限动作和模型名组成</li></ul><h4 id="分配权限与查看权限"><a href="#分配权限与查看权限" class="headerlink" title="分配权限与查看权限"></a>分配权限与查看权限</h4><ul><li>查看权限<ul><li>user.has_perm(‘appname.operation_modelname’)</li><li>user.get_group_permissions()</li><li>user.get_all_permissions()</li></ul></li><li>分配权限<ul><li>user.user_permissions = [permission1, permission2……]</li><li>user.user_permissions.add(per1, per2)</li><li>user.user_permissions.remove(per1, per2)</li><li>user.uer_permissions.clear()</li></ul></li><li>自定义权限<ul><li>方法一：在model的meta中设置权限permissions=((“read_xxx”, “Can Read xxxx”),())</li><li>方法二：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from blog.models import Article</span><br><span class="line">from django.contrib.auth.models import Permission</span><br><span class="line">from django.contrib.contenttypes.models import ContentType</span><br><span class="line"></span><br><span class="line">content_type &#x3D; ContentType.objects.get_for_model(article)</span><br><span class="line">permission1 &#x3D; Permission.objects.create(</span><br><span class="line">    codename&#x3D;&#39;publish_article&#39;,</span><br><span class="line">    name&#x3D;&#39;Can publish articles&#39;,</span><br><span class="line">    content_type&#x3D;content_type,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">permission2 &#x3D; Permission.objects.create(</span><br><span class="line">    codename&#x3D;&#39;comment_article&#39;,</span><br><span class="line">    name&#x3D;&#39;Can comment articles&#39;,</span><br><span class="line">    content_type&#x3D;content_type,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li><li>把用户添加到组<ul><li>获取用户对象和组对象，因为是多对多关系，直接user.groups.add(g)即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个分组</span><br><span class="line">Group.objects.create(name&#x3D;&#39;reader&#39;)</span><br><span class="line"></span><br><span class="line"># 获取某用户</span><br><span class="line">u &#x3D; User.objects.get(username&#x3D;&#39;test_user&#39;)</span><br><span class="line"></span><br><span class="line"># 获取某分组</span><br><span class="line">g &#x3D; Group.objects.get(name&#x3D;&#39;reader&#39;)</span><br><span class="line"></span><br><span class="line"># 把用户加入到分组中</span><br><span class="line">u.groups.add(g)</span><br><span class="line"></span><br><span class="line"># 获取某个权限</span><br><span class="line">p&#x3D; Permission.objects.get(codename&#x3D;&#39;read_book&#39;)</span><br><span class="line"></span><br><span class="line"># 把该权限加入到分组</span><br><span class="line">g.permissions.add(p)</span><br><span class="line">Group 还有其他操作：</span><br><span class="line"></span><br><span class="line"># 把用户加入分组，group_list可以是一个或多个分组</span><br><span class="line">u.groups &#x3D; [group_list]</span><br><span class="line"></span><br><span class="line"># 把用户加入某分组</span><br><span class="line">u.groups.add(group, group, ...)</span><br><span class="line"></span><br><span class="line"># 把某用户从某分组删除</span><br><span class="line">u.groups.remove(group, group, ...)</span><br><span class="line"></span><br><span class="line"># 该用户退出所以分组</span><br><span class="line">u.groups.clear()</span><br><span class="line"></span><br><span class="line"># 把权限加入到该分组</span><br><span class="line">g.permissions.add(permission, permissions, ...)</span><br><span class="line">g.permissions.remove(permission, permissions, ...)</span><br><span class="line">g.permissions.clear()</span><br></pre></td></tr></table></figure></li></ul></li><li>视图权限控制<ul><li>1.直接通过user.has_perm(‘’)判断</li><li>2.通过装饰器判断：permission_required(perm, login_url=None, raise_exception=False)<h2 id="2-5-admin注册"><a href="#2-5-admin注册" class="headerlink" title="2.5 admin注册"></a>2.5 admin注册</h2></li></ul></li><li>如果要使用自带的后台管理系统即需要注册各个model的admin，这里可以使用simpleui<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class GoodsAdmin(ImportExportActionModelAdmin, ImportExportModelAdmin):</span><br><span class="line">    resource_class &#x3D; GoodsResource</span><br><span class="line">    list_filter &#x3D; [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;,</span><br><span class="line">                   &quot;shop_price&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;, &quot;category__name&quot;]</span><br><span class="line">    list_display &#x3D; [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;,</span><br><span class="line">                    &quot;shop_price&quot;, &quot;goods_brief&quot;, &quot;goods_desc&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;]</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;, ]</span><br><span class="line">    list_editable &#x3D; [&quot;is_hot&quot;, ]</span><br><span class="line">    # fieldsets &#x3D; [</span><br><span class="line">    #     (None, &#123;&#39;fields&#39;: [&#39;name&#39;]&#125;, ),</span><br><span class="line">    #     (None, &#123;&#39;fields&#39;: [&#39;goods_desc&#39;], &#39;classes&#39;: [&#39;collapse&#39;]&#125;),</span><br><span class="line">    # ]</span><br><span class="line">    style_fields &#x3D; &#123;&quot;goods_desc&quot;: &quot;ueditor&quot;&#125;</span><br><span class="line"></span><br><span class="line">    class GoodsImagesInline(admin.StackedInline):</span><br><span class="line">        model &#x3D; GoodsImage</span><br><span class="line">        exclude &#x3D; [&quot;add_time&quot;]</span><br><span class="line">        extra &#x3D; 1</span><br><span class="line">        style &#x3D; &#39;tab&#39;</span><br><span class="line"></span><br><span class="line">    inlines &#x3D; [GoodsImagesInline, ]</span><br><span class="line">admin.site.register(Goods, GoodsAdmin)</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-6-单独使用model"><a href="#2-6-单独使用model" class="headerlink" title="2.6 单独使用model"></a>2.6 单独使用model</h2><ul><li>使用django的model进行测试，数据添加等操作时，需要：<ul><li>1.获取当前路径，把当前路径加入sys</li><li>2.设置django setting为当前环境变量（os）</li><li>3.导入django并启动</li><li>4.导入app模型使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import django</span><br><span class="line">pwd &#x3D; os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">sys.path.append(pwd+&quot;..&#x2F;&quot;)</span><br><span class="line">os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;MxShop.settings&quot;)</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line">from goods.models import GoodsCategory, Goods</span><br><span class="line">from db_tools.data.category_data import row_data</span><br><span class="line">from django.db.models import Count, Max</span><br><span class="line"></span><br><span class="line">a &#x3D; Goods.objects.all().values(&#39;category&#39;).annotate(a&#x3D;Max(&#39;market_price&#39;))</span><br><span class="line">b &#x3D; Goods.objects.all().aggregate(a&#x3D;Max(&#39;market_price&#39;))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;归类设计model、app&quot;&gt;&lt;a href=&quot;#归类设计model、app&quot; class=&quot;headerlink&quot; title=&quot;归类设计model、app&quot;&gt;&lt;/a&gt;归类设计model、app&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过类型区分model，放置到不同app</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title>基本配置</title>
    <link href="http://example.com/2021/06/12/django/drf%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/06/12/django/drf%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</id>
    <published>2021-06-12T02:59:13.686Z</published>
    <updated>2021-06-12T13:17:11.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建虚拟环境"><a href="#搭建虚拟环境" class="headerlink" title="搭建虚拟环境"></a>搭建虚拟环境</h2><ul><li>pip install virtualenv</li><li>pip install virtualenvwrapper</li><li>mkvirtualenv name 创建虚拟环境</li><li>workon 列出所有虚拟环境</li><li>workon name 进入虚拟环境</li><li>deactivate 退出</li><li>默认安装路径c盘用户下的envs</li><li>修改路径：环境变量设置-&gt;新建系统变量-&gt;WORKON_HOME(Key)：E:envs(val)</li></ul><h2 id="必备包"><a href="#必备包" class="headerlink" title="必备包"></a>必备包</h2><ul><li>django</li><li>django-filter</li><li>djangorestframework</li><li>markdown</li><li>mysqlclient</li><li>Pillow</li></ul><h2 id="项目基础目录架构"><a href="#项目基础目录架构" class="headerlink" title="项目基础目录架构"></a>项目基础目录架构</h2><ul><li>apps 放置各个主逻辑模块app</li><li>extra_apps 放置第三方包，如DjangoUeditor、Xadmin</li><li>media 放置图片</li><li>db_tools 放置数据库相关处理脚本</li><li>设置app为source root</li><li>配置setting<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">from pathlib import Path</span><br><span class="line">BASE_DIR &#x3D; Path(__file__).resolve(strict&#x3D;True).parent.parent</span><br><span class="line">sys.path.insert(0, BASE_DIR)</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &#39;apps&#39;))</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &#39;extra_apps&#39;))</span><br><span class="line"># 配置以便导入</span><br><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;:&#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;xxxxx&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;xxxxx&#39;,</span><br><span class="line">        &#39;HOST&#39;: &#39;xxxx&#39;,</span><br><span class="line">        &#39;PORT&#39;: &#39;xxxx&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;搭建虚拟环境&quot;&gt;&lt;a href=&quot;#搭建虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;搭建虚拟环境&quot;&gt;&lt;/a&gt;搭建虚拟环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;pip install virtualenv&lt;/li&gt;
&lt;li&gt;pip install virt</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="django" scheme="http://example.com/categories/webframe/django/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/12/pyqt/pysider2/"/>
    <id>http://example.com/2021/06/12/pyqt/pysider2/</id>
    <published>2021-06-12T02:47:09.264Z</published>
    <updated>2021-06-12T02:47:09.264Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>docker-compose编排django+uwsgi+nginx+mysql+redis项目</title>
    <link href="http://example.com/2021/06/12/docker-compose/django+uwsgi+nginx+mysql+redis%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/06/12/docker-compose/django+uwsgi+nginx+mysql+redis%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-06-12T01:10:08.700Z</published>
    <updated>2021-06-12T02:03:36.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mydocker&#x2F;</span><br><span class="line">├── compose</span><br><span class="line">│      ├── mysql</span><br><span class="line">│      │   ├── conf</span><br><span class="line">│      │   ├── init</span><br><span class="line">│      │   └── mysql-files</span><br><span class="line">│      ├── nginx</span><br><span class="line">│      │   ├── Dockerfile</span><br><span class="line">│      │   ├── log</span><br><span class="line">│      │   ├── nginx.conf</span><br><span class="line">│      │   └── ssl</span><br><span class="line">│      ├── redis</span><br><span class="line">│      │   └── redis.conf</span><br><span class="line">│      └── uwsgi</span><br><span class="line">│          ├── myproject-master.pid</span><br><span class="line">│          └── myproject-uwsgi.log</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── myproject</span><br><span class="line">        ├── apps</span><br><span class="line">        ├── db.sqlite3</span><br><span class="line">        ├── db_tools</span><br><span class="line">        ├── Dockerfile</span><br><span class="line">        ├── extra_apps</span><br><span class="line">        ├── manage.py</span><br><span class="line">        ├── media</span><br><span class="line">        ├── mycelery</span><br><span class="line">        ├── myproject</span><br><span class="line">        ├── __pycache__</span><br><span class="line">        ├── requirements.txt</span><br><span class="line">        ├── start.sh</span><br><span class="line">        ├── static</span><br><span class="line">        ├── staticfiles</span><br><span class="line">        ├── templates</span><br><span class="line">        ├── tests</span><br><span class="line">        └── uwsgi.ini</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><ul><li>1.为了方便修改各项配置文件、和数据的持久化我们需要挂载一些数据卷并且可以指定完整路径挂载到你想指定的路径下，<br>如果不指定完整路径需要在volumes中声明，一般会储存在/var/lib/docker/volumes/并以项目名_卷名为名称，如果定义<br>了external:true需要提前创建好该文件</li><li>2.build会找寻指定目录下的Dockerfile并生成对应image，通过image创造容器</li><li>3.注意端口是否占用</li><li>4.注意各个镜像的版本，不同版本需要不同配置</li><li>5.由于使用nginx反向代理，需要把静态文件和nginx做绑定<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">volumes: # 自定义数据卷，位于宿主机&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes内</span><br><span class="line">    myproject_db_vol: # 定义数据卷同步容器内mysql数据</span><br><span class="line">    myproject_redis_vol: # 定义数据卷同步redis容器内数据</span><br><span class="line">    myproject_media_vol: # 定义数据卷同步media文件夹数据</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">    redis:</span><br><span class="line">        image: redis</span><br><span class="line">        command: redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf # 容器启动后启动redis服务器</span><br><span class="line">        volumes:</span><br><span class="line">            - myproject_redis_vol:&#x2F;data # 通过挂载给redis数据备份</span><br><span class="line">            - .&#x2F;compose&#x2F;redis&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf # 挂载redis配置文</span><br><span class="line">件</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;6379:6379&quot;</span><br><span class="line">        restart: always # always表容器运行发生错误时一直重启</span><br><span class="line">        stdin_open: true</span><br><span class="line">        tty: true</span><br><span class="line"></span><br><span class="line">    db:</span><br><span class="line">        image: mysql</span><br><span class="line">        env_file:</span><br><span class="line">            - .&#x2F;myproject&#x2F;.env</span><br><span class="line">        volumes:</span><br><span class="line">            - myproject_db_vol:&#x2F;var&#x2F;lib&#x2F;mysql:rw # 挂载数据库数据, 可读可写</span><br><span class="line">            - .&#x2F;compose&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;mysql&#x2F;my.cnf # 挂载配置文件</span><br><span class="line">            - .&#x2F;compose&#x2F;mysql&#x2F;init:&#x2F;docker-entrypoint-initdb.d&#x2F; # 挂载数据初始化</span><br><span class="line">sql脚本</span><br><span class="line">            - .&#x2F;compose&#x2F;mysql&#x2F;mysql-files:&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;3306:3306&quot; # 与配置文件保持一致</span><br><span class="line">        restart: always</span><br><span class="line"></span><br><span class="line">    web:</span><br><span class="line">        build: .&#x2F;myproject # 使用myproject目录下的Dockerfile</span><br><span class="line">        expose:</span><br><span class="line">            - &quot;8000&quot;</span><br><span class="line">        volumes:</span><br><span class="line">            - .&#x2F;myproject:&#x2F;var&#x2F;www&#x2F;html&#x2F;myproject # 挂载项目代码</span><br><span class="line">            - myproject_media_vol:&#x2F;var&#x2F;www&#x2F;html&#x2F;myproject&#x2F;media # 以数据卷挂载容</span><br><span class="line">器内用户上传媒体文件</span><br><span class="line">            - .&#x2F;compose&#x2F;uwsgi:&#x2F;tmp # 挂载uwsgi日志</span><br><span class="line">        links:</span><br><span class="line">            - db</span><br><span class="line">            - redis</span><br><span class="line">        depends_on: # 依赖关系</span><br><span class="line">            - db</span><br><span class="line">            - redis</span><br><span class="line">        environment:</span><br><span class="line">            - DEBUG&#x3D;False</span><br><span class="line">        restart: always</span><br><span class="line">        tty: true</span><br><span class="line">        stdin_open: true</span><br><span class="line"></span><br><span class="line">    nginx:</span><br><span class="line">        build: .&#x2F;compose&#x2F;nginx</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;80:80&quot;</span><br><span class="line">            - &quot;443:443&quot;</span><br><span class="line">        expose:</span><br><span class="line">            - &quot;80&quot;</span><br><span class="line">        volumes:</span><br><span class="line">            - .&#x2F;myproject&#x2F;static:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;static # 挂载静态文件</span><br><span class="line">            - .&#x2F;compose&#x2F;nginx&#x2F;ssl:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;ssl # 挂载ssl证书目录</span><br><span class="line">            - .&#x2F;compose&#x2F;nginx&#x2F;log:&#x2F;var&#x2F;log&#x2F;nginx # 挂载日志</span><br><span class="line">            - myproject_media_vol:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;media # 挂载用户上传媒体</span><br><span class="line">文件</span><br><span class="line">        links:</span><br><span class="line">            - web</span><br><span class="line">        depends_on:</span><br><span class="line">            - web</span><br><span class="line">        restart: always</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="web容器和配置文件"><a href="#web容器和配置文件" class="headerlink" title="web容器和配置文件"></a>web容器和配置文件</h2><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># myproject&#x2F;Dockerfile</span><br><span class="line"># 建立 python3.8 环境</span><br><span class="line"></span><br><span class="line">FROM python:3.8</span><br><span class="line">MAINTAINER chunjianghuayueye</span><br><span class="line"></span><br><span class="line"># 设置 python 环境变量</span><br><span class="line">ENV PYTHONUNBUFFERED 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建 myproject 文件夹</span><br><span class="line">RUN mkdir -p &#x2F;var&#x2F;www&#x2F;html&#x2F;myproject</span><br><span class="line"></span><br><span class="line"># 将 myproject 文件夹为工作目录</span><br><span class="line">WORKDIR &#x2F;var&#x2F;www&#x2F;html&#x2F;myproject</span><br><span class="line"></span><br><span class="line"># 将当前目录加入到工作目录中（. 表示当前目录）</span><br><span class="line">ADD . &#x2F;var&#x2F;www&#x2F;html&#x2F;myproject</span><br><span class="line"></span><br><span class="line"># 更新pip版本</span><br><span class="line">RUN &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python -m pip install --upgrade pip</span><br><span class="line"></span><br><span class="line"># 利用 pip 安装依赖</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 去除windows系统编辑文件中多余的\r回车空格</span><br><span class="line">RUN sed -i &#39;s&#x2F;\r&#x2F;&#x2F;&#39; .&#x2F;start.sh</span><br><span class="line"></span><br><span class="line"># 给start.sh可执行权限</span><br><span class="line">RUN chmod +x .&#x2F;start.sh</span><br><span class="line">ENTRYPOINT &#x2F;bash&#x2F;bin .&#x2F;start.sh</span><br></pre></td></tr></table></figure><h4 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 从第一行到最后一行分别表示：</span><br><span class="line"># 1. 收集静态文件到根目录，</span><br><span class="line"># 2. 生成数据库可执行文件，</span><br><span class="line"># 3. 根据数据库可执行文件来修改数据库</span><br><span class="line"># 4. 用 uwsgi启动 django 服务</span><br><span class="line">python manage.py collectstatic --noinput&amp;&amp;</span><br><span class="line">python manage.py makemigrations&amp;&amp;</span><br><span class="line">python manage.py migrate&amp;&amp;</span><br><span class="line">uwsgi --ini &#x2F;var&#x2F;www&#x2F;html&#x2F;myproject&#x2F;uwsgi.ini</span><br></pre></td></tr></table></figure><h3 id="uwsgi-ini"><a href="#uwsgi-ini" class="headerlink" title="uwsgi.ini"></a>uwsgi.ini</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line">project&#x3D;myproject</span><br><span class="line">uid&#x3D;www-data</span><br><span class="line">gid&#x3D;www-data</span><br><span class="line">base&#x3D;&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line"></span><br><span class="line">chdir&#x3D;%(base)&#x2F;%(project)</span><br><span class="line">module&#x3D;%(project).wsgi:application</span><br><span class="line">master&#x3D;True</span><br><span class="line">processes&#x3D;2</span><br><span class="line"></span><br><span class="line">socket&#x3D;0.0.0.0:8000</span><br><span class="line">chown-socket&#x3D;%(uid):www-data</span><br><span class="line">chmod-socket&#x3D;664</span><br><span class="line"></span><br><span class="line">vacuum&#x3D;True</span><br><span class="line">max-requests&#x3D;5000</span><br><span class="line"></span><br><span class="line">pidfile&#x3D;&#x2F;tmp&#x2F;%(project)-master.pid</span><br><span class="line">daemonize&#x3D;&#x2F;tmp&#x2F;%(project)-uwsgi.log</span><br><span class="line"></span><br><span class="line">#设置一个请求的超时时间(秒)，如果一个请求超过了这个时间，则请求被丢弃</span><br><span class="line">harakiri &#x3D; 60</span><br><span class="line">post buffering &#x3D; 8192</span><br><span class="line">buffer-size&#x3D; 65535</span><br><span class="line">#当一个请求被harakiri杀掉会，会输出一条日志</span><br><span class="line">harakiri-verbose &#x3D; true</span><br><span class="line"></span><br><span class="line">#开启内存使用情况报告</span><br><span class="line">memory-report &#x3D; true</span><br><span class="line"></span><br><span class="line">#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)</span><br><span class="line">reload-mercy &#x3D; 10</span><br><span class="line"></span><br><span class="line">#设置工作进程使用虚拟内存超过N MB就回收重启</span><br><span class="line">reload-on-as&#x3D; 1024</span><br><span class="line">python-autoreload&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="nginx容器和配置文件"><a href="#nginx容器和配置文件" class="headerlink" title="nginx容器和配置文件"></a>nginx容器和配置文件</h2><h3 id="修改配置文件nginx-conf"><a href="#修改配置文件nginx-conf" class="headerlink" title="修改配置文件nginx.conf"></a>修改配置文件nginx.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># nginx配置文件</span><br><span class="line"># compose&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">upstream django &#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server web:8000; # Docker-compose web服务端口</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80; # 监听80端口</span><br><span class="line">server_name localhost; # 可以是nginx容器所在ip地址或127.0.0.1，不能写宿主机外网ip地址</span><br><span class="line"></span><br><span class="line">charset utf-8;</span><br><span class="line">client_max_body_size 10M; # 限制用户上传文件大小</span><br><span class="line"></span><br><span class="line">location &#x2F;static &#123;</span><br><span class="line"> alias &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;static; # 静态资源路径</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;media &#123;</span><br><span class="line"> alias &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;media; # 媒体资源，用户上传文件路径</span><br><span class="line">&#125;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line"> include &#x2F;etc&#x2F;nginx&#x2F;uwsgi_params;</span><br><span class="line"> uwsgi_pass django;</span><br><span class="line"> uwsgi_read_timeout 600;</span><br><span class="line"> uwsgi_connect_timeout 600;</span><br><span class="line"> uwsgi_send_timeout 600;</span><br><span class="line"></span><br><span class="line"> proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"> proxy_set_header Host $http_host;</span><br><span class="line"> proxy_redirect off;</span><br><span class="line"> proxy_set_header X-Real-IP  $remote_addr;</span><br><span class="line"># proxy_pass http:&#x2F;&#x2F;django;  # 使用uwsgi通信，而不是http，所以不使用proxy_pass。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log main;</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;</span><br><span class="line"></span><br><span class="line">server_tokens off;                                   </span><br></pre></td></tr></table></figure><h3 id="Dcokerfile"><a href="#Dcokerfile" class="headerlink" title="Dcokerfile"></a>Dcokerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># nginx镜像compose&#x2F;nginx&#x2F;Dockerfile</span><br><span class="line"></span><br><span class="line">FROM nginx:latest</span><br><span class="line"></span><br><span class="line"># 删除原有配置文件，创建静态资源文件夹和ssl证书保存文件夹</span><br><span class="line">RUN rm &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf \</span><br><span class="line">&amp;&amp; mkdir -p &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;static \</span><br><span class="line">&amp;&amp; mkdir -p &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;media \</span><br><span class="line">&amp;&amp; mkdir -p &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;ssl</span><br><span class="line"></span><br><span class="line"># 设置Media文件夹用户和用户组为Linux默认www-data, 并给予可读和可执行权限,</span><br><span class="line"># 否则用户上传的图片无法正确显示。</span><br><span class="line">RUN chown -R www-data:www-data &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;media \</span><br><span class="line">&amp;&amp; chmod -R 775 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;media</span><br><span class="line"></span><br><span class="line"># 添加配置文件</span><br><span class="line">ADD .&#x2F;nginx.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</span><br><span class="line"></span><br><span class="line"># 关闭守护模式</span><br><span class="line">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]                                      </span><br></pre></td></tr></table></figure><h2 id="db数据库"><a href="#db数据库" class="headerlink" title="db数据库"></a>db数据库</h2><h3 id="my-cnf"><a href="#my-cnf" class="headerlink" title="my.cnf"></a>my.cnf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> compose&#x2F;mysql&#x2F;conf&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"></span><br><span class="line">port            &#x3D; 3306 # 端口与docker-compose里映射端口保持一致</span><br><span class="line"># bind-address&#x3D; localhost # 一定要注释掉，mysql所在容器和django所在容器不同IP</span><br><span class="line">default-authentication-plugin&#x3D;mysql_native_password</span><br><span class="line"></span><br><span class="line">basedir         &#x3D; &#x2F;usr</span><br><span class="line">datadir         &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">tmpdir          &#x3D; &#x2F;tmp</span><br><span class="line">pid-file        &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br><span class="line">socket          &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br><span class="line">skip-name-resolve  # 这个参数是禁止域名解析的，远程访问推荐开启skip_name_resolve。</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">port &#x3D; 3306</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure><h3 id="init-sql"><a href="#init-sql" class="headerlink" title="init.sql"></a>init.sql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON myproject.* TO dbuser@&quot;%&quot; IDENTIFIED BY &quot;Password1&quot;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_ROOT_PASSWORD&#x3D;Password1 # 数据库密码</span><br><span class="line">MYSQL_DATABASE&#x3D;myproject # 数据库名称</span><br><span class="line">MYSQL_USER&#x3D;dbuser # 数据库用户名</span><br><span class="line">MYSQL_PASSWORD&#x3D;Password1 # 用户密码</span><br></pre></td></tr></table></figure><h2 id="settings配置"><a href="#settings配置" class="headerlink" title="settings配置"></a>settings配置</h2><p>主要添加以下静态路径和修改一下mysql、redis配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;myproject&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;Zhanghaowei1&#39;,</span><br><span class="line">        &#39;HOST&#39;: &#39;db&#39;,</span><br><span class="line">        &#39;PORT&#39;: &#39;3306&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CACHES &#x3D; &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span><br><span class="line">        &quot;LOCATION&quot;: &quot;redis:&#x2F;&#x2F;redis:6379&#x2F;1&quot;,</span><br><span class="line">        &quot;OPTIONS&quot;: &#123;</span><br><span class="line">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">STATIC_ROOT &#x3D; os.path.join(BASE_DIR, &#39;static&#39;)</span><br><span class="line">STATIC_URL &#x3D; &#39;static&#x2F;&#39;</span><br><span class="line">STATICFILES_DIRS &#x3D; [</span><br><span class="line">     os.path.join(BASE_DIR, &quot;staticfiles&quot;),</span><br><span class="line"> ]</span><br><span class="line">print(STATICFILES_DIRS)</span><br><span class="line">IMPORT_EXPORT_USE_TRANSACTIONS &#x3D; True</span><br><span class="line">MEDIA_URL &#x3D; &quot;media&#x2F;&quot;</span><br><span class="line">MEDIA_ROOT &#x3D; os.path.join(BASE_DIR, &quot;media&quot;)</span><br></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line"># 启动</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目架构&quot;&gt;&lt;a href=&quot;#项目架构&quot; class=&quot;headerlink&quot; title=&quot;项目架构&quot;&gt;&lt;/a&gt;项目架构&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="bigdata" scheme="http://example.com/categories/bigdata/"/>
    
    <category term="docker-compose" scheme="http://example.com/categories/bigdata/docker-compose/"/>
    
    
  </entry>
  
</feed>
