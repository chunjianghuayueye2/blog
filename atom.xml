<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>春江花月夜o</title>
  
  <subtitle>既自以心为形役，奚惆怅而独悲。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-09T02:25:42.189Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>durian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/09/flask%E8%BF%9E%E6%8E%A5redis%E9%9B%86%E7%BE%A4/"/>
    <id>http://example.com/2021/06/09/flask%E8%BF%9E%E6%8E%A5redis%E9%9B%86%E7%BE%A4/</id>
    <published>2021-06-09T02:25:42.189Z</published>
    <updated>2021-06-09T02:25:42.189Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>jwt</title>
    <link href="http://example.com/2021/06/09/jwt/"/>
    <id>http://example.com/2021/06/09/jwt/</id>
    <published>2021-06-09T02:24:41.638Z</published>
    <updated>2021-06-09T07:39:28.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JWT是一个含签名并携带用户相关信息的加密串，页面请求校验登录接口时，<br>请求头中携带JWT串到后端服务，后端通过签名加密串匹配校验，保证信息未<br>被篡改。校验通过则认为是可靠的请求，将正常返回数据。</p><h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><p>JWT由三部分组成，分别是头信息header、有效载荷payload、签名signature，中间以（.）分隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.yyy.zzz</span><br></pre></td></tr></table></figure><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>由两部分组成，令牌类型（即：JWT）、散列算法（HMAC、RSASSA、RSASSA-PSS等），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，这个JSON被编码为Base64Url，形成JWT的第一部分。</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>JWT的第二部分是payload，其中包含claims。claims是关于实体（常用的是用户信息）<br>和其他数据的声明，claims有三种类型： registered, public, and private claims。</p><ul><li><p>1.Registered claims： 这些是一组预定义的claims，非强制性的，但是推荐使用，<br>iss（发行人）， exp（到期时间）， sub（主题）， aud（观众）等；</p></li><li><p>2.Public claims: 自定义claims，注意不要和JWT注册表中属性冲突，这里可以查看JWT注册表；</p></li><li><p>3.Private claims: 这些是自定义的claims，用于在同意使用这些claims的各方之间共享信息，<br>它们既不是Registered claims，也不是Public claims。</p></li><li><p>以下是payload示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，再经过Base64Url编码，形成JWT的第二部分。</p></li><li><p>注意<br>对于签名令牌，此信息虽然可以防止篡改，但任何人都可以读取。除非加密，<br>否则不要将敏感信息放入到Payload或Header元素中。</p></li></ul><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>要创建签名部分，必须采用编码的Header，编码的Payload，秘钥，Header中指定的算法，并对其进行签名。<br>例如，如果要使用HMAC SHA256算法，将按以下方式创建签名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>签名用于验证消息在此过程中未被篡改，并且，在使用私钥签名令牌的情况下，<br>它还可以验证JWT的请求方是否是它所声明的请求方。输出是三个由点分隔的<br>Base64-URL字符串，可以在HTML和HTTP环境中轻松传递，与SAML等基于XML<br>的标准相比更加紧凑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</span><br><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.</span><br><span class="line">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><h2 id="jwt存储方式"><a href="#jwt存储方式" class="headerlink" title="jwt存储方式"></a>jwt存储方式</h2><h3 id="localStorage-sessionStorage存储"><a href="#localStorage-sessionStorage存储" class="headerlink" title="localStorage/sessionStorage存储"></a>localStorage/sessionStorage存储</h3><p>响应正文将包含JWT作为一个访问令牌:</p><ul><li><p>后台api</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line"> </span><br><span class="line">  &#123;</span><br><span class="line">  &quot;access_token&quot;: &quot;eyJhbGciOiJIUzI1NiIsI.eyJpc3MiOiJodHRwczotcGxlL.mFrs3Zo8eaSNcxiNfvRh9dqKP4F1cB&quot;,</span><br><span class="line">  &quot;expires_in&quot;:3600</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>在客户端，你可以将这个令牌存储在HTML5 Web存储中(假设我们有一个成功的回调函数)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function tokenSuccess(err, response) &#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        throw err;</span><br><span class="line">    &#125;</span><br><span class="line">    $window.sessionStorage.accessToken &#x3D; response.body.access_token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>回传访问令牌到你受保护的API，你将使用HTTP Authorization Header和Bearer组合。请求你的SPA将会像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;xxx</span><br><span class="line">Host: xxx.com</span><br><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiIsI.</span><br><span class="line">eyJpc3MiOiJodHRwczotcGxlL.</span><br><span class="line">mFrs3Zo8eaSNcxiNfvRh9dqKP4F1cB</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>如果在Authorization header中发送令牌，则跨域资源共享（CORS）将不会成为问题，因为它不使用cookie，<br>这样可以用jwt做简单的单点登录，分离出登录系统做sso。</p></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>xss攻击<br>Web存储(localStorage/sessionStorage)可以通过同一域上JavaScript访问。<br>这意味着任何在你的网站上运行的JavaScript都可以访问Web存储，因为这样容易<br>受到跨站点脚本（XSS）攻击。(最好确定用https发送jwt)</li></ul><h3 id="cookie存储"><a href="#cookie存储" class="headerlink" title="cookie存储"></a>cookie存储</h3><ul><li>后端通过response.set_cookie进行设置</li><li>回传访问令牌到你同一领域受保护的API，浏览器将自动包括cookie的值。请求你受保护的API将类似于:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;xxx</span><br><span class="line">Host: xxx.com</span><br><span class="line">Cookie: access_token&#x3D;eyJhbGciOiJIUzI1NiIsI.</span><br><span class="line">eyJpc3MiOiJodHRwczotcGxlL.</span><br><span class="line">mFrs3Zo8eaSNcxiNfvRh9dqKP4F1cB;</span><br></pre></td></tr></table></figure><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4>Cookies，当使用带有HttpOnly的cookie标志时，通过<br>JavaScript是无法访问的，并且对XSS是免疫的。你还可<br>以设置安全的cookie标志来保证cokie仅通过HTTPS发送。<br>这是过去利用cookie存储令牌或会话数据的主要原因之一。<br>现代开发人员不愿使用cookie,因为它们通常要求状态被存<br>储在服务器上,从而打破RESTful的最佳实践。如果你在cookie<br>上存储JWT，cookie作为存储机制不用将状态存储在服务器上。<br>这是因为JWT封装了所有服务器需要服务的请求。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>csrf攻击<br>cookies容易受到不同类型的攻击：跨站点请求伪造(CSRF)。</li><li>解决设置cookie同源、同域、path等</li></ul><h2 id="jwt的缺点"><a href="#jwt的缺点" class="headerlink" title="jwt的缺点"></a>jwt的缺点</h2><h3 id="无法满足注销场景"><a href="#无法满足注销场景" class="headerlink" title="无法满足注销场景"></a>无法满足注销场景</h3><p>传统注销清空session即可，因为服务端保存状态。而jwt是无状态的，一旦被生成<br>在过期时间没到之前都是可用的，虽然注销后可以删除cookie中的jwt，但不代表这个<br>jwt不可用。</p><h3 id="无法满足修改密码场景"><a href="#无法满足修改密码场景" class="headerlink" title="无法满足修改密码场景"></a>无法满足修改密码场景</h3><p>修改密码后，盗号者在原jwt有效期内还是可以使用，如果你没有把password加入jwt（应该都不会把）。</p><h3 id="无法满足token续签场景"><a href="#无法满足token续签场景" class="headerlink" title="无法满足token续签场景"></a>无法满足token续签场景</h3><p>jwt严格定义过期时间，一旦生成，就无法续签延时。</p><h2 id="django-flask实操jwt登录"><a href="#django-flask实操jwt登录" class="headerlink" title="django/flask实操jwt登录"></a>django/flask实操jwt登录</h2><p>以django为例的jwt使用</p><h3 id="大致流程概述"><a href="#大致流程概述" class="headerlink" title="大致流程概述"></a>大致流程概述</h3><p>这里其实可以自己手动定制一个简单的jwt，并不复杂，但没必要-vvvvvv-嘿嘿，但还是可以，但……。</p><ul><li>1.生成payload里面带有user_id,exp(过期时间),username,email,aud,iat(issued at)甚至可以带权限</li><li>2.调准过期时间，payload用json.dumps编码为字符，并encode为二进制。</li><li>3.分别对payload，header(也需要dumps、encode一下下)（在setting中配置）进行base64编码</li><li>4.通过header中的algorithm拿到算法，获取secretkey（alg.prepare_key(key)）<br>再获取signature：alg.sign(signing_input, secretkey)</li><li>5.对signature进行base64，然后把三个段结合在一起。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#默认自带算法</span><br><span class="line">&#39;none&#39;: NoneAlgorithm(),</span><br><span class="line">&#39;HS256&#39;: HMACAlgorithm(HMACAlgorithm.SHA256),</span><br><span class="line">&#39;HS384&#39;: HMACAlgorithm(HMACAlgorithm.SHA384),</span><br><span class="line">&#39;HS512&#39;: HMACAlgorithm(HMACAlgorithm.SHA512)</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装和简单使用"><a href="#安装和简单使用" class="headerlink" title="安装和简单使用"></a>安装和简单使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span><br><span class="line">pip install django-cors-header</span><br><span class="line">from rest_framework_jwt.serializers import jwt_encode_handler, jwt_payload_handler</span><br><span class="line">from rest_framework_jwt.authentication import JSONWebTokenAuthentication</span><br><span class="line"># 伪代码</span><br><span class="line">def create(self, request, *args, **kwargs):</span><br><span class="line">    serializer &#x3D; self.get_serializer(data&#x3D;request.data)</span><br><span class="line">    serializer.is_valid(raise_exception&#x3D;True)</span><br><span class="line">    user &#x3D; self.perform_create(serializer)</span><br><span class="line">    # token和payload的生成</span><br><span class="line">    re_dict &#x3D; serializer.data</span><br><span class="line">    payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">    print(request.auth)</span><br><span class="line">    re_dict[&#39;token&#39;] &#x3D; jwt_encode_handler(payload)</span><br><span class="line">    re_dict[&#39;name&#39;] &#x3D; user.name if user.name else user.username</span><br><span class="line">    headers &#x3D; self.get_success_headers(serializer.data)</span><br><span class="line">    return Response(re_dict, status&#x3D;status.HTTP_201_CREATED, headers&#x3D;headers)</span><br></pre></td></tr></table></figure><h3 id="jwt-payload-handler生成payload"><a href="#jwt-payload-handler生成payload" class="headerlink" title="jwt_payload_handler生成payload"></a>jwt_payload_handler生成payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">注意这里payload的信息</span><br><span class="line">def jwt_payload_handler(user):</span><br><span class="line">    username_field &#x3D; get_username_field()</span><br><span class="line">    username &#x3D; get_username(user)</span><br><span class="line">    warnings.warn(</span><br><span class="line">        &#39;The following fields will be removed in the future: &#39;</span><br><span class="line">        &#39;&#96;email&#96; and &#96;user_id&#96;. &#39;,</span><br><span class="line">        DeprecationWarning</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    payload &#x3D; &#123;</span><br><span class="line">        &#39;user_id&#39;: user.pk,</span><br><span class="line">        &#39;username&#39;: username,</span><br><span class="line">        &#39;exp&#39;: datetime.utcnow() + api_settings.JWT_EXPIRATION_DELTA</span><br><span class="line">    &#125;</span><br><span class="line">    if hasattr(user, &#39;email&#39;):</span><br><span class="line">        payload[&#39;email&#39;] &#x3D; user.email</span><br><span class="line">    if isinstance(user.pk, uuid.UUID):</span><br><span class="line">        payload[&#39;user_id&#39;] &#x3D; str(user.pk)</span><br><span class="line"></span><br><span class="line">    payload[username_field] &#x3D; username</span><br><span class="line"></span><br><span class="line">    # Include original issued at time for a brand new token,</span><br><span class="line">    # to allow token refresh</span><br><span class="line">    if api_settings.JWT_ALLOW_REFRESH:</span><br><span class="line">        payload[&#39;orig_iat&#39;] &#x3D; timegm(</span><br><span class="line">            datetime.utcnow().utctimetuple()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    if api_settings.JWT_AUDIENCE is not None:</span><br><span class="line">        payload[&#39;aud&#39;] &#x3D; api_settings.JWT_AUDIENCE</span><br><span class="line"></span><br><span class="line">    if api_settings.JWT_ISSUER is not None:</span><br><span class="line">        payload[&#39;iss&#39;] &#x3D; api_settings.JWT_ISSUER</span><br><span class="line"></span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure><h3 id="jwt-encode-handler获取jwt-token"><a href="#jwt-encode-handler获取jwt-token" class="headerlink" title="jwt_encode_handler获取jwt_token"></a>jwt_encode_handler获取jwt_token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">def jwt_encode_handler(payload):</span><br><span class="line">    key &#x3D; api_settings.JWT_PRIVATE_KEY or jwt_get_secret_key(payload)</span><br><span class="line">    return jwt.encode(</span><br><span class="line">        payload,</span><br><span class="line">        key,</span><br><span class="line">        api_settings.JWT_ALGORITHM</span><br><span class="line">    ).decode(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line"># jwt.encode 主要设置jwt本地过期时间、编码payload</span><br><span class="line">def encode(self,</span><br><span class="line">           payload,  # type: Union[Dict, bytes]</span><br><span class="line">           key,  # type: str</span><br><span class="line">           algorithm&#x3D;&#39;HS256&#39;,  # type: str</span><br><span class="line">           headers&#x3D;None,  # type: Optional[Dict]</span><br><span class="line">           json_encoder&#x3D;None  # type: Optional[Callable]</span><br><span class="line">           ):</span><br><span class="line">    # Check that we get a mapping</span><br><span class="line">    if not isinstance(payload, Mapping):</span><br><span class="line">        raise TypeError(&#39;Expecting a mapping object, as JWT only supports &#39;</span><br><span class="line">                        &#39;JSON objects as payloads.&#39;)</span><br><span class="line"></span><br><span class="line">    # Payload</span><br><span class="line">    for time_claim in [&#39;exp&#39;, &#39;iat&#39;, &#39;nbf&#39;]:</span><br><span class="line">        # Convert datetime to a intDate value in known time-format claims</span><br><span class="line">        if isinstance(payload.get(time_claim), datetime):</span><br><span class="line">            payload[time_claim] &#x3D; timegm(payload[time_claim].utctimetuple())  # type: ignore</span><br><span class="line"></span><br><span class="line">    json_payload &#x3D; json.dumps(</span><br><span class="line">        payload,</span><br><span class="line">        separators&#x3D;(&#39;,&#39;, &#39;:&#39;),</span><br><span class="line">        cls&#x3D;json_encoder</span><br><span class="line">    ).encode(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">    return super(PyJWT, self).encode(</span><br><span class="line">        json_payload, key, algorithm, headers, json_encoder</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"># super(PyJWT, self).encode(</span><br><span class="line">            json_payload, key, algorithm, headers, json_encoder</span><br><span class="line">        ) # 获取jwt_token</span><br><span class="line">    def encode(self,</span><br><span class="line">               payload,  # type: Union[Dict, bytes]</span><br><span class="line">               key,  # type: str</span><br><span class="line">               algorithm&#x3D;&#39;HS256&#39;,  # type: str</span><br><span class="line">               headers&#x3D;None,  # type: Optional[Dict]</span><br><span class="line">               json_encoder&#x3D;None  # type: Optional[Callable]</span><br><span class="line">               ):</span><br><span class="line">        segments &#x3D; []</span><br><span class="line"></span><br><span class="line">        if algorithm is None:</span><br><span class="line">            algorithm &#x3D; &#39;none&#39;</span><br><span class="line"></span><br><span class="line">        if algorithm not in self._valid_algs:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">        # Header</span><br><span class="line">        header &#x3D; &#123;&#39;typ&#39;: self.header_typ, &#39;alg&#39;: algorithm&#125;</span><br><span class="line"></span><br><span class="line">        if headers:</span><br><span class="line">            self._validate_headers(headers)</span><br><span class="line">            header.update(headers)</span><br><span class="line"></span><br><span class="line">        json_header &#x3D; force_bytes(</span><br><span class="line">            json.dumps(</span><br><span class="line">                header,</span><br><span class="line">                separators&#x3D;(&#39;,&#39;, &#39;:&#39;),</span><br><span class="line">                cls&#x3D;json_encoder</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        segments.append(base64url_encode(json_header))</span><br><span class="line">        segments.append(base64url_encode(payload))</span><br><span class="line"></span><br><span class="line">        # Segments</span><br><span class="line">        signing_input &#x3D; b&#39;.&#39;.join(segments)</span><br><span class="line">        try:</span><br><span class="line">            alg_obj &#x3D; self._algorithms[algorithm]</span><br><span class="line">            key &#x3D; alg_obj.prepare_key(key)</span><br><span class="line">            signature &#x3D; alg_obj.sign(signing_input, key)</span><br><span class="line"></span><br><span class="line">        except KeyError:</span><br><span class="line">            if not has_crypto and algorithm in requires_cryptography:</span><br><span class="line">                raise NotImplementedError(</span><br><span class="line">                    &quot;Algorithm &#39;%s&#39; could not be found. Do you have cryptography &quot;</span><br><span class="line">                    &quot;installed?&quot; % algorithm</span><br><span class="line">                )</span><br><span class="line">            else:</span><br><span class="line">                raise NotImplementedError(&#39;Algorithm not supported&#39;)</span><br><span class="line"></span><br><span class="line">        segments.append(base64url_encode(signature))</span><br><span class="line"></span><br><span class="line">        return b&#39;.&#39;.join(segments)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JWT是一个含签名并携带用户相关信息的加密串，页面请求校验登录接口时，&lt;br&gt;请求头中携带JWT串到后端服务，后端通过签名加密串匹配校验，保</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    
  </entry>
  
  <entry>
    <title>单点登录</title>
    <link href="http://example.com/2021/06/09/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    <id>http://example.com/2021/06/09/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</id>
    <published>2021-06-09T02:24:41.638Z</published>
    <updated>2021-06-09T07:29:55.171Z</updated>
    
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask-sqlaAchemy/"/>
    <id>http://example.com/2021/06/08/flask-sqlaAchemy/</id>
    <published>2021-06-08T03:54:22.148Z</published>
    <updated>2021-06-08T03:54:22.148Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask-wtforms/"/>
    <id>http://example.com/2021/06/08/flask-wtforms/</id>
    <published>2021-06-08T03:53:04.318Z</published>
    <updated>2021-06-08T03:53:22.586Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2021/06/08/flask%E6%8F%92%E4%BB%B6/</id>
    <published>2021-06-08T03:53:04.318Z</published>
    <updated>2021-06-08T03:53:04.318Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    <id>http://example.com/2021/06/08/flask%E4%BF%A1%E5%8F%B7%E9%87%8F/</id>
    <published>2021-06-08T03:52:04.484Z</published>
    <updated>2021-06-08T03:52:04.484Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2021/06/08/flask%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-06-08T03:51:10.215Z</published>
    <updated>2021-06-08T03:51:10.215Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2021/06/08/flask%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/</id>
    <published>2021-06-08T03:47:47.114Z</published>
    <updated>2021-06-08T03:47:47.114Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask%E5%A4%9Aapp/"/>
    <id>http://example.com/2021/06/08/flask%E5%A4%9Aapp/</id>
    <published>2021-06-08T03:47:47.114Z</published>
    <updated>2021-06-08T03:50:16.430Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask%E8%93%9D%E5%9B%BE/"/>
    <id>http://example.com/2021/06/08/flask%E8%93%9D%E5%9B%BE/</id>
    <published>2021-06-08T03:47:47.114Z</published>
    <updated>2021-06-08T03:49:52.396Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/flask%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2021/06/08/flask%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-06-08T03:46:55.902Z</published>
    <updated>2021-06-08T03:46:55.902Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>flask和django比较</title>
    <link href="http://example.com/2021/06/08/flask%E4%B8%8Edjango%E6%AF%94%E8%BE%83/"/>
    <id>http://example.com/2021/06/08/flask%E4%B8%8Edjango%E6%AF%94%E8%BE%83/</id>
    <published>2021-06-08T03:43:05.090Z</published>
    <updated>2021-06-08T06:45:41.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整体设计架构"><a href="#整体设计架构" class="headerlink" title="整体设计架构"></a>整体设计架构</h2><ul><li><p>flask<br>只提供核心的一小部分功能，其它的功能由它的插件进行扩充，由bluepoint实现水平扩展<br>flask需要自己去diy，比如整体架构的设计、sql使用哪一种、登录认证怎么写、缓存。</p></li><li><p>django<br>大而全，从app划分，到session、authenticate、orm、后台管理系统都已经做好了模板，提供的很全面</p></li></ul><h2 id="路由系统"><a href="#路由系统" class="headerlink" title="路由系统"></a>路由系统</h2><ul><li><p>flask<br>路由系统使用装饰器进行路由注册，也可以通过add_url_rule实现类似django的解耦方式，但较常用的<br>还是装饰器的方式。</p></li><li><p>django<br>Django的路由设计是采用集中处理的方法，利用正则匹配，这种方式再架构上比较清晰，方便查找，比较适合<br>大项目多接口的那种-v-。</p></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><p>flask<br>多种配置方式</p><ul><li><p>1.单个配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask.config[‘xxx’] &#x3D; xxx</span><br></pre></td></tr></table></figure></li><li><p>2.可以像django一样文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG &#x3D; True</span><br><span class="line">TESTING &#x3D; True</span><br><span class="line">DATABASE_URI&#x3D;&#39;127.0.0.1:XXX&#39;</span><br><span class="line">flask.config.from_pyfile(‘某个文件setting’)</span><br></pre></td></tr></table></figure></li><li><p>3.类配置 生产环境一套、debug一套。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Config:</span><br><span class="line">    DEBUG &#x3D; False</span><br><span class="line">    TESTING &#x3D; False</span><br><span class="line">    DATABASE_URI &#x3D; &#39;127.0.0.1:XXX&#39;</span><br><span class="line"></span><br><span class="line">class ProductionConfig(Config):</span><br><span class="line">    DATABASE_URI &#x3D; &#39;127.0.0.1:XXX&#39;</span><br><span class="line"></span><br><span class="line">class TestingConfig(Config):</span><br><span class="line">    DEBUG &#x3D; True</span><br><span class="line">    TESTING &#x3D; True</span><br><span class="line">    DATABASE_URI &#x3D; &#39;127.0.0.1:XXX&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>django<br>通过setting进行配置，也可以把setting分成pro、dev的多个文件。</p></li></ul><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><ul><li><p>flask<br>起步比较晚，插件相对较少，但质量还是很高，然后是flask网上关于某些问题的<br>解决方案并不是很全，所以对于某些问题可能需要自己思考解决，或提出新的问题<br>到社区</p></li><li><p>django<br>社区比较完善成熟，大部分问题都可以通过社区得到解决</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;整体设计架构&quot;&gt;&lt;a href=&quot;#整体设计架构&quot; class=&quot;headerlink&quot; title=&quot;整体设计架构&quot;&gt;&lt;/a&gt;整体设计架构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;flask&lt;br&gt;只提供核心的一小部分功能，其它的功能由它的插件进行扩充，由bluepoi</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="flask" scheme="http://example.com/categories/webframe/flask/"/>
    
    
  </entry>
  
  <entry>
    <title>flask基本介绍</title>
    <link href="http://example.com/2021/06/08/flask%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2021/06/08/flask%E7%AE%80%E4%BB%8B/</id>
    <published>2021-06-08T03:43:05.090Z</published>
    <updated>2021-06-09T03:39:53.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ul><li><p>1.单个配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask.config[‘xxx’] &#x3D; xxx</span><br></pre></td></tr></table></figure></li><li><p>2.可以像django一样文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG &#x3D; True</span><br><span class="line">TESTING &#x3D; True</span><br><span class="line">DATABASE_URI&#x3D;&#39;127.0.0.1:XXX&#39;</span><br><span class="line">flask.config.from_pyfile(‘某个文件setting’)</span><br></pre></td></tr></table></figure></li><li><p>3.类配置 生产环境一套、debug一套。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Config:</span><br><span class="line">    DEBUG &#x3D; False</span><br><span class="line">    TESTING &#x3D; False</span><br><span class="line">    DATABASE_URI &#x3D; &#39;127.0.0.1:XXX&#39;</span><br><span class="line"></span><br><span class="line">class ProductionConfig(Config):</span><br><span class="line">    DATABASE_URI &#x3D; &#39;127.0.0.1:XXX&#39;</span><br><span class="line"></span><br><span class="line">class TestingConfig(Config):</span><br><span class="line">    DEBUG &#x3D; True</span><br><span class="line">    TESTING &#x3D; True</span><br><span class="line">    DATABASE_URI &#x3D; &#39;127.0.0.1:XXX&#39;</span><br></pre></td></tr></table></figure></li></ul><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><p>就是一个字典结构，初始化加载了defaults，即Flask中的defaults</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">class Config(dict):</span><br><span class="line">    def __init__(self, root_path, defaults&#x3D;None):</span><br><span class="line">        dict.__init__(self, defaults or &#123;&#125;)</span><br><span class="line">        self.root_path &#x3D; root_path</span><br><span class="line"></span><br><span class="line">    def from_envvar(self, variable_name, silent&#x3D;False):</span><br><span class="line">        rv &#x3D; os.environ.get(variable_name)</span><br><span class="line">        if not rv:</span><br><span class="line">            if silent:</span><br><span class="line">                return False</span><br><span class="line">            raise RuntimeError(</span><br><span class="line">                &quot;The environment variable %r is not set &quot;</span><br><span class="line">                &quot;and as such configuration could not be &quot;</span><br><span class="line">                &quot;loaded.  Set this variable and make it &quot;</span><br><span class="line">                &quot;point to a configuration file&quot; % variable_name</span><br><span class="line">            )</span><br><span class="line">        return self.from_pyfile(rv, silent&#x3D;silent)</span><br><span class="line"></span><br><span class="line">    def from_pyfile(self, filename, silent&#x3D;False):</span><br><span class="line">        filename &#x3D; os.path.join(self.root_path, filename)</span><br><span class="line">        d &#x3D; types.ModuleType(&quot;config&quot;)</span><br><span class="line">        d.__file__ &#x3D; filename</span><br><span class="line">        try:</span><br><span class="line">            with open(filename, mode&#x3D;&quot;rb&quot;) as config_file:</span><br><span class="line">                exec(compile(config_file.read(), filename, &quot;exec&quot;), d.__dict__)</span><br><span class="line">        except IOError as e:</span><br><span class="line">            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):</span><br><span class="line">                return False</span><br><span class="line">            e.strerror &#x3D; &quot;Unable to load configuration file (%s)&quot; % e.strerror</span><br><span class="line">            raise</span><br><span class="line">        self.from_object(d)</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">    def from_object(self, obj):</span><br><span class="line">        if isinstance(obj, string_types):</span><br><span class="line">            obj &#x3D; import_string(obj)</span><br><span class="line">        for key in dir(obj):</span><br><span class="line">            if key.isupper():</span><br><span class="line">                self[key] &#x3D; getattr(obj, key)</span><br><span class="line"></span><br><span class="line">    def from_json(self, filename, silent&#x3D;False):</span><br><span class="line">        filename &#x3D; os.path.join(self.root_path, filename)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            with open(filename) as json_file:</span><br><span class="line">                obj &#x3D; json.loads(json_file.read())</span><br><span class="line">        except IOError as e:</span><br><span class="line">            if silent and e.errno in (errno.ENOENT, errno.EISDIR):</span><br><span class="line">                return False</span><br><span class="line">            e.strerror &#x3D; &quot;Unable to load configuration file (%s)&quot; % e.strerror</span><br><span class="line">            raise</span><br><span class="line">        return self.from_mapping(obj)</span><br><span class="line"></span><br><span class="line">    def from_mapping(self, *mapping, **kwargs):</span><br><span class="line">        rv &#x3D; &#123;&#125;</span><br><span class="line">        for k, v in iteritems(self):</span><br><span class="line">            if not k.startswith(namespace):</span><br><span class="line">                continue</span><br><span class="line">            if trim_namespace:</span><br><span class="line">                key &#x3D; k[len(namespace) :]</span><br><span class="line">            else:</span><br><span class="line">                key &#x3D; k</span><br><span class="line">            if lowercase:</span><br><span class="line">                key &#x3D; key.lower()</span><br><span class="line">            rv[key] &#x3D; v</span><br><span class="line">        return rv</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;%s %s&gt;&quot; % (self.__class__.__name__, dict.__repr__(self))</span><br></pre></td></tr></table></figure><h2 id="路由route"><a href="#路由route" class="headerlink" title="路由route"></a>路由route</h2><h3 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h3><h4 id="普通匹配模式及其传参方法"><a href="#普通匹配模式及其传参方法" class="headerlink" title="普通匹配模式及其传参方法"></a>普通匹配模式及其传参方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@app.route(‘&#x2F;&lt;username&gt;’)  字符串</span><br><span class="line">@app.route(‘&#x2F;&lt;int:post_id&gt;’) 整数</span><br><span class="line">@app.route(‘&#x2F;&lt;float:price&gt;’)  </span><br><span class="line">@app.route(‘&#x2F;&lt;path:path&gt;’)  url路径</span><br><span class="line"></span><br><span class="line"># 路径匹配其实使用了正则贪婪匹配，要注意必须在视图函数的参数中输入对应个数的参数</span><br><span class="line">@app.route(&#39;&#x2F;&lt;name&gt;|&lt;int:id&gt;|&lt;path:asf&gt;&#39;, methods&#x3D;[&#39;get&#39;, &#39;post&#39;])</span><br><span class="line">def index(name, id, asf):</span><br><span class="line">    print(name, id, type(id), type(name), asf)</span><br><span class="line">    return &quot;fafafasa&quot;</span><br><span class="line"># 中件用分隔符或者自定义一个隔离符号</span><br></pre></td></tr></table></figure><h4 id="通过？匹配"><a href="#通过？匹配" class="headerlink" title="通过？匹配"></a>通过？匹配</h4><p>即最常见的路由匹配方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;user&#x2F;?a&#x3D;1&amp;b&#x3D;2&amp;c&#x3D;3</span><br><span class="line">参数放进了flask.request中为字典类型</span><br><span class="line">request.args request.data</span><br></pre></td></tr></table></figure><h3 id="自定义匹配模式（正则）"><a href="#自定义匹配模式（正则）" class="headerlink" title="自定义匹配模式（正则）"></a>自定义匹配模式（正则）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from flask import url_for</span><br><span class="line">from werkzeug.routing import BaseConverter</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">class RegexConverter(BaseConverter):</span><br><span class="line">    def __init__(self, map, regex):</span><br><span class="line">        super(RegexConverter, self).__init__(map)</span><br><span class="line">        self.re &#x3D; re.compile(regex)</span><br><span class="line"></span><br><span class="line">    # 路由匹配成功，在传入视图之前进行一次校验，改变数据类型为想要的类型</span><br><span class="line">    def to_python(self, value):</span><br><span class="line">        tmp &#x3D; self.re.search(value)</span><br><span class="line">        if tmp:</span><br><span class="line">            return tmp.group()</span><br><span class="line">        return tmp</span><br><span class="line"></span><br><span class="line">    # 使用url反向生成url时传递参数经过该方法处理，返回值用于生成url中的参数</span><br><span class="line">    def to_url(self, value):</span><br><span class="line">        val &#x3D; super(RegexConverter, self).to_url(value)</span><br><span class="line">        return val</span><br><span class="line">app.url_map.converters[&#39;regex&#39;] &#x3D; RegexConverter</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;index&#x2F;&lt;regex(&quot;\w+&quot;):nid&gt;&#39;)</span><br><span class="line">def index(nid):</span><br><span class="line">    print(nid)</span><br><span class="line">    url_for(&#39;index&#39;, nid&#x3D;89)</span><br><span class="line">    return &#39;index&#39;</span><br></pre></td></tr></table></figure><h3 id="详解各参数作用"><a href="#详解各参数作用" class="headerlink" title="详解各参数作用"></a>详解各参数作用</h3><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>基于装饰器形式展现本质上还是add_url_route,和django有所区别(本质还是一样)。</p><h4 id="装饰器的route"><a href="#装饰器的route" class="headerlink" title="装饰器的route"></a>装饰器的route</h4><ul><li><p>1.route()调用<br>第一步返回一个装饰器decorator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def route(self, rule, **options):</span><br><span class="line">    def decorator(f):</span><br><span class="line">        endpoint &#x3D; options.pop(&quot;endpoint&quot;, None)</span><br><span class="line">        self.add_url_rule(rule, endpoint, f, **options)</span><br><span class="line">        return f</span><br><span class="line">    return decorator</span><br></pre></td></tr></table></figure></li><li><p>2.decorator(func)<br>第二步@decorator 执行decorator函数，关键函数<br>其中执行了self.add_url_rule(rule, endpoint, f, **options)<br>把路由和执行函数和别名加到了一个路由关系对应表</p></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>1.添加路由的本质就是执行add_url_rule</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def login():</span><br><span class="line">    pass</span><br><span class="line">app.add_url_rule(&#39;&#x2F;login&#39;, &#39;n2&#39;,  login, methods&#x3D;[&#39;get&#39;, &#39;post&#39;])</span><br></pre></td></tr></table></figure></li><li><p>2.如果end_point是空的，就把view_func的名字赋给end_point</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@setupmethod</span><br><span class="line">def add_url_rule(</span><br><span class="line">    self,</span><br><span class="line">    rule,</span><br><span class="line">    endpoint&#x3D;None,</span><br><span class="line">    view_func&#x3D;None,</span><br><span class="line">    provide_automatic_options&#x3D;None,</span><br><span class="line">    **options</span><br><span class="line">):</span><br><span class="line">    if endpoint is None:</span><br><span class="line">        endpoint &#x3D; _endpoint_from_view_func(view_func)</span><br><span class="line">    options[&quot;endpoint&quot;] &#x3D; endpoint</span><br></pre></td></tr></table></figure></li></ul><h4 id="生成rule"><a href="#生成rule" class="headerlink" title="生成rule"></a>生成rule</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">rule &#x3D; self.url_rule_class(rule, methods&#x3D;methods, **options)</span><br><span class="line">rule.provide_automatic_options &#x3D; provide_automatic_options</span><br><span class="line"></span><br><span class="line"># Rule</span><br><span class="line">@implements_to_string</span><br><span class="line">class Rule(RuleFactory):</span><br><span class="line">    def __init__(</span><br><span class="line">        self,</span><br><span class="line">        string,</span><br><span class="line">        defaults&#x3D;None,</span><br><span class="line">        subdomain&#x3D;None,</span><br><span class="line">        methods&#x3D;None,</span><br><span class="line">        build_only&#x3D;False,</span><br><span class="line">        endpoint&#x3D;None,</span><br><span class="line">        strict_slashes&#x3D;None,</span><br><span class="line">        merge_slashes&#x3D;None,</span><br><span class="line">        redirect_to&#x3D;None,</span><br><span class="line">        alias&#x3D;False,</span><br><span class="line">        host&#x3D;None,</span><br><span class="line">        websocket&#x3D;False,</span><br><span class="line">    ):</span><br><span class="line">        if not string.startswith(&quot;&#x2F;&quot;):</span><br><span class="line">            raise ValueError(&quot;urls must start with a leading slash&quot;)</span><br><span class="line">        self.rule &#x3D; string</span><br><span class="line">        self.is_leaf &#x3D; not string.endswith(&quot;&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">        self.map &#x3D; None</span><br><span class="line">        self.strict_slashes &#x3D; strict_slashes</span><br><span class="line">        self.merge_slashes &#x3D; merge_slashes</span><br><span class="line">        self.subdomain &#x3D; subdomain</span><br><span class="line">        self.host &#x3D; host</span><br><span class="line">        self.defaults &#x3D; defaults</span><br><span class="line">        self.build_only &#x3D; build_only</span><br><span class="line">        self.alias &#x3D; alias</span><br><span class="line">        self.websocket &#x3D; websocket</span><br><span class="line"></span><br><span class="line">        if methods is not None:</span><br><span class="line">            if isinstance(methods, str):</span><br><span class="line">                raise TypeError(&quot;&#39;methods&#39; should be a list of strings.&quot;)</span><br><span class="line"></span><br><span class="line">            methods &#x3D; &#123;x.upper() for x in methods&#125;</span><br><span class="line"></span><br><span class="line">            if &quot;HEAD&quot; not in methods and &quot;GET&quot; in methods:</span><br><span class="line">                methods.add(&quot;HEAD&quot;)</span><br><span class="line"></span><br><span class="line">            if websocket and methods - &#123;&quot;GET&quot;, &quot;HEAD&quot;, &quot;OPTIONS&quot;&#125;:</span><br><span class="line">                raise ValueError(</span><br><span class="line">                    &quot;WebSocket rules can only use &#39;GET&#39;, &#39;HEAD&#39;, and &#39;OPTIONS&#39; methods.&quot;</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        self.methods &#x3D; methods</span><br><span class="line">        self.endpoint &#x3D; endpoint</span><br><span class="line">        self.redirect_to &#x3D; redirect_to</span><br><span class="line"></span><br><span class="line">        if defaults:</span><br><span class="line">            self.arguments &#x3D; set(map(str, defaults))</span><br><span class="line">        else:</span><br><span class="line">            self.arguments &#x3D; set()</span><br><span class="line">        self._trace &#x3D; self._converters &#x3D; self._regex &#x3D; self._argument_weights &#x3D; None</span><br></pre></td></tr></table></figure><h4 id="rule参数解析"><a href="#rule参数解析" class="headerlink" title="rule参数解析"></a>rule参数解析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1.defaults&#x3D;None </span><br><span class="line">&#123;‘Start_Time’:’2020-10-01’&#125;默认参数</span><br><span class="line">默认传default</span><br><span class="line"></span><br><span class="line">2.strict_slashes&#x3D;None </span><br><span class="line">False&#x2F;True 严格斜杠</span><br><span class="line">如果为True严格控制,有slash就访问不到或者访问得到</span><br><span class="line"></span><br><span class="line">3.redirect_to&#x3D;None </span><br><span class="line">定义之后直接重定向，重定向指定地址</span><br><span class="line">@app.route(&#39;&#x2F;index2&#39;, methods&#x3D;[&#39;get&#39;, &#39;post&#39;], endpoint&#x3D;&#39;n3&#39;, defaults&#x3D;&#123;&quot;nid&quot;: 888&#125;, redirect_to&#x3D;&#39;&#x2F;index3&#39;)</span><br><span class="line">def index2(nid):</span><br><span class="line">    print(nid)</span><br><span class="line">    return &quot;公司首页&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;index3&#39;, methods&#x3D;[&#39;get&#39;, &#39;post&#39;], endpoint&#x3D;&#39;n4&#39;, defaults&#x3D;&#123;&quot;nid&quot;: 888&#125;)</span><br><span class="line">def index2(nid):</span><br><span class="line">    print(nid)</span><br><span class="line">    return &quot;公司新首页&quot;</span><br><span class="line"></span><br><span class="line">4.subdomain&#x3D;None </span><br><span class="line">子域名访问 需修改hosts</span><br><span class="line">www.oldboyedu.com</span><br><span class="line">car.oldboyedu.com</span><br><span class="line">admin.oldboy.com</span><br><span class="line"></span><br><span class="line"># 子域名模式访问（比如你的域名设置了多个解析）</span><br><span class="line">app.config[&#39;SERVER_NAME&#39;] &#x3D; &#39;axiba.com:5000&#39;</span><br><span class="line">@app.route(&#39;&#x2F;12&#39;, methods&#x3D;[&#39;get&#39;, &#39;post&#39;], endpoint&#x3D;&#39;n5&#39;, subdomain&#x3D;&quot;admin&quot;)</span><br><span class="line">def static_index():</span><br><span class="line">    return &quot;static.your-domain.tid&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;dynamic&#39;, methods&#x3D;[&#39;get&#39;, &#39;post&#39;], endpoint&#x3D;&#39;n6&#39;, subdomain&#x3D;&quot;&lt;username&gt;&quot;)</span><br><span class="line">def static_index(username):</span><br><span class="line">    return username + &quot;.your-domain.tid&quot;</span><br></pre></td></tr></table></figure><h4 id="url加入url-map"><a href="#url加入url-map" class="headerlink" title="url加入url_map"></a>url加入url_map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">self.url_map.add(rule)</span><br><span class="line"># url_map</span><br><span class="line">class Map(object):</span><br><span class="line">    default_converters &#x3D; ImmutableDict(DEFAULT_CONVERTERS)</span><br><span class="line">    lock_class &#x3D; Lock</span><br><span class="line">    def __init__(</span><br><span class="line">        self,</span><br><span class="line">        rules&#x3D;None,</span><br><span class="line">        default_subdomain&#x3D;&quot;&quot;,</span><br><span class="line">        charset&#x3D;&quot;utf-8&quot;,</span><br><span class="line">        strict_slashes&#x3D;True,</span><br><span class="line">        merge_slashes&#x3D;True,</span><br><span class="line">        redirect_defaults&#x3D;True,</span><br><span class="line">        converters&#x3D;None,</span><br><span class="line">        sort_parameters&#x3D;False,</span><br><span class="line">        sort_key&#x3D;None,</span><br><span class="line">        encoding_errors&#x3D;&quot;replace&quot;,</span><br><span class="line">        host_matching&#x3D;False,</span><br><span class="line">    ):</span><br><span class="line">        self._rules &#x3D; []</span><br><span class="line">        self._rules_by_endpoint &#x3D; &#123;&#125;</span><br><span class="line">        self._remap &#x3D; True</span><br><span class="line">        self._remap_lock &#x3D; self.lock_class()</span><br><span class="line"></span><br><span class="line">        self.default_subdomain &#x3D; default_subdomain</span><br><span class="line">        self.charset &#x3D; charset</span><br><span class="line">        self.encoding_errors &#x3D; encoding_errors</span><br><span class="line">        self.strict_slashes &#x3D; strict_slashes</span><br><span class="line">        self.merge_slashes &#x3D; merge_slashes</span><br><span class="line">        self.redirect_defaults &#x3D; redirect_defaults</span><br><span class="line">        self.host_matching &#x3D; host_matching</span><br><span class="line"></span><br><span class="line">        self.converters &#x3D; self.default_converters.copy()</span><br><span class="line">        if converters:</span><br><span class="line">            self.converters.update(converters)</span><br><span class="line"></span><br><span class="line">        self.sort_parameters &#x3D; sort_parameters</span><br><span class="line">        self.sort_key &#x3D; sort_key</span><br><span class="line"></span><br><span class="line">        for rulefactory in rules or ():</span><br><span class="line">            self.add(rulefactory)</span><br></pre></td></tr></table></figure><h4 id="访问url的步骤"><a href="#访问url的步骤" class="headerlink" title="访问url的步骤"></a>访问url的步骤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 从上下文获得当前用户的req</span><br><span class="line">req &#x3D; _request_ctx_stack.top.request</span><br><span class="line">if req.routing_exception is not None:</span><br><span class="line">    self.raise_routing_exception(req) </span><br><span class="line">    </span><br><span class="line"># 通过url_map获取当前用户访问的url的rule</span><br><span class="line">rule &#x3D; req.url_rule</span><br><span class="line"></span><br><span class="line"># 确认method不为option</span><br><span class="line"># if we provide automatic options for this URL and the</span><br><span class="line"># request came with the OPTIONS method, reply automatically</span><br><span class="line">if (</span><br><span class="line">    getattr(rule, &quot;provide_automatic_options&quot;, False)</span><br><span class="line">    and req.method &#x3D;&#x3D; &quot;OPTIONS&quot;</span><br><span class="line">):</span><br><span class="line">    return self.make_default_options_response()</span><br><span class="line">    </span><br><span class="line"># otherwise dispatch to the handler for that endpoint</span><br><span class="line"># 根据endpoint在注册的view中找到view并传参调用</span><br><span class="line">return self.view_functions[rule.endpoint](**req.view_args)</span><br></pre></td></tr></table></figure><h2 id="template模板"><a href="#template模板" class="headerlink" title="template模板"></a>template模板</h2><h3 id="自带防xss攻击"><a href="#自带防xss攻击" class="headerlink" title="自带防xss攻击"></a>自带防xss攻击</h3><p>比如return给模板<hr>&lt;input  …&gt;</hr>会自动变为字符串不能变成input框<br>可以通过管道符|safe也可以通过from flask import Markup<br>return Markup(<hr>&lt;input  …&gt;</hr>)…</p><h3 id="支持宏定义"><a href="#支持宏定义" class="headerlink" title="支持宏定义"></a>支持宏定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro xx(name, type&#x3D;’text’, value&#x3D;’’) %&#125;</span><br><span class="line">&lt;input type&#x3D;”&#123;&#123;type&#125;&#125;” name&#x3D;”&#123;&#123;name&#125;&#125;1” value&#x3D;”&#123;&#123;value&#125;&#125;”&gt;</span><br><span class="line">&lt;input type&#x3D;”&#123;&#123;type&#125;&#125;” name&#x3D;”&#123;&#123;name&#125;&#125;1” value&#x3D;”&#123;&#123;value&#125;&#125;”&gt;</span><br><span class="line">&lt;input type&#x3D;”&#123;&#123;type&#125;&#125;” name&#x3D;”&#123;&#123;name&#125;&#125;1” value&#x3D;”&#123;&#123;value&#125;&#125;”&gt;</span><br><span class="line">&lt;input type&#x3D;”&#123;&#123;type&#125;&#125;” name&#x3D;”&#123;&#123;name&#125;&#125;1” value&#x3D;”&#123;&#123;value&#125;&#125;”&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"># 导入块并传参数</span><br><span class="line">&#123;&#123; xx(‘n’) &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="request-amp-response"><a href="#request-amp-response" class="headerlink" title="request&amp;response"></a>request&amp;response</h2><h3 id="request"><a href="#request" class="headerlink" title="request"></a><a href="https://codingdict.com/sources/py/flask.request.html">request</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from flask import request</span><br><span class="line">几乎都写到了request里面</span><br><span class="line">request.form.get(&quot;key&quot;, type&#x3D;str, default&#x3D;None) 获取表单数据</span><br><span class="line">request.args.get(&quot;key&quot;) 获取get请求参数</span><br><span class="line">request.values.get(&quot;key&quot;) 获取所有参数</span><br><span class="line">request.get_json()</span><br><span class="line">request.url</span><br><span class="line">request.base_url</span><br><span class="line">request.url_root</span><br><span class="line">request.host_url</span><br></pre></td></tr></table></figure><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.headers类似于字典，用来存放headers</span><br><span class="line"></span><br><span class="line">2.statusA string with a response status.</span><br><span class="line"></span><br><span class="line">3.status_codeThe response status as integer.</span><br><span class="line"></span><br><span class="line">4.dataA descriptor that calls get_data() and set_data().</span><br><span class="line"></span><br><span class="line">5.get_json(force&#x3D;False, silent&#x3D;False, cache&#x3D;True)Parse data as JSON.</span><br><span class="line"></span><br><span class="line">6.is_jsonCheck if the mimetype indicates JSON data, </span><br><span class="line">either application&#x2F;json or application&#x2F;*+json.</span><br><span class="line"></span><br><span class="line">7.max_cookie_sizeRead-only view of the MAX_COOKIE_SIZE config key.</span><br><span class="line"></span><br><span class="line">8.mimetypeThe mimetype (content type without charset etc.)</span><br><span class="line"></span><br><span class="line">9.set_cookie(key, value&#x3D;’’, max_age&#x3D;None, expires&#x3D;None, path&#x3D;’&#x2F;’, </span><br><span class="line">domain&#x3D;None, secure&#x3D;False, httponly&#x3D;False, samesite&#x3D;None)</span><br><span class="line"></span><br><span class="line"># 如果需要修改response</span><br><span class="line">from flask import make_response</span><br><span class="line">response &#x3D; make_response(‘fsfs’)&#x2F;make_response(render_template(‘index.html))</span><br><span class="line">response.set_cookie(‘key’, ‘value’)</span><br><span class="line">response.delete_cookie(‘key’)</span><br><span class="line">response.headers(‘xxxx’) &#x3D; ‘xxxx’</span><br><span class="line">return response</span><br></pre></td></tr></table></figure><h2 id="session-amp-cookie"><a href="#session-amp-cookie" class="headerlink" title="session&amp;cookie"></a>session&amp;cookie</h2><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import session</span><br><span class="line">app.secret_key &#x3D; ‘sfdaac’</span><br><span class="line">session[‘k1’] &#x3D; v1</span><br><span class="line">会有加密签名的字符串k1需要使用secret_key</span><br><span class="line">session.pop(xxx)</span><br><span class="line">del session[‘xxx’]</span><br></pre></td></tr></table></figure><h4 id="源码解析-1"><a href="#源码解析-1" class="headerlink" title="源码解析"></a>源码解析</h4><p>session其实就是一个类字典对象，sessionId一般用cookie存储，<br>session值存储在服务器的缓存redis、mysql、文件缓存等中。</p><ul><li><p>ctx.push()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if self.session is None:</span><br><span class="line">    session_interface &#x3D; self.app.session_interface</span><br><span class="line">    self.session &#x3D; session_interface.open_session(self.app, self.request)</span><br><span class="line"></span><br><span class="line">    if self.session is None:</span><br><span class="line">        self.session &#x3D; session_interface.make_null_session(self.app)</span><br></pre></td></tr></table></figure></li><li><p>session_interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># 默认session_interface</span><br><span class="line">class SecureCookieSessionInterface(SessionInterface):</span><br><span class="line">    serializer &#x3D; session_json_serializer</span><br><span class="line">    session_class &#x3D; SecureCookieSession</span><br><span class="line"></span><br><span class="line">    def get_signing_serializer(self, app):</span><br><span class="line">        if not app.secret_key:</span><br><span class="line">            return None</span><br><span class="line">        signer_kwargs &#x3D; dict(</span><br><span class="line">            key_derivation&#x3D;self.key_derivation, digest_method&#x3D;self.digest_method</span><br><span class="line">        )</span><br><span class="line">        return URLSafeTimedSerializer(</span><br><span class="line">            app.secret_key,</span><br><span class="line">            salt&#x3D;self.salt,</span><br><span class="line">            serializer&#x3D;self.serializer,</span><br><span class="line">            signer_kwargs&#x3D;signer_kwargs,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def open_session(self, app, request):</span><br><span class="line">        s &#x3D; self.get_signing_serializer(app)</span><br><span class="line">        if s is None:</span><br><span class="line">            return None</span><br><span class="line">        val &#x3D; request.cookies.get(app.session_cookie_name)</span><br><span class="line">        if not val:</span><br><span class="line">            return self.session_class()</span><br><span class="line">        max_age &#x3D; total_seconds(app.permanent_session_lifetime)</span><br><span class="line">        try:</span><br><span class="line">            data &#x3D; s.loads(val, max_age&#x3D;max_age)</span><br><span class="line">            return self.session_class(data)</span><br><span class="line">        except BadSignature:</span><br><span class="line">            return self.session_class()</span><br><span class="line"></span><br><span class="line">    def save_session(self, app, session, response):</span><br><span class="line">        domain &#x3D; self.get_cookie_domain(app)</span><br><span class="line">        path &#x3D; self.get_cookie_path(app)</span><br><span class="line"></span><br><span class="line">        # If the session is modified to be empty, remove the cookie.</span><br><span class="line">        # If the session is empty, return without setting the cookie.</span><br><span class="line">        if not session:</span><br><span class="line">            if session.modified:</span><br><span class="line">                response.delete_cookie(</span><br><span class="line">                    app.session_cookie_name, domain&#x3D;domain, path&#x3D;path</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        # Add a &quot;Vary: Cookie&quot; header if the session was accessed at all.</span><br><span class="line">        if session.accessed:</span><br><span class="line">            response.vary.add(&quot;Cookie&quot;)</span><br><span class="line"></span><br><span class="line">        if not self.should_set_cookie(app, session):</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        httponly &#x3D; self.get_cookie_httponly(app)</span><br><span class="line">        secure &#x3D; self.get_cookie_secure(app)</span><br><span class="line">        samesite &#x3D; self.get_cookie_samesite(app)</span><br><span class="line">        expires &#x3D; self.get_expiration_time(app, session)</span><br><span class="line">        val &#x3D; self.get_signing_serializer(app).dumps(dict(session))</span><br><span class="line">        response.set_cookie(</span><br><span class="line">            app.session_cookie_name,</span><br><span class="line">            val,</span><br><span class="line">            expires&#x3D;expires,</span><br><span class="line">            httponly&#x3D;httponly,</span><br><span class="line">            domain&#x3D;domain,</span><br><span class="line">            path&#x3D;path,</span><br><span class="line">            secure&#x3D;secure,</span><br><span class="line">            samesite&#x3D;samesite,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></li><li><p>make_null_session(self.app)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def make_null_session(self, app):</span><br><span class="line">    return self.null_session_class()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">class NullSession(SecureCookieSession):</span><br><span class="line">    def _fail(self, *args, **kwargs):</span><br><span class="line">        raise RuntimeError(</span><br><span class="line">            &quot;The session is unavailable because no secret &quot;</span><br><span class="line">            &quot;key was set.  Set the secret_key on the &quot;</span><br><span class="line">            &quot;application to something unique and secret.&quot;</span><br><span class="line">        )</span><br><span class="line">    __setitem__ &#x3D; __delitem__ &#x3D; clear &#x3D; pop &#x3D; popitem &#x3D; update &#x3D; setdefault &#x3D; _fail</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">class SecureCookieSession(CallbackDict, SessionMixin):</span><br><span class="line">    def __init__(self, initial&#x3D;None):</span><br><span class="line">        def on_update(self):</span><br><span class="line">            self.modified &#x3D; True</span><br><span class="line">            self.accessed &#x3D; True</span><br><span class="line">        super(SecureCookieSession, self).__init__(initial, on_update)</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, key):</span><br><span class="line">        self.accessed &#x3D; True</span><br><span class="line">        return super(SecureCookieSession, self).__getitem__(key)</span><br><span class="line"></span><br><span class="line">    def get(self, key, default&#x3D;None):</span><br><span class="line">        self.accessed &#x3D; True</span><br><span class="line">        return super(SecureCookieSession, self).get(key, default)</span><br><span class="line"></span><br><span class="line">    def setdefault(self, key, default&#x3D;None):</span><br><span class="line">        self.accessed &#x3D; True</span><br><span class="line">        return super(SecureCookieSession, self).setdefault(key, default)</span><br></pre></td></tr></table></figure></li></ul><h4 id="flask-session"><a href="#flask-session" class="headerlink" title="flask_session"></a>flask_session</h4><ul><li><p>config配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">config &#x3D; app.config.copy()</span><br><span class="line">config.setdefault(&#39;SESSION_TYPE&#39;, &#39;null&#39;)</span><br><span class="line">config.setdefault(&#39;SESSION_PERMANENT&#39;, True)</span><br><span class="line">config.setdefault(&#39;SESSION_USE_SIGNER&#39;, False)</span><br><span class="line">config.setdefault(&#39;SESSION_KEY_PREFIX&#39;, &#39;session:&#39;)</span><br><span class="line">config.setdefault(&#39;SESSION_REDIS&#39;, None)</span><br><span class="line">config.setdefault(&#39;SESSION_MEMCACHED&#39;, None)</span><br><span class="line">config.setdefault(&#39;SESSION_FILE_DIR&#39;,</span><br><span class="line">                  os.path.join(os.getcwd(), &#39;flask_session&#39;))</span><br><span class="line">config.setdefault(&#39;SESSION_FILE_THRESHOLD&#39;, 500)</span><br><span class="line">config.setdefault(&#39;SESSION_FILE_MODE&#39;, 384)</span><br><span class="line">config.setdefault(&#39;SESSION_MONGODB&#39;, None)</span><br><span class="line">config.setdefault(&#39;SESSION_MONGODB_DB&#39;, &#39;flask_session&#39;)</span><br><span class="line">config.setdefault(&#39;SESSION_MONGODB_COLLECT&#39;, &#39;sessions&#39;)</span><br><span class="line">config.setdefault(&#39;SESSION_SQLALCHEMY&#39;, None)</span><br><span class="line">config.setdefault(&#39;SESSION_SQLALCHEMY_TABLE&#39;, &#39;sessions&#39;)</span><br><span class="line"></span><br><span class="line">if config[&#39;SESSION_TYPE&#39;] &#x3D;&#x3D; &#39;redis&#39;:</span><br><span class="line">    session_interface &#x3D; RedisSessionInterface(</span><br><span class="line">        config[&#39;SESSION_REDIS&#39;], config[&#39;SESSION_KEY_PREFIX&#39;],</span><br><span class="line">        config[&#39;SESSION_USE_SIGNER&#39;], config[&#39;SESSION_PERMANENT&#39;])</span><br><span class="line">elif config[&#39;SESSION_TYPE&#39;] &#x3D;&#x3D; &#39;memcached&#39;:</span><br><span class="line">    session_interface &#x3D; MemcachedSessionInterface(</span><br><span class="line">        config[&#39;SESSION_MEMCACHED&#39;], config[&#39;SESSION_KEY_PREFIX&#39;],</span><br><span class="line">        config[&#39;SESSION_USE_SIGNER&#39;], config[&#39;SESSION_PERMANENT&#39;])</span><br><span class="line">elif config[&#39;SESSION_TYPE&#39;] &#x3D;&#x3D; &#39;filesystem&#39;:</span><br><span class="line">    session_interface &#x3D; FileSystemSessionInterface(</span><br><span class="line">        config[&#39;SESSION_FILE_DIR&#39;], config[&#39;SESSION_FILE_THRESHOLD&#39;],</span><br><span class="line">        config[&#39;SESSION_FILE_MODE&#39;], config[&#39;SESSION_KEY_PREFIX&#39;],</span><br><span class="line">        config[&#39;SESSION_USE_SIGNER&#39;], config[&#39;SESSION_PERMANENT&#39;])</span><br><span class="line">elif config[&#39;SESSION_TYPE&#39;] &#x3D;&#x3D; &#39;mongodb&#39;:</span><br><span class="line">    session_interface &#x3D; MongoDBSessionInterface(</span><br><span class="line">        config[&#39;SESSION_MONGODB&#39;], config[&#39;SESSION_MONGODB_DB&#39;],</span><br><span class="line">        config[&#39;SESSION_MONGODB_COLLECT&#39;],</span><br><span class="line">        config[&#39;SESSION_KEY_PREFIX&#39;], config[&#39;SESSION_USE_SIGNER&#39;],</span><br><span class="line">        config[&#39;SESSION_PERMANENT&#39;])</span><br><span class="line">elif config[&#39;SESSION_TYPE&#39;] &#x3D;&#x3D; &#39;sqlalchemy&#39;:</span><br><span class="line">    session_interface &#x3D; SqlAlchemySessionInterface(</span><br><span class="line">        app, config[&#39;SESSION_SQLALCHEMY&#39;],</span><br><span class="line">        config[&#39;SESSION_SQLALCHEMY_TABLE&#39;],</span><br><span class="line">        config[&#39;SESSION_KEY_PREFIX&#39;], config[&#39;SESSION_USE_SIGNER&#39;],</span><br><span class="line">        config[&#39;SESSION_PERMANENT&#39;])</span><br><span class="line">else:</span><br><span class="line">    session_interface &#x3D; NullSessionInterface()</span><br><span class="line"></span><br><span class="line">return session_interface</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, session</span><br><span class="line">from flask_redis import FlaskRedis</span><br><span class="line">from flask_session import Session</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"># 必须设置</span><br><span class="line">secret_key &#x3D; &#39;asfasfs&#39;</span><br><span class="line">redis &#x3D; FlaskRedis()</span><br><span class="line">session_store &#x3D; Session()</span><br><span class="line">app.config[&#39;PERMANENT_SESSION_LIFETIME&#39;] &#x3D; timedelta(days&#x3D;7) # 设置session 的时间为7天</span><br><span class="line">class Config():</span><br><span class="line">    # DEBUG调试模式</span><br><span class="line">    DEBUG &#x3D; True</span><br><span class="line">    # json多字节转unicode编码</span><br><span class="line">    JSON_AS_ASCII &#x3D; False</span><br><span class="line">    # 数据库链接配置</span><br><span class="line">    SECRET_KEY &#x3D; &quot;*(%#4sxcz(^(#$#8423&quot;</span><br><span class="line">    # session存储方式为redis</span><br><span class="line">    SESSION_TYPE &#x3D; &quot;redis&quot;</span><br><span class="line">    # session保存数据到redis时启用的链接对象</span><br><span class="line">    SESSION_REDIS &#x3D; redis</span><br><span class="line">    # 如果设置session的生命周期是否是会话期, 为True，则关闭浏览器session就失效</span><br><span class="line">    SESSION_PERMANENT &#x3D; True</span><br><span class="line">    # 是否对发送到浏览器上session的cookie值进行加密</span><br><span class="line">    SESSION_USE_SIGNER &#x3D; True</span><br><span class="line">    # 保存到redis的session数的名称前缀</span><br><span class="line">    SESSION_KEY_PREFIX &#x3D; &quot;session:&quot;</span><br><span class="line">    # redis的链接配置</span><br><span class="line">    REDIS_URL &#x3D; &quot;redis:&#x2F;&#x2F;localhost:6379&#x2F;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"># 初始化redis</span><br><span class="line">redis.init_app(app)</span><br><span class="line"># 初始化session_store</span><br><span class="line">session_store.init_app(app)</span><br></pre></td></tr></table></figure></li></ul><h4 id="session的应用"><a href="#session的应用" class="headerlink" title="session的应用"></a>session的应用</h4><ul><li>1.登录，做用户标识，存储一些用户的信息在session中。</li><li>2.购物车</li></ul><h4 id="session的缺点"><a href="#session的缺点" class="headerlink" title="session的缺点"></a>session的缺点</h4><ul><li>1.存储在服务器，当同一时间有很多用户登录造成巨大服务器压力</li><li>2.会话结束session过期</li><li>3.不支持跨域</li></ul><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><h4 id="修改配置-amp-参数解析"><a href="#修改配置-amp-参数解析" class="headerlink" title="修改配置&amp;参数解析"></a>修改配置&amp;参数解析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">通过make_response.set_cookie设置</span><br><span class="line">response.set_cookie(</span><br><span class="line">            app.session_cookie_name,</span><br><span class="line">            val,</span><br><span class="line">            expires&#x3D;expires,</span><br><span class="line">            httponly&#x3D;httponly,</span><br><span class="line">            domain&#x3D;domain,</span><br><span class="line">            path&#x3D;path,</span><br><span class="line">            secure&#x3D;secure,</span><br><span class="line">            samesite&#x3D;samesite,</span><br><span class="line">        )</span><br><span class="line">httponly:只能http访问</span><br><span class="line">domain:设置域访问</span><br><span class="line">path:定制访问路径</span><br><span class="line">secure:是否仅通过安全的https,值为0或1，如果值为1，</span><br><span class="line">则cookie只能在https连接上有效，默认值为0，表示cookie</span><br><span class="line">在http和https连接上都有效</span><br><span class="line">samesite:</span><br><span class="line">三种模式Strict&#x2F;Lax&#x2F;None</span><br><span class="line">Strict:第三方的cookie不能合并到一起发送</span><br><span class="line">Lax:第三方部分cookie可以一起发送，图片、script、链接</span><br><span class="line">None:都可以</span><br></pre></td></tr></table></figure><h4 id="cookie的应用"><a href="#cookie的应用" class="headerlink" title="cookie的应用"></a>cookie的应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.一般用来做用户标识的键值对(第一次登录生成token)</span><br><span class="line">2.购物车功能，(比如京东)把购物车商品放在cookie中，序列化商品的属性，键值存放</span><br><span class="line">3.存储用户的一些配置</span><br><span class="line">4.记录用户的浏览数据，以便后续更好的服务（广告）</span><br></pre></td></tr></table></figure><h4 id="cookie的缺点"><a href="#cookie的缺点" class="headerlink" title="cookie的缺点"></a>cookie的缺点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.大小最大为4KB，不能存很大的数据</span><br><span class="line">2.http中明文传输，存储在本地，容易被获取</span><br><span class="line">3.cookie如果不设置path之类的，会在每个请求中都携带，增大流量消耗</span><br></pre></td></tr></table></figure><h2 id="flash"><a href="#flash" class="headerlink" title="flash"></a>flash</h2><p>原理是通过session存取,放到session的一个list里面,session基于用户已经隔离开了.<br>应用于对临时信息的操作<br>从某个地方获取设置过得所有值并清除.类似pop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from flask import flash, get_flashed_messages</span><br><span class="line">app.secret_key &#x3D; &#39;sfafa&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;get&#39;)</span><br><span class="line">def get():</span><br><span class="line">    data &#x3D; get_flashed_messages()</span><br><span class="line">    print(data)</span><br><span class="line">    return str(data)</span><br><span class="line">@app.route(&#39;&#x2F;set&#39;)</span><br><span class="line">def set():</span><br><span class="line">    flash(&#39;啊手动阀&#39;)</span><br><span class="line">    return &#39;aafafasfa&#39;</span><br><span class="line"></span><br><span class="line">比如:</span><br><span class="line">flash(‘超时错误’, category&#x3D;’x1’)</span><br><span class="line">get_flashed_messages(category_filter&#x3D;[‘x1’])</span><br><span class="line">网页view错误后跳转到另外一个网页需要显示详细错误</span><br><span class="line">通过category分类拿去正确的错误信息</span><br></pre></td></tr></table></figure><h2 id="请求扩展request-extension"><a href="#请求扩展request-extension" class="headerlink" title="请求扩展request-extension"></a>请求扩展request-extension</h2><p>如果一个装饰器每个视图都需要,其实就可以改为中间件实现,flask叫做请求扩展.如登录验证.</p><h3 id="请求前before-request"><a href="#请求前before-request" class="headerlink" title="请求前before_request"></a>请求前before_request</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@app.before_request</span><br><span class="line">def before_req(*args, **kwargs):</span><br><span class="line">    print(&#39;asdffffffff&#39;)</span><br><span class="line"># 等同于django的process_request</span><br><span class="line"># 需要在其中设置白名单,如果视图在白名单就不执行该扩展</span><br><span class="line">if request.path in 白名单:</span><br><span class="line">return None</span><br></pre></td></tr></table></figure><ul><li>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from flask import session, redirect</span><br><span class="line">@app.before_request</span><br><span class="line">def process_request(*args, **kwargs):</span><br><span class="line">    if request.path &#x3D;&#x3D; &#39;&#x2F;login&#39;:</span><br><span class="line">        return None</span><br><span class="line">    user &#x3D; session.get(&#39;user_info&#39;)</span><br><span class="line">    if user:</span><br><span class="line">        return None</span><br><span class="line">    return redirect(&quot;&#x2F;login&quot;)</span><br><span class="line">    print(&#39;asdffffffff&#39;)</span><br></pre></td></tr></table></figure><h3 id="请求后after-request"><a href="#请求后after-request" class="headerlink" title="请求后after_request"></a>请求后after_request</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@app.after_request</span><br><span class="line">def process_response(resposne):</span><br><span class="line">    return resposne</span><br><span class="line">如果request拦截,response还是全部执行,但view不执行,与django的老版中间件类似</span><br></pre></td></tr></table></figure></li></ul><h3 id="error后errorhandler-404"><a href="#error后errorhandler-404" class="headerlink" title="error后errorhandler(404)"></a>error后errorhandler(404)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.errorhandler(404)</span><br><span class="line">def error_response(*args, **kwargs):</span><br><span class="line">    return &quot;404 not found&quot;</span><br></pre></td></tr></table></figure><h3 id="模板中定制方法template-global"><a href="#模板中定制方法template-global" class="headerlink" title="模板中定制方法template_global()"></a>模板中定制方法template_global()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@app.template_global()</span><br><span class="line">def sc(a1, b1):</span><br><span class="line">    return a1 + b1</span><br><span class="line">这样就可以在模板中直接调用函数</span><br><span class="line">使用&#123;  &#123;sdfafa sc(1, 2) &#125;  &#125;</span><br></pre></td></tr></table></figure><h3 id="第一次请求的时候做的操作before-first-request"><a href="#第一次请求的时候做的操作before-first-request" class="headerlink" title="第一次请求的时候做的操作before_first_request"></a>第一次请求的时候做的操作before_first_request</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@app.before_first_request</span><br><span class="line">def axiba(*args, **kwargs):</span><br><span class="line">    return None</span><br><span class="line">应用场景在于带动异步健康函数启动监视，如果发现异常截断往后所有的请求，停止服务</span><br></pre></td></tr></table></figure><h2 id="中间件middleware"><a href="#中间件middleware" class="headerlink" title="中间件middleware"></a>中间件middleware</h2><p>请求之前定制一些操作，之后也定制一些，比如打印请求log，多实例<br>当请求到来之后，运行run_simple(host, port, self, **options)<br>执行第三个参数的__call__也就是self()</p><ul><li>app.__call__()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def __call__(self, environ, start_response):</span><br><span class="line">    &quot;&quot;&quot;The WSGI server calls the Flask application object as the</span><br><span class="line">    WSGI application. This calls :meth:&#96;wsgi_app&#96; which can be</span><br><span class="line">    wrapped to applying middleware.&quot;&quot;&quot;</span><br><span class="line">    return self.wsgi_app(environ, start_response)</span><br></pre></td></tr></table></figure></li><li>中间件：把wsgi_app做一个封装即可在中间加入自己的一些参数变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Md:</span><br><span class="line">    def __init__(self, old_wsgi_app):</span><br><span class="line">        self.old_wsgi_app &#x3D; old_wsgi_app</span><br><span class="line">    </span><br><span class="line">    def __call__(self, environ, start_response):</span><br><span class="line">        print(&#39;开始之前&#39;)</span><br><span class="line">        ret &#x3D; self.old_wsgi_app(environ, start_response)</span><br><span class="line">        print(&#39;结束之后&#39;)</span><br><span class="line">        return ret</span><br><span class="line">        </span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.wsgi_app &#x3D; Md(app.wsgi_app)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li></ul><h2 id="蓝图blueprint"><a href="#蓝图blueprint" class="headerlink" title="蓝图blueprint"></a>蓝图blueprint</h2><p>一个程序不可能就一个py文件，flask如何实现由多个py文件来实现一个项目</p><h3 id="普通架构思路"><a href="#普通架构思路" class="headerlink" title="普通架构思路"></a>普通架构思路</h3><p>通过__init__把文件联系到一起</p><ul><li>架构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.py</span><br><span class="line">views</span><br><span class="line">__init__.py</span><br><span class="line">account.py</span><br><span class="line">user.py</span><br><span class="line">order.py</span><br></pre></td></tr></table></figure></li><li>init.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">from . import account, user, order</span><br></pre></td></tr></table></figure></li><li>account.py,user.py,order.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from . import app</span><br><span class="line"></span><br><span class="line">@app.route(&#39;account&#x2F;index&#39;)</span><br><span class="line">def index():</span><br><span class="line">    return &#39;index&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;account&#x2F;login&#39;)</span><br><span class="line">def login():</span><br><span class="line">    return &#39;login&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;account&#x2F;logout&#39;)</span><br><span class="line">def logout():</span><br><span class="line">    return &#39;logout&#39;</span><br></pre></td></tr></table></figure></li><li>app.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from views import app</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li></ul><h3 id="蓝图使用"><a href="#蓝图使用" class="headerlink" title="蓝图使用"></a>蓝图使用</h3><p>蓝图相当于帮我们做好了以上架构工作，并且可以指定static、template、prefix等</p><ul><li><p>架构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.py</span><br><span class="line">pro_flask</span><br><span class="line">__init__.py</span><br><span class="line">statics</span><br><span class="line">templates</span><br><span class="line">views</span><br><span class="line">account.py</span><br><span class="line">user.py</span><br></pre></td></tr></table></figure></li><li><p>account.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from flask import Blueprint, render_template</span><br><span class="line">account &#x3D; Blueprint(&#39;account&#39;, __name__, url_prefix&#x3D;&#39;&#x2F;account&#39;, template_folder&#x3D;&#39;templates&#39;)</span><br><span class="line">@account.route(&#39;&#x2F;index1&#39;)</span><br><span class="line">def index1():</span><br><span class="line">    return render_template(&#39;login.html&#39;)</span><br><span class="line"></span><br><span class="line">@account.route(&#39;&#x2F;login1&#39;)</span><br><span class="line">def login1():</span><br><span class="line">    return &#39;login&#39;</span><br><span class="line"></span><br><span class="line">@account.route(&#39;&#x2F;logout1&#39;)</span><br><span class="line">def logout1():</span><br><span class="line">    return &#39;logout&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>init.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from .views.account import account</span><br><span class="line">from .views.user import user</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__, template_folder&#x3D;&#39;templates&#39;, static_folder&#x3D;&#39;statics&#39;, static_url_path&#x3D;&#39;&#x2F;static&#39;)</span><br><span class="line"></span><br><span class="line">app.register_blueprint(account)</span><br><span class="line">app.register_blueprint(user)</span><br></pre></td></tr></table></figure></li><li><p>app.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pro_flask import app</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>flask专用的蓝图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@account.before_request</span><br><span class="line">def process_request(*args, **kwargs):</span><br><span class="line">    print(&#39;come on&#39;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;h3 id=&quot;配置方式&quot;&gt;&lt;a href=&quot;#配置方式&quot; class=&quot;headerlink&quot; title=&quot;配置方式&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="webframe" scheme="http://example.com/categories/webframe/"/>
    
    <category term="flask" scheme="http://example.com/categories/webframe/flask/"/>
    
    
  </entry>
  
  <entry>
    <title>分布式锁</title>
    <link href="http://example.com/2021/06/08/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://example.com/2021/06/08/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2021-06-08T03:17:52.074Z</published>
    <updated>2021-06-08T03:42:07.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式锁介绍"><a href="#分布式锁介绍" class="headerlink" title="分布式锁介绍"></a>分布式锁介绍</h2><p>当多个系统并发操作redis如何处理？<br>主要方法是使用分布式锁，抢到锁的做set操作·。<br><a href="https://juejin.im/post/6844903830442737671">分布式锁实现方式</a><br><a href="https://juejin.im/post/6844903688088059912">分布式锁</a></p><h3 id="为什么需要分布式锁？"><a href="#为什么需要分布式锁？" class="headerlink" title="为什么需要分布式锁？"></a>为什么需要分布式锁？</h3><ul><li>1.避免不同的节点做相同的工作，比如发送短信通知。</li><li>2.避免同时操作一个数据导致数据正确性出现问题。比如多个节点操作同一个订单流程，<br>还没付款已经结账了，或者同时操作一个库存，导致不一致。</li></ul><h3 id="2-分布式锁的特点"><a href="#2-分布式锁的特点" class="headerlink" title="2.分布式锁的特点"></a>2.分布式锁的特点</h3><ul><li><p>1.互斥性<br>保证在不同节点不同线程的互斥。</p></li><li><p>2.可重入<br>同一个节点上的同一个线程如果获取过该锁，那么可以再次获取。<br>若一个程序或子程序可以“在任意时刻被中断然后操作系统调度执行另一段代码，<br>且这段代码又掉用了子程序不会出错，则称其为可重入”。即在該子程序在运行时，<br>执行线程可以再次进入并执行它。仍然获得符合符合设计预期的结果。与多线程并<br>发执行的线程安全不同，可重入强调对单个线程执行时重新进入同一个子程序任然<br>是安全的。</p></li><li><p>如果想要实现锁的重入，至少要解决一下两个问题</p><ul><li>线程再次获取锁：锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是，则再次成功获取。</li><li>锁的最终释放：线程重复n次获取了锁，随后在n次释放该锁后，其他线程能够获取该锁。锁的最终释<br>放要求锁对于获取进行计数自增，计数表示当前锁被重复获取的次数，而锁被释放时，计数自减，当计数<br>等于0时表示锁已经释放<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"># python treading.local中的可重入锁，其实就是加一个计数器</span><br><span class="line">def RLock(*args, **kwargs):</span><br><span class="line">    if _CRLock is None:</span><br><span class="line">        return _PyRLock(*args, **kwargs)</span><br><span class="line">    return _CRLock(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">class _RLock:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self._block &#x3D; _allocate_lock()</span><br><span class="line">        self._owner &#x3D; None</span><br><span class="line">        self._count &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        owner &#x3D; self._owner</span><br><span class="line">        try:</span><br><span class="line">            owner &#x3D; _active[owner].name</span><br><span class="line">        except KeyError:</span><br><span class="line">            pass</span><br><span class="line">        return &quot;&lt;%s %s.%s object owner&#x3D;%r count&#x3D;%d at %s&gt;&quot; % (</span><br><span class="line">            &quot;locked&quot; if self._block.locked() else &quot;unlocked&quot;,</span><br><span class="line">            self.__class__.__module__,</span><br><span class="line">            self.__class__.__qualname__,</span><br><span class="line">            owner,</span><br><span class="line">            self._count,</span><br><span class="line">            hex(id(self))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def acquire(self, blocking&#x3D;True, timeout&#x3D;-1):</span><br><span class="line">        me &#x3D; get_ident()</span><br><span class="line">        if self._owner &#x3D;&#x3D; me:</span><br><span class="line">            self._count +&#x3D; 1</span><br><span class="line">            return 1</span><br><span class="line">        rc &#x3D; self._block.acquire(blocking, timeout)</span><br><span class="line">        if rc:</span><br><span class="line">            self._owner &#x3D; me</span><br><span class="line">            self._count &#x3D; 1</span><br><span class="line">        return rc</span><br><span class="line"></span><br><span class="line">    __enter__ &#x3D; acquire</span><br><span class="line"></span><br><span class="line">    def release(self):</span><br><span class="line">        if self._owner !&#x3D; get_ident():</span><br><span class="line">            raise RuntimeError(&quot;cannot release un-acquired lock&quot;)</span><br><span class="line">        self._count &#x3D; count &#x3D; self._count - 1</span><br><span class="line">        if not count:</span><br><span class="line">            self._owner &#x3D; None</span><br><span class="line">            self._block.release()</span><br><span class="line"></span><br><span class="line">    def __exit__(self, t, v, tb):</span><br><span class="line">        self.release()</span><br><span class="line"></span><br><span class="line">    # Internal methods used by condition variables</span><br><span class="line"></span><br><span class="line">    def _acquire_restore(self, state):</span><br><span class="line">        self._block.acquire()</span><br><span class="line">        self._count, self._owner &#x3D; state</span><br><span class="line"></span><br><span class="line">    def _release_save(self):</span><br><span class="line">        if self._count &#x3D;&#x3D; 0:</span><br><span class="line">            raise RuntimeError(&quot;cannot release un-acquired lock&quot;)</span><br><span class="line">        count &#x3D; self._count</span><br><span class="line">        self._count &#x3D; 0</span><br><span class="line">        owner &#x3D; self._owner</span><br><span class="line">        self._owner &#x3D; None</span><br><span class="line">        self._block.release()</span><br><span class="line">        return (count, owner)</span><br><span class="line"></span><br><span class="line">    def _is_owned(self):</span><br><span class="line">        return self._owner &#x3D;&#x3D; get_ident()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.超时设置<br>防止死锁</p></li><li><p>4.高效<br>高可用:加锁和解锁需要高效，同时也需要保证高可用防止分布式锁失效，可以增加降级。</p></li><li><p>5.阻塞和非阻塞<br>阻塞：<br>如果获取不到锁就一直获取。（增加一个监听）<br>非阻塞：<br>如果获取不到锁就直接返回（或者定义个时间多久获取不到就直接返回）。</p></li></ul><h2 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h2><h3 id="redis-setnx"><a href="#redis-setnx" class="headerlink" title="redis setnx"></a>redis setnx</h3><p>使用lua脚本保证操作的原子性，防止操作到某一步机器挂掉。<br>客户端通过setnx+lua获取锁判断逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line">r &#x3D; redis.Redis(&#39;10.167.219.250&#39;, port&#x3D;8001, db&#x3D;5)</span><br><span class="line"></span><br><span class="line">def try_lock_with_lua(key, val, second):</span><br><span class="line">    lua_scripts &#x3D; &quot;if redis.call(&#39;setnx&#39;,KEYS[1],ARGV[1]) &#x3D;&#x3D; 1 then &quot; \</span><br><span class="line">                  &quot;redis.call(&#39;expire&#39;,KEYS[1],ARGV[2]) return 1 else return 0 end&quot;</span><br><span class="line"></span><br><span class="line">    res &#x3D; r.eval(lua_scripts, 1, key, val, second)</span><br><span class="line">    return res &#x3D;&#x3D; 1</span><br><span class="line"></span><br><span class="line">if try_lock_with_lua(&#39;k5555&#39;, &#39;11&#39;, 20):</span><br><span class="line">    print(1)</span><br></pre></td></tr></table></figure><h3 id="redis-gt-2-6-12-set"><a href="#redis-gt-2-6-12-set" class="headerlink" title="redis &gt; 2.6.12 set"></a>redis &gt; 2.6.12 set</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">自从redis2.6.12以后，增加了set name value ex nx</span><br><span class="line">以保证操作的原子性。</span><br><span class="line">def try_lock_with_self(key, val, second):</span><br><span class="line">    res &#x3D; r.set(key, val, ex&#x3D;second, nx&#x3D;True)</span><br><span class="line">    return res &#x3D;&#x3D; 1</span><br><span class="line"></span><br><span class="line">if try_lock_with_self(&#39;k5554&#39;, &#39;11&#39;, 20):</span><br><span class="line">    print(1)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>1.value必须要有唯一性<br>随机字符串+redis判断，hash等方法保证。</p><ul><li>1.客户端1获取锁成功 </li><li>2.客户端1在某个操作上阻塞了太长时间 </li><li>3.设置的key过期了，锁自动释放了 </li><li>4.客户端2获取到了对应同一个资源的锁 </li><li>5.客户端1从阻塞中恢复过来，因为value值一样，所以执行释放锁操作时就会释放掉客户端2持有的锁，<br>这样就会造成问题。</li></ul></li><li><p>2.释放锁<br>为了保证释放锁的原子性操作，选择使用lua脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def release_lock_with_lua(key, val):</span><br><span class="line">    lua_script &#x3D; &quot;if redis.call(&#39;get&#39;,KEYS[1]) &#x3D;&#x3D; ARGV[1] then &quot; \</span><br><span class="line">            &quot;return redis.call(&#39;del&#39;,KEYS[1]) else return 0 end&quot;</span><br><span class="line">    res &#x3D; r.eval(lua_script, 1, key, val)</span><br><span class="line">    return res &#x3D;&#x3D; 1</span><br></pre></td></tr></table></figure><p>使用 set key value [EX seconds][PX milliseconds][NX|XX] 命令 看上去很OK，<br>实际上在Redis集群的时候也会出现问题，比如说A客户端在Redis的master节点上拿到了锁，<br>但是这个加锁的key还没有同步到slave节点，master故障，发生故障转移，一个slave节点升<br>级为master节点，B客户端也可以获取同个key的锁，但客户端A也已经拿到锁了，这就导致多个<br>客户端都拿到锁。（简单来说就是同步延时的问题，主机节点的数据还没同步给slave就挂掉了）</p></li></ul><h3 id="redlock-实现分布式锁"><a href="#redlock-实现分布式锁" class="headerlink" title="redlock 实现分布式锁"></a>redlock 实现分布式锁</h3><p><a href="https://www.jianshu.com/p/fba7dd6dcef5">redlock算法</a><br><a href="https://www.cnpython.com/pypi/redlock">redission实现</a></p><p>python 版redlock redlock-py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redlock-py</span><br></pre></td></tr></table></figure><h4 id="redlock设计理念"><a href="#redlock设计理念" class="headerlink" title="redlock设计理念"></a>redlock设计理念</h4><p>一个Client想要获得一个锁需要以下几个操作：</p><ul><li><p>1    得到本地时间</p></li><li><p>2 Client使用相同的key和随机数,按照顺序在每个Master实例中尝试获得锁。<br>在获得锁的过程中，为每一个锁操作设置一个快速失败时间(如果想要获得一个10秒的锁，<br>那么每一个锁操作的失败时间设为5-50ms)。这样可以避免客户端与一个已经故障的Master<br>通信占用太长时间，通过快速失败的方式尽快的与集群中的其他节点完成锁操作。</p></li><li><p>3 客户端计算出与master获得锁操作过程中消耗的时间，当且仅当Client获得锁消耗的<br>时间小于锁的存活时间，并且在一半以上的master节点中获得锁。才认为client成功的获得了锁。</p></li><li><p>4 如果已经获得了锁，Client执行任务的时间窗口是锁的存活时间减去获得锁消耗的时间。</p></li><li><p>5 如果Client获得锁的数量不足一半以上，或获得锁的时间超时，那么认为获得锁失败。<br>客户端需要尝试在所有的master节点中释放锁， 即使在第二步中没有成功获得该Master节点中的锁，<br>仍要进行释放操作。</p></li></ul><ul><li><p>redlock算法成立条件<br>这个算法成立的一个条件是：即使集群中没有同步时钟，各个进程的时间流逝速度也要大体一致，<br>并且误差与锁存活时间相比是比较小的。实际应用中的计算机也能满足这个条件：各个计算机中间<br>有几毫秒的时钟漂移(clock drift)。</p></li><li><p>失败重试机制</p></li><li><p>如果一个Client无法获得锁，它将在一个随机延时后开始重试。使用随机延时的目的是为了与<br>其他申请同一个锁的Client错开申请时间，减少脑裂(split brain)发生的可能性。</p></li><li><p>脑裂</p><ul><li><p>三个Client同时尝试获得锁，分别获得了2,2,1个实例中的锁，三个锁请求全部失败。</p></li><li><p>一个client在全部Redis实例中完成的申请时间越短，发生脑裂的时间窗口越小。<br>所以比较理想的做法是同时向N个Redis实例发出异步的SET请求。<br>当Client没有在大多数Master中获得锁时，立即释放已经取得的锁时非常必要的。<br>(PS.当极端情况发生时，比如获得了部分锁以后，client发生网络故障，无法再释放<br>锁资源，那么其他client重新获得锁的时间将是锁的过期时间)。</p></li><li><p>无论Client认为在指定的Master中有没有获得锁，都需要执行释放锁操作。</p></li></ul></li></ul><h4 id="python简单实操redlock"><a href="#python简单实操redlock" class="headerlink" title="python简单实操redlock"></a>python简单实操redlock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from contextlib import contextmanager</span><br><span class="line">from redlock import Redlock</span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def worker_lock_manager(key, ttl, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    分布式锁</span><br><span class="line">    :param key: 分布式锁ID</span><br><span class="line">    :param ttl: 分布式锁生存时间</span><br><span class="line">    :param kwargs: 可选参数字典</span><br><span class="line">    :return: None</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    redis_servers &#x3D; [&#123;</span><br><span class="line">        &#39;host&#39;: &#39;10.167.219.250&#39;,</span><br><span class="line">        &#39;port&#39;: 8001,</span><br><span class="line">        &#39;db&#39;: 5,</span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line">    rlk &#x3D; Redlock(redis_servers)</span><br><span class="line"></span><br><span class="line">    # 获取锁</span><br><span class="line">    lock &#x3D; rlk.lock(key, ttl)</span><br><span class="line"></span><br><span class="line">    yield lock</span><br><span class="line">    print(1)</span><br><span class="line">    # 释放锁</span><br><span class="line">    rlk.unlock(lock)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">def do_something():</span><br><span class="line">    print(&#39;获取锁成功，开始事务操作&#39;)</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    print(&#39;事务操作成功，锁释放&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    with worker_lock_manager(&#39;unique_key&#39;, 1000) as w_lock:</span><br><span class="line">        if w_lock:</span><br><span class="line">            do_something()</span><br></pre></td></tr></table></figure><h3 id="zookeeper-临时节点-序号实现分布式锁"><a href="#zookeeper-临时节点-序号实现分布式锁" class="headerlink" title="zookeeper 临时节点+序号实现分布式锁"></a>zookeeper 临时节点+序号实现分布式锁</h3><p><a href="https://juejin.cn/post/6844903729406148622">zookeeper实现分布式锁</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python调用zookeeper实现分布式锁：</span><br><span class="line">1.给定一台安装好zookeeper的服务器</span><br><span class="line">2.pip install kazoo</span><br><span class="line">python连接kazoo</span><br><span class="line"></span><br><span class="line">zookeeeper实现分布式锁的办法：</span><br><span class="line">使用临节点：</span><br><span class="line">1.用有序节点每次获取序号最小的节点赋予锁</span><br><span class="line">2.用无序节点当一个session释放后才能重新赋值抢锁。</span><br><span class="line">这里我们使用临时有序级节点</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分布式锁介绍&quot;&gt;&lt;a href=&quot;#分布式锁介绍&quot; class=&quot;headerlink&quot; title=&quot;分布式锁介绍&quot;&gt;&lt;/a&gt;分布式锁介绍&lt;/h2&gt;&lt;p&gt;当多个系统并发操作redis如何处理？&lt;br&gt;主要方法是使用分布式锁，抢到锁的做set操作·。&lt;br&gt;&lt;a </summary>
      
    
    
    
    <category term="nosql" scheme="http://example.com/categories/nosql/"/>
    
    <category term="redis高级篇" scheme="http://example.com/categories/nosql/redis%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql逻辑架构</title>
    <link href="http://example.com/2021/06/08/%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2021/06/08/%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/</id>
    <published>2021-06-08T00:48:13.026Z</published>
    <updated>2021-06-07T15:50:47.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连接层-connection-pool"><a href="#连接层-connection-pool" class="headerlink" title="连接层 connection pool"></a>连接层 connection pool</h2><p>C/S程序都需要的：连接处理，身份验证，安全性</p><h2 id="服务层（业务逻辑处理层）sql-layer"><a href="#服务层（业务逻辑处理层）sql-layer" class="headerlink" title="服务层（业务逻辑处理层）sql layer"></a>服务层（业务逻辑处理层）sql layer</h2><p>权限判断，sql解析，行计划优化， query cache 的处理以及所有内置的函数(如日期,时间,数学运算,加密)等等。<br>各个存储引擎提供的功能都集中在这一层，如存储过程，触发器，视图等</p><ul><li><p>架构</p><ul><li><p>connectors<br>不同语言中与sql的交互</p></li><li><p>Management Serveices &amp; Utilities<br>系统管理和控制工具</p></li><li><p>Connection Pool<br>连接池管理多个用户连接</p></li><li><p>SQL interface<br>接受用户的SQL命令，并且返回用户需要查询的结果</p></li><li><p>Parser<br>解析器</p></li><li><p>Optimizer<br>查询优化器</p></li><li><p>Cache和Buffer<br>查询缓存</p></li><li><p>存储引擎接口<br>连接不同的存储引擎获取数据</p></li></ul></li></ul><h3 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a><a href="https://zhuanlan.zhihu.com/p/56790651">查询优化器</a></h3><ul><li>1.解析查询之前，要查询缓存，这个缓存只能保存查询信息以及结果数据</li><li>2.MySQL会解析查询，并创建了一个内部数据结构（解析树）。</li><li>3.然后对其进行各种优化。这些优化包括了，查询语句的重写，读表的顺序，索引的选择等等。</li><li>4.用户可以通过查询语句的关键词传递给优化器以便提示使用哪种优化方式，这样即影响了优化器的优化方式。</li></ul><h2 id="数据引擎存储层"><a href="#数据引擎存储层" class="headerlink" title="数据引擎存储层"></a>数据引擎存储层</h2><p>底层数据存取操作实现部分，由多种存储引擎共同组成。它们负责存储和获取所有存储在MySQL中的数据。就像Linux众多的文件系统 一样。</p><ul><li>InnoDB </li><li>MyIsam </li><li>Memory</li><li>Mrg_Myisam</li><li>Blackhole<br>莫问！问就是只知道innodb和myisam。orzorzorzorz……</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;连接层-connection-pool&quot;&gt;&lt;a href=&quot;#连接层-connection-pool&quot; class=&quot;headerlink&quot; title=&quot;连接层 connection pool&quot;&gt;&lt;/a&gt;连接层 connection pool&lt;/h2&gt;&lt;p&gt;C/</summary>
      
    
    
    
    <category term="nosql" scheme="http://example.com/categories/nosql/"/>
    
    <category term="mysql高级篇" scheme="http://example.com/categories/nosql/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql索引优化</title>
    <link href="http://example.com/2021/06/08/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2021/06/08/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</id>
    <published>2021-06-08T00:48:13.025Z</published>
    <updated>2021-06-07T16:06:22.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引优化分析"><a href="#索引优化分析" class="headerlink" title="索引优化分析"></a>索引优化分析</h2><p>性能下降sql慢：（执行时间长，等待时间长）</p><ul><li><p>1.select语句写的烂，各种连接加子查询</p></li><li><p>2.索引失效，建的索引没用，创建单索引和复合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_user_name (idx_tablename_indexname) on user(name)</span><br></pre></td></tr></table></figure><p>查询用的多的字段建立联合建立复合索引<br>create index idx_user_nameEmail on user(name,index)</p></li><li><p>3.关联查询太多join（设计缺陷或不得已的要求）</p></li><li><p>4.服务器调优及各个参数设置（缓冲、线程数等）不恰当</p></li></ul><h2 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;索引优化分析&quot;&gt;&lt;a href=&quot;#索引优化分析&quot; class=&quot;headerlink&quot; title=&quot;索引优化分析&quot;&gt;&lt;/a&gt;索引优化分析&lt;/h2&gt;&lt;p&gt;性能下降sql慢：（执行时间长，等待时间长）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.select语句写的烂，各</summary>
      
    
    
    
    <category term="nosql" scheme="http://example.com/categories/nosql/"/>
    
    <category term="mysql高级篇" scheme="http://example.com/categories/nosql/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>innodb文件架构体系(mysql8)</title>
    <link href="http://example.com/2021/06/08/%E6%96%87%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2021/06/08/%E6%96%87%E4%BB%B6%E6%9E%B6%E6%9E%84/</id>
    <published>2021-06-08T00:48:13.024Z</published>
    <updated>2021-06-07T15:31:14.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a><a href="https://www.cnblogs.com/sunshine-long/p/12745657.html">文件分类</a></h2><h3 id="参数文件"><a href="#参数文件" class="headerlink" title="参数文件"></a>参数文件</h3><ul><li>概述<br>告诉MySQL实例启动时在哪里可以找到数据库文件，并且指定某些初始化参数，<br>这些参数定义了某种内存结构的大小等设置，还会介绍各种参数的类型。</li></ul><ul><li><p>路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;lib&#x2F;mysql&#x2F; </span><br></pre></td></tr></table></figure></li><li><p>相关命令</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show [global] variables like &quot;%xxxxx%&quot;;</span><br><span class="line">set key value;</span><br><span class="line">select @@session.read_buffer_size\G;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><ul><li><p>概述<br>用来记录MySQL实例对某种条件做出相应时写入的文件，如错误日志文件、二进制日志文件、慢查询日志文件、查询日志文件等。<br>查看各种log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%log_%&quot;;</span><br><span class="line"># 开启通过my.cnf</span><br></pre></td></tr></table></figure></li><li><p>分类</p><ul><li><p>错误日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%log_error%&quot;;</span><br><span class="line">vim my.cnf</span><br><span class="line"># 需要手动指定路径</span><br><span class="line">log-error&#x3D; &#x2F;xxx&#x2F;log-error.txt</span><br></pre></td></tr></table></figure></li><li><p>慢日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%slow%&quot;;</span><br><span class="line"># 路径</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;</span><br><span class="line"></span><br><span class="line">long_query_time:</span><br><span class="line">默认超过10秒为慢查询</span><br><span class="line"></span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line">未用索引的sql会被慢查询记录</span><br><span class="line"></span><br><span class="line">查看文件输出格式（默认file）</span><br><span class="line">show variables like &quot;%log_output%&quot;\G;</span><br><span class="line">set global log_output&#x3D;&#39;TABLE&#39;;</span><br></pre></td></tr></table></figure></li><li><p>二进制日志<br>二进制文件记录了对MySQL数据库执行的更改操作，但是不包括SELECT和SHOW这类操作。因为这类操作对数据本身没有修改，<br>然而，若操作本身并没有导致数据库发生变化，那么该操作也会写入二进制。</p><ul><li>作用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">恢复：通过二进制日志恢复数据</span><br><span class="line">复制：主从复制通过二进制日志进行</span><br><span class="line">审计：通过二进制日志审计是否有注入攻击</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%bin%&quot;;</span><br><span class="line"># 路径</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="socket文件"><a href="#socket文件" class="headerlink" title="socket文件"></a>socket文件</h3><ul><li><p>概述<br>z注意在UNIX系统下，当用UNIX域套接字方式进行连接时需要的文件。</p></li><li><p>路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%socket%&quot;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="pid文件"><a href="#pid文件" class="headerlink" title="pid文件"></a>pid文件</h3><ul><li><p>概述<br>Pid文件是指当MySQL实例启动时，会将自己的进程ID写入PID文件中。</p></li><li><p>路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;run&#x2F;mysqld&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%pid%&quot;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="MySQL表结构文件"><a href="#MySQL表结构文件" class="headerlink" title="MySQL表结构文件"></a><a href="https://blog.csdn.net/philipslu/article/details/102499234">MySQL表结构文件</a></h3><ul><li>概述<br>用来存放MySQL表结构定义文件，无论存储引擎怎么变，表结构只有一份，mysql8已取消.frm文件。</li></ul><h3 id="存储引擎文件"><a href="#存储引擎文件" class="headerlink" title="存储引擎文件"></a>存储引擎文件</h3><p>因为MySQL表存储引擎的关系，每个存储引擎都会有自己的文件来保存各种数据。这些存储引擎真正存储了记录和索引等数据。</p><pre><code>- frm文件 表对象结构定义文件，与引擎无关mysql8已取消- ibd文件 InnoDB数据文件（含索引）- MYD文件 MyISAM数据文件    - MYI文件 MyISAM索引文件- CSV文件 CSV引擎数据文件- ARZ文件 ARCHIVE引擎数据文件</code></pre><h4 id="innodb详解"><a href="#innodb详解" class="headerlink" title="innodb详解"></a><a href="https://www.cnblogs.com/sunshine-long/p/12745657.html">innodb详解</a></h4><h5 id="表空间文件"><a href="#表空间文件" class="headerlink" title="表空间文件"></a>表空间文件</h5><ul><li><p>共享表空间<br>Innodb的所有数据保存在一个单独的表空间里面，而这个表空间可以由很多个文件组成，一个表可以跨多个文件存在，所以其大小限制不再是文件大小的限制，<br>而是其自身的限制。从Innodb的官方文档中可以看到，其表空间的最大限制为64TB，也就是说，Innodb的单表限制基本上也在64TB左右了，当然这个大小是包<br>括这个表的所有索引等其他相关数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%innodb_data%&quot;;</span><br></pre></td></tr></table></figure></li><li><p>单独表空间<br>每个表都有自已独立的表空间，每个表的数据和索引都会存在自已的表空间中，可以实现单表在不同的数据库中移动，<br>空间可以回收（除drop table操作处，表空不能自已回收）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;innodb_file_per_table&quot;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="重做日志文件"><a href="#重做日志文件" class="headerlink" title="重做日志文件"></a>重做日志文件</h5><p>即innodb存储引擎产生的日志，也可以称为重做日志文件，默认在innodb_data_home_dir下面有两个文件ib_logfile0和<br>ib_logfile1，MySQL官方手册中将这两个文件叫文InnoDB存储引擎的日志文件，因为重做日志的事务过程记录性质，使得<br>innodb支持可靠事务。（记录事务中的每一步，但是也同样花费了切换日志的时间）</p><ul><li><p>innodb log的作用<br>当MySQL的实例和介质失败的时候，Innodb存储引擎就会使用innodb log文件进行恢复，保证数据库的完整性。</p></li><li><p>innodb log的写原理</p><ul><li>每个InnDB存储引擎至少有1个重做日志文件组（group），每个文件组下至少有两个重做日志文件，默认的为ib_logfile0、ib_logfile1；</li><li>日志组中每个重做日志的大小一致，并循环使用；</li><li>InnoDB存储引擎先写重做日志文件，当文件满了的时候，会自动切换到日志文件2，当重做日志文件2也写满时，会再切换到重做日志文件1；</li><li>为了保证安全和性能，请设置每个重做日志文件设置镜像，并分配到不同的磁盘上面。</li></ul></li><li><p>相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;innodb%log%&#39;; </span><br><span class="line">innodb_mirrored_log_groups  镜像组的数量，默认为1，没有镜像；</span><br><span class="line"></span><br><span class="line">innodb_log_group_home_dir  日志组所在的路径，默认为data的home目录；</span><br><span class="line"></span><br><span class="line">innodb_log_files_in_group    日志组的数量，默认为2；</span><br><span class="line"></span><br><span class="line">innodb_log_file_size              日志组的大小,默认为5M；</span><br><span class="line"></span><br><span class="line">innodb_log_buffer_size        日志缓冲池的大小，图上为30M;</span><br></pre></td></tr></table></figure></li><li><p>重做日志与二进制日志的区别</p><ul><li><p>记录的范围不同<br>二进制日志会记录MySQL的所有存储引擎的日志记录（包括InnoDB、MyISAM等)，<br>而InnoDB存储引擎的重做日志只会记录其本身的事务日志。</p></li><li><p>记录的内容不同<br>二进制日志文件记录的格式可以为STATEMENT或者ROW也可以是MIXED，其记录的都是关于一个事务的具体操作内容。<br>InnoDB存储引擎的重做日志文件记录的关于每个页的更改的物理情况。</p></li><li><p>写入的时间也不同<br>二进制日志文件是在事务提交前进行记录的，而在事务进行的过程中，不断有重做日志条目被写入到重做日志文件中。</p></li></ul></li></ul><h5 id="索引组织表"><a href="#索引组织表" class="headerlink" title="索引组织表"></a>索引组织表</h5><p>innodb通过主键索引加data的b+tree的方式进行存储，所以必须有主键索引，如果我们在创建表的时候没有显示的创建主键，<br>那么innodb会通过几种方式进行隐式的创建索引(辅助索引需要通过主键索引去得到值，值存在主键索引的叶子结点)</p><ul><li>1.首先判断表中是否有唯一的非空索引（unique not null）, 如果有，则该列即为主键。</li><li>2.如果不符合上述条件，InnoDB存储引擎自动创建一个6字节大小的指针。</li><li>3.当表中有多个非空唯一索引时，InnoDB存储引擎将选择建表时第一个非空索引作为主键。</li></ul><h5 id="innodb逻辑存储结构"><a href="#innodb逻辑存储结构" class="headerlink" title="innodb逻辑存储结构"></a>innodb逻辑存储结构</h5><p>所有数据被存储到表空间中，称之为表空间（tablespace)。表空间由段segment、区extent、页page组成。（页也可称为块）。</p><ul><li><p>表空间<br>前面介绍过的，Innodb存储结构的最高层，所有的数据都存放在表空间中。如果用户启用了参数innodb_file_per_table，则每张表内数据可以单独放到表空间内。</p><ul><li>注意<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果启用了innodb_file_per_table的参数，需要注意的是每张表的表空间内存放的只是数据、索引和插入缓存Bitmap页，其他类的数据，如回滚（undo）信息，插入缓冲索引页，系统事务信息，二次写缓冲（double write buffer）等还是存放在原来的共享表空间ibdata1内。</span><br><span class="line">这也说明了，即使启用了参数innodb_file_per_table之后，共享表空间还是会不断增大。</span><br><span class="line">show variables like &quot;innodb_file_per_table&quot;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>段<br>表空间由段组成，索引段为b+树的非叶子结点，数据段为b+树的非叶子结点，还有回滚段等<br>段的控制一般是由引擎自身完成的。</p></li><li><p>区<br>区的大小为1MB, 区是由连续页组成的，为了保证区中页的连续性，InnoDB一次会从磁盘中申请4-5个区，<br>默认情况下存储引擎页的大小是16KB，即一个区中有连续64个页。</p><ul><li>碎片页：（fragment page）<br>用户在启用了参数innodb_file_per_table后，创建的表默认大小是96KB。区中是64个连续的页。每个段开始，先用32页大小的碎片页来存放数据，在使用完这些页之后才是64个连续页的申请，一次来节省空间。</li></ul></li><li><p>页<br>innodb磁盘管理的最小单位。默认每页的大小为16kb，页分了很多类数据页、系统页、事务数据页…..</p><ul><li>为什么innodb大概存2000万数据就不行了？<ul><li>主键索引加入8bytes(longint)+6bytes(指针) = 14bytes</li><li>一页默认为16kb，那么16*1024/14 = 1170</li><li>假如第三层为叶子结点，1170<em>1170</em>16位数据页大小</li><li>假如数据每行为1kb，总数约为2200万数据</li></ul></li></ul></li></ul><h4 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h4><h5 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h5><p>典型为innodb，必须有主键（没有也创建）<br>可以看到innodb只有一个数据文件存放主键索引（一级索引）和数据，数据为索引的一部分，而我们平时创建的索引index为辅助索引，<br>当通过辅助索引查询时，先通过辅助索引找到主键索引，再到主键索引的叶子结点取得数据。</p><ul><li>优缺点<ul><li>优点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.数据访问更快，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</span><br><span class="line">2.聚簇索引对于主键的排序查找和范围查找速度非常快</span><br></pre></td></tr></table></figure></li><li>缺点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。</span><br><span class="line">因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。</span><br><span class="line">　　2.更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。</span><br><span class="line">　　3.二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h5><p>典型myisam<br>　MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址，辅助索引不通过主键索引，直接去数据文件找数据。 </p><h4 id="页分裂和页合并"><a href="#页分裂和页合并" class="headerlink" title="页分裂和页合并"></a><a href="https://zhuanlan.zhihu.com/p/98818611">页分裂和页合并</a></h4><h5 id="页合并"><a href="#页合并" class="headerlink" title="页合并"></a>页合并</h5><p>当你删了一行记录时，实际上记录并没有被物理删除，记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用，当页中删除的记录达到<br>MERGE_THRESHOLD（默认页体积的50%），InnoDB会开始寻找最靠近的页（前或后）看看是否可以将两个页合并以优化空间使用。</p><h5 id="页分裂"><a href="#页分裂" class="headerlink" title="页分裂"></a>页分裂</h5><p>插入数据时，页可能填充至100%，在页填满了之后，下一页会继续接管新的记录，但如果这个时候下一页也满了，由于顺序性，就需要在两页之间创建新的页，<br>然后把当前页的数据分裂一部分到新的页，并且插入新的数据。</p><ul><li><p>影响<br>页分裂会发生在插入或更新，并且造成页的错位（dislocation，落入不同的区）<br>InnoDB用INFORMATION_SCHEMA.INNODB_METRICS表来跟踪页的分裂数。<br>一旦创建分裂的页，唯一（译注：实则仍有其他方法，见下文）将原先顺序恢复的办法就是新分裂出来的页因为低于合并阈值（merge threshold）被删掉。这时候InnoDB用页合并将数据合并回来。<br>另一种方式就是用OPTIMIZE重新整理表。这可能是个很重量级和耗时的过程，但可能是唯一将大量分布在不同区的页理顺的方法。</p></li><li><p>建议<br>如果有大量插入删除操作，请确定花一段时间整理表，你必须不时（at regular intervals）重建一些表。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文件分类&quot;&gt;&lt;a href=&quot;#文件分类&quot; class=&quot;headerlink&quot; title=&quot;文件分类&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/sunshine-long/p/12745657.html&quot;&gt;文件分类&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="nosql" scheme="http://example.com/categories/nosql/"/>
    
    <category term="mysql高级篇" scheme="http://example.com/categories/nosql/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>redis集群</title>
    <link href="http://example.com/2021/06/08/redis%E9%9B%86%E7%BE%A4/"/>
    <id>http://example.com/2021/06/08/redis%E9%9B%86%E7%BE%A4/</id>
    <published>2021-06-08T00:48:13.021Z</published>
    <updated>2021-06-08T03:17:37.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要用redis集群？"><a href="#为什么要用redis集群？" class="headerlink" title="为什么要用redis集群？"></a>为什么要用redis集群？</h2><ul><li>1.容量内存不够，redis如何进行扩容？</li><li>2.并发写操作，redis如何分摊？</li></ul><h2 id="什么是集群？"><a href="#什么是集群？" class="headerlink" title="什么是集群？"></a>什么是集群？</h2><ul><li><p>1.redis集群实现了对redis的水平扩容<br>即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数的1/N。（降低内存压力，避免一台服务器写入爆掉内存）</p></li><li><p>2.redis集群通过分区（partition）来提供一定程度的可用性<br>即集群中有一部分节点失效或者无法通讯集群也可以继续处理命令请求。</p></li></ul><h2 id="集群通信原理"><a href="#集群通信原理" class="headerlink" title="集群通信原理"></a>集群通信原理</h2><p>redis 集群采用 Gossip(流言)协议，Gossip 协议工作原理就是节点彼此不断交换信息，<br>一段时间后所有的节点都会知道集群完整信息，这种方式类似流言传播。</p><ul><li>通信过程：<ul><li>1.集群中的每一个节点都会单独开辟一个 Tcp 通道，用于节点之间彼此通信，防火墙放行（端口号+10000）.</li><li>2.每个节点在固定周期内通过特定规则选择结构节点发送 ping 消息</li><li>3.接收到 ping 消息的节点用 pong 消息作为响应。集群中每个节点通过一定规则挑选要通信的节点，<br>每个节点可能知道全部节点也可能仅知道部分节点，只要这些节点彼此可以正常通信，最终他们会达成<br>一致的状态，当节点出现故障，新节点加入，主从角色变化等，它能够给不断的ping/pong消息，从而达<br>到同步目的。</li></ul></li></ul><h2 id="redis官方集群安装配置"><a href="#redis官方集群安装配置" class="headerlink" title="redis官方集群安装配置"></a><a href="https://blog.csdn.net/fst438060684/article/details/80712433">redis官方集群安装配置</a></h2><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><h4 id="文件架构"><a href="#文件架构" class="headerlink" title="文件架构"></a>文件架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cluster-test&#x2F;</span><br><span class="line">├── conf</span><br><span class="line">│      ├── redis6379.conf</span><br><span class="line">│      ├── redis6380.conf</span><br><span class="line">│      ├── redis6381.conf</span><br><span class="line">│      ├── redis6382.conf</span><br><span class="line">│      ├── redis6383.conf</span><br><span class="line">│      └── redis6384.conf   </span><br><span class="line">├── data</span><br><span class="line">├── logs</span><br><span class="line">└── scripts</span><br></pre></td></tr></table></figure><h4 id="编辑conf文件"><a href="#编辑conf文件" class="headerlink" title="编辑conf文件"></a>编辑conf文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">dir &quot;&#x2F;opt&#x2F;software&#x2F;redis&#x2F;cluster-test&#x2F;data&quot;</span><br><span class="line">logfile &quot;&#x2F;opt&#x2F;software&#x2F;redis&#x2F;cluster-test&#x2F;logs&#x2F;6379.log&quot;</span><br><span class="line">#dbfilename不能配置为路径</span><br><span class="line">dbfilename &quot;dump-6379.rdb&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">#是否需要每个节点都可用，集群才算可用,关闭</span><br><span class="line">cluster-require-full-coverage no</span><br></pre></td></tr></table></figure><p>使用命令复制修改文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &quot;s&#x2F;7000&#x2F;7001&#x2F;g&quot; redis-7000.conf &gt;redis-7001.conf</span><br></pre></td></tr></table></figure><h4 id="启动和槽分配"><a href="#启动和槽分配" class="headerlink" title="启动和槽分配"></a>启动和槽分配</h4><p>启动集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis63...conf</span><br><span class="line"></span><br><span class="line"># 查看槽信息</span><br><span class="line">redis-cli -p 6379 cluster slots</span><br><span class="line"># 查看节点信息</span><br><span class="line">redis-cli -p 6379 cluster nodes</span><br><span class="line"># 查看集群点信息</span><br><span class="line">redis-cli -p 6379 cluster info</span><br><span class="line"></span><br><span class="line"># 节点会晤(把节点联系到一起）</span><br><span class="line">redis-cli -p 6379 cluster meet 127.0.0.1 6380</span><br><span class="line"></span><br><span class="line"># 设置副本</span><br><span class="line">redis-cli -p 6379 cluster nodes # 查看id</span><br><span class="line"># 把3个分配为从节点</span><br><span class="line">redis-cli -p 6379 cluster id</span><br></pre></td></tr></table></figure><p>分配槽</p><ul><li><p>编写shell脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 start&#x3D;$1</span><br><span class="line">2 end&#x3D;$2</span><br><span class="line">3 port&#x3D;$3</span><br><span class="line">4 </span><br><span class="line">5 for slot in &#96;seq $&#123;start&#125; $&#123;end&#125;&#96;</span><br><span class="line">6     do</span><br><span class="line">7         echo &quot;slot:$&#123;slot&#125;&quot;</span><br><span class="line">8         redis-cli -p $&#123;port&#125; cluster addslots $&#123;slot&#125;</span><br><span class="line">9     done</span><br></pre></td></tr></table></figure></li><li><p>调用脚本分配节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 addslots.sh</span><br><span class="line">.&#x2F;addslots.sh 0 5461 6379</span><br><span class="line">.&#x2F;addslots.sh 5461  10922 6380</span><br><span class="line">.&#x2F;addslots.sh 10922 16383 6381</span><br></pre></td></tr></table></figure></li><li><p>查看是否集群成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379 cluster info</span><br><span class="line"></span><br><span class="line"># 进入集群节点进行测试</span><br><span class="line">redis-cli -c -p 6379</span><br><span class="line">127.0.0.1:6379&gt; set k1 21</span><br><span class="line">-&gt; Redirected to slot [12706] located at 127.0.0.1:6380</span><br><span class="line">OK</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关闭之后下次启动还可以是集群状态，因为信息已经持久化到dump文件里面，也就是data目录下存放的dump</p></li></ul><h3 id="使用-redis-trib-rb工具安装"><a href="#使用-redis-trib-rb工具安装" class="headerlink" title="使用 redis-trib.rb工具安装"></a><a href="https://blog.csdn.net/fst438060684/article/details/80712433">使用 redis-trib.rb工具安装</a></h3><p>注意：redis5.0.5以上不需要ruby环境，创建集群已经不用redis-trib.rb这个脚本，<br>而是使用自带的redis-cli创建，大致可以看下链接这个大概要淘汰掉了。</p><h4 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h4><ul><li>安装ruby<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br><span class="line">wget https:&#x2F;&#x2F;cache.ruby-lang.org&#x2F;pub&#x2F;ruby&#x2F;3.0&#x2F;ruby-3.0.1.tar.gz</span><br><span class="line">解压到特定目录：tar -zxvf ruby-3.0.1.tar.gz -C &#x2F;opt&#x2F;software</span><br><span class="line">进入目录：cd &#x2F;opt&#x2F;software&#x2F;ruby-3.0.1</span><br><span class="line">配置：.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ruby(把解压的源文件放在&#x2F;usr&#x2F;local&#x2F;ruby)</span><br><span class="line">编译：make</span><br><span class="line">安装：make install</span><br><span class="line">进入目录：cd &#x2F;usr&#x2F;local&#x2F;ruby</span><br><span class="line">让ruby添加到用户的访问变量中：cp bin&#x2F;ruby &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">让gem添加到用户的访问变量中 : cp &#x2F;usr&#x2F;local&#x2F;ruby&#x2F;bin&#x2F;gem &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">输入ruby -v</span><br></pre></td></tr></table></figure></li></ul><h3 id="集群扩容和缩容"><a href="#集群扩容和缩容" class="headerlink" title="集群扩容和缩容"></a>集群扩容和缩容</h3><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 配置新节点</span><br><span class="line">cp conf&#x2F;redis6384.conf conf&#x2F;redis6385.conf</span><br><span class="line">cp conf&#x2F;redis6384.conf conf&#x2F;redis6386.conf</span><br><span class="line">sed -i &#39;s#6384#6385#g&#39; conf&#x2F;redis6385.conf</span><br><span class="line">sed -i &#39;s#6384#6386#g&#39; conf&#x2F;redis6386.conf</span><br><span class="line"></span><br><span class="line"># 启动节点</span><br><span class="line">redis-server redis6385</span><br><span class="line">redis-server redis6386</span><br><span class="line"></span><br><span class="line"># 集群确认节点</span><br><span class="line">redis-cli -c -p 6379 cluster meet 127.0.0.1 6385</span><br><span class="line">redis-cli -c -p 6379 cluster meet 127.0.0.1 6386</span><br><span class="line">或者</span><br><span class="line">redis-cli --cluster add-node 127.0.0.1 6385 127.0.0.1 6379</span><br><span class="line">redis-cli --cluster add-node 127.0.0.1 6386 127.0.0.1 6379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看id</span><br><span class="line">redis-cli -c -p 6379 cluster nodes</span><br><span class="line"># 分配主从</span><br><span class="line">redis-cli -c -p 6386 cluster replicate 6385的id号</span><br><span class="line"></span><br><span class="line"># 重新分配槽</span><br><span class="line">redis-cli --cluster reshard 127.0.0.1 6385</span><br><span class="line">按照步骤输入即可</span><br><span class="line"></span><br><span class="line"># 平衡槽数</span><br><span class="line">redis-cli --cluster rebalance 127.0.0.1 6385</span><br><span class="line"></span><br><span class="line"># 查看节点分配</span><br><span class="line">redis-cli -c -p 6379 cluster nodes</span><br></pre></td></tr></table></figure><h4 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h4><ul><li>1.首先需要确定下线节点是否有负责的槽,<br>如果是,需要把槽迁移到其他节点,保证节点下线后整个集群槽节点映射的完整性.</li><li>2.当下线节点不再负责槽或者本身是从节点时,<br>就可以通知集群内其他节点忘记下线节点,当所有的节点忘记该节点后可以正常关闭.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看要下线的节点是否有槽</span><br><span class="line">redis-cli -c -p 6379 cluster nodes</span><br><span class="line"># 分配下线节点的槽(用rebalance爽一点)</span><br><span class="line">redis-cli --cluster reshard 127.0.0.1:6386</span><br><span class="line">分配节点数:节点数&#x2F;剩余主节点数</span><br><span class="line">分配节点id：xxxx</span><br><span class="line">需要分几次平均分配给各个节点，也可以分配后用redis-cli --cluster rebalance</span><br><span class="line"></span><br><span class="line"># 删除节点</span><br><span class="line">redis-cli --cluster del-node 192.168.1.102:6391 ID号</span><br><span class="line">redis-cli --cluster del-node 192.168.1.102:6390 ID号</span><br></pre></td></tr></table></figure><h3 id="redis-slots简介"><a href="#redis-slots简介" class="headerlink" title="redis slots简介"></a>redis slots简介</h3><ul><li>什么是slots？<br>一个redis集群包含16384个插槽（hash slot），数据库中的每个键都属于这16384个插槽其中一个，集群使用公式CRC16（key）%16384来计算键key属于哪个槽，其中CRC16（key）语句用于计算键key的CRC16校验和。<br>集群中每个主节点负责处理一部分插槽。举个例子，如果一个集群有3主节点，其中：<ul><li>节点A负责处理0号至5500号插槽</li><li>节点B负责处理5501号至11000号插槽</li><li>节点C负责处理11000号至16383号插槽</li></ul></li><li>注意：<ul><li>1.如果登录redis-cli不使用-c（普通客户端）如果当前计算槽点不属于该节点会报错。</li><li>2.不在一个slot下的键值不能使用mget，mset等多键操作。（无法选择重定向目标）</li><li>3.可以通过{}来定义组的概念，从而让set的值在一个slot中（set a{user} v, set b{user} c）</li><li>4.cluster keyslot <key>计算键key应该被放置在哪个槽上。 cluster keyslot k1</li><li>5.cluster countkeysinslot <slot>返回槽slot目前包含的键值对数量。cluster countkeysinslot 5474</li><li>6.cluster getkeysinslot <slot> <count>返回count个slot槽中的键。cluster getkeysinslot 5474 2</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">主节点宕机：</span><br><span class="line">redis-cli –p 6381 shutdown关掉6381</span><br><span class="line">通过cluster nodes查看是否slave变成了主节点</span><br><span class="line">重启原主节点，变成从节点了。。。。。</span><br><span class="line"></span><br><span class="line">如果一段slot的主从都宕机</span><br><span class="line">该集群都会宕机。</span><br><span class="line">redis.conf中的参数 cluster-require-full-coverage</span><br><span class="line">只有当16384个slot都正常时候才能对外提供服务。</span><br><span class="line">vim redis.conf</span><br><span class="line">把cluster-require-full-coverage 改为no</span><br></pre></td></tr></table></figure><h3 id="如何判断节点宕机"><a href="#如何判断节点宕机" class="headerlink" title="如何判断节点宕机"></a>如何判断节点宕机</h3><p>如果一个节点认为另外一个节点宕机，那么就是 pfail，主观宕机。<br>如果多个节点都认为另外一个节点宕机了，那么就是 fail，客观宕机，<br>跟哨兵的原理几乎一样，sdown，odown。在 cluster-node-timeout 内，<br>某个节点一直没有返回 pong，那么就被认为 pfail。如果一个节点认为某个<br>节点 pfail 了，那么会在 gossip ping 消息中，ping 给其他节点，如果<br>超过半数的节点都认为 pfail 了，那么就会变成 fail。</p><ul><li><p>从节点过滤<br>对宕机的 master node，从其所有的 slave node 中，选择一个切换成 master node。<br>检查每个 slave node 与 master node 断开连接的时间，<br>如果超过了 cluster-node-timeout * cluster-slave-validity-factor，<br>那么就没有资格切换成 master。</p></li><li><p>从节点选举<br>每个从节点，都根据自己对 master 复制数据的 offset，来设置一个选举时间，<br>offset 越大(复制数据越多)的从节点，选举时间越靠前，优先进行选举。<br>所有的 master node 开始 slave 选举投票，给要进行选举的 slave 进行投票，<br>如果大部分 master node(N/2 + 1)都投票给了某个从节点，那么选举通过，<br>那个从节点可以切换成 master。<br>从节点执行主备切换，从节点切换为主节点。</p></li></ul><h2 id="一致性hash集群"><a href="#一致性hash集群" class="headerlink" title="一致性hash集群"></a>一致性hash集群</h2><p>redis集群除了官方CRC槽计算，还可以通过一致性hash进行手工配置redis集群，<br>一致性hash大概就是对各个redis实例ip:port进行hash计算，然后形成一个环，<br>来了一个 key，首先计算 hash 值，并确定此数据在环上的位置，从此位置沿环<br>顺时针“行走”，遇到的第一个 master 节点就是 key 所在位置。</p><h3 id="容灾-amp-扩容-amp-缩容"><a href="#容灾-amp-扩容-amp-缩容" class="headerlink" title="容灾&amp;扩容&amp;缩容"></a>容灾&amp;扩容&amp;缩容</h3><ul><li><p>容灾<br>一个节点挂掉后，仅仅该节点上的数据受到影响，新的数据可以存入下一个节点</p></li><li><p>扩容<br>需要把后一个节点的数据进行重新分配，这里如果加入虚拟节点分配逻辑更为复杂</p></li><li><p>缩容<br>需要把该节点的数据进行重新分配到后一个节点。</p></li><li><p>缺点<br>不使用虚拟节点会因为节点少导致数据分配不均，出现缓存热点问题。</p></li></ul><h3 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h3><p>其实就是给ip:port再生成几个虚拟的节点，比如ip:port:1, 2, 3然后hash，这个时候<br>计算的key如果前面是虚拟节点就存入该虚拟节点对应的真实节点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么要用redis集群？&quot;&gt;&lt;a href=&quot;#为什么要用redis集群？&quot; class=&quot;headerlink&quot; title=&quot;为什么要用redis集群？&quot;&gt;&lt;/a&gt;为什么要用redis集群？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.容量内存不够，redis如何进行扩容</summary>
      
    
    
    
    <category term="nosql" scheme="http://example.com/categories/nosql/"/>
    
    <category term="redis高级篇" scheme="http://example.com/categories/nosql/redis%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/06/08/%E5%88%86%E8%A1%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://example.com/2021/06/08/%E5%88%86%E8%A1%A8%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-06-08T00:47:52.771Z</published>
    <updated>2021-06-07T15:53:10.361Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
